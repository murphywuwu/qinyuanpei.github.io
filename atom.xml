<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个人的孤落时辰</title>
  
  <subtitle>纵有疾风起，人生不言弃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qinyuanpei.github.io/"/>
  <updated>2020-07-10T02:33:20.077Z</updated>
  <id>https://qinyuanpei.github.io/</id>
  
  <author>
    <name>飞鸿踏雪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次从已损坏的Git仓库中找回代码的经历</title>
    <link href="https://qinyuanpei.github.io/posts/686567367/"/>
    <id>https://qinyuanpei.github.io/posts/686567367/</id>
    <published>2020-06-23T17:08:17.000Z</published>
    <updated>2020-07-10T02:33:20.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>突然发觉，古人其实特别有趣，譬如有古语云：『常在河边走，哪有不湿鞋』，实在是富有生活气息的一句俗语，可古人又有言语：『光脚的不怕穿鞋的』，更是朴实无华的一句话。上周下班适逢天降大雨，我撑伞送一位同事到地铁站，结果走到半路人家来一句，“你快点走吧，我穿着凉鞋”，一时竟无语凝噎。常在河边走，固然会有湿鞋的顾虑，可真正的气度绝不是光着脚满地跑，如何做到湿了鞋子而不慌呢？答案是脚上无凉鞋而心中有凉鞋。今天，我将为大家我在使用<code>Git</code>过程中如何“湿鞋”、如何不怕“湿鞋”的一个故事(逃</p><h1 id="蓝屏重启后Git居然坏了？"><a href="#蓝屏重启后Git居然坏了？" class="headerlink" title="蓝屏重启后Git居然坏了？"></a>蓝屏重启后Git居然坏了？</h1><p>中国传统小说喜欢从神话讲起，端的是汪洋恣肆、纵横捭阖。而国外小说则喜欢从一片常青藤叶这种不显眼的事物写起，足可见二者见天地众生视角之不同。而我这个故事，是再普通不过的一次蓝屏。重启后Visual Studio提示恢复了未保存的代码，此时，我并未注意到Git仓库损坏的情况，就这样，我在一个“游离态”的版本上编写代码，直到我打开SourceTree的时候(作者注：<strong>我就是那个命令行和GUI混合使用的奇葩</strong>)，发现左侧本地分支全部消失，在命令行里<code>git status</code>，发现根本没有这个分支，而<code>.git/refs/</code>对应分支指向了一个错误的Hash，我意识到我的Git仓库文件可能损坏了，这意味着我写的新feature可能丢失了，此时，Git中提示的类似的错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> error: refs/remotes/origin/HEAD: invalid sha1 pointer 0000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>在此之前，其实博主已经经历过类似的事情，在没有未提交的代码的情况下，其实可以暴力删除<code>. git</code>目录，然后在<code>git init</code>即可，这相当于重新初始化仓库啦，在这种情况下，本地的分支会被删掉，你需要重新建新分支。可是这次不一样啊，在做的是一个即将发版的新feature，不允许我出这样的选择啊！博主双掌合一，像夏洛克一样冷静思考，缓缓地在命令行下敲出<code>git reflog</code>，这条命令相当于你在Git 中的监控日志，你对Git所做的一切都会成为呈堂证供。此时，你会得到下面的信息——沉默是今晚的康桥……</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> fatal: You are on a branch yet to be born</span></span><br></pre></td></tr></table></figure><p>这是什么意思呢？意思就是这个分支还是一个“新生儿“的状态，新生儿怎么可能又活动记录呢？所以，使用Git的准则之一，只要仓库没有坏，通过<code>git reflog</code>找到对应的Hash ，<code>git checkout</code>就可以找回代码，哪怕你刚刚手滑删除了一个未提交的分支，这种情况下都可以找回来。But 现在这种状况下，这条路显然是走不通啦。继续双掌合一，像夏洛克一样冷静思考，每个分支里其实是记录着一个hash ，对应着最后的一次提交，现在是这个hash不对，那就要找到正确的hash啊。命令行已经非常明确地告诉你，是因为某些object丢失或者损坏了，那不妨先用<code>git fsck</code>试试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fsck</span></span><br><span class="line">notice: HEAD points to an unborn branch (master)</span><br><span class="line">Checking object directories: 100% (256/256), done.</span><br><span class="line">Checking objects: 100% (589/589), done.</span><br><span class="line">error: refs/remotes/origin/HEAD: invalid sha1 pointer 0000000000000000000000000000000000000000</span><br><span class="line">notice: No default references</span><br><span class="line">dangling tag 92d0fe18f9a55177d955edf58048b49db7987d5b</span><br><span class="line">dangling commit aa7856977e80d11833e97b4151f400a516316179</span><br><span class="line">dangling commit 16e449da82ec8bb51aed56c0c4c05473442db90a</span><br><span class="line">dangling commit 864c345397fcb3bdb902402e17148e19b3f263a8</span><br><span class="line">dangling tag be9471e1263a78fd765d4c72925c0425c90d3d64</span><br></pre></td></tr></table></figure><p>此时，我们就会得到这样的信息。我天，这简直太良心了好吧，连哪一个object丢了都明明白白地告诉你。既然是提示解包(unpack)的时候失败，不妨先手动解包看看呗，好吧，果然程序是不会欺骗人的。这个时候，我注意到这些里面有一些提交(commit)，我在想这些有没有可能是残留的有效分支，于是使用下面的命令创建临时分支，一番折腾发现这些分支都离我的分支比较远，所以，基本可以排除了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//尝试手动解包</span><br><span class="line"><span class="meta">$</span><span class="bash"> mv .git/objects/pack/pack-0672bd01813664b80248dbe8330bf52da9c02b9f.pack .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git unpack-objects -r &lt; pack-0672bd01813664b80248dbe8330bf52da9c02b9f.pack</span></span><br><span class="line">//从某个commit新建临时分支</span><br><span class="line"><span class="meta">$</span><span class="bash"> git update-ref refs/heads/recovery-1 aa7856977e80d11833e97b4151f400a516316179</span></span><br></pre></td></tr></table></figure><p>我又不甘心地看了看<code>git fsck</code>命令，发现它居然有一个<code>--lost-found</code>的参数可以用，这样子，我居然就得到一个名为<code>lost-found</code>的文件夹，它里面有一些以hash命名的文件，我挑选了一个离我蓝屏时间最近的文件，直接<code>git checkout</code>过去，发现这正是我需要的内容，赶紧<code>git checkout –b</code>存档，这实在是太珍贵了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fsck --lost-found</span></span><br><span class="line">error: inflate: data stream error (unknown compression method)</span><br><span class="line">error: unable to unpack header of .git/objects/67/781ba4991aee01c0bc0d640ae9ee8b674b2f47</span><br><span class="line">error: 67781ba4991aee01c0bc0d640ae9ee8b674b2f47: object corrupt or missing: .git/objects/67/781ba4991aee01c0bc0d640ae9ee8b674b2f47</span><br><span class="line">error: inflate: data stream error (unknown compression method)</span><br><span class="line">error: unable to unpack header of .git/objects/6f/34f2bbde304619622f77f9ca159ed97b6ddafd</span><br><span class="line">error: 6f34f2bbde304619622f77f9ca159ed97b6ddafd: object corrupt or missing: .git/objects/6f/34f2bbde304619622f77f9ca159ed97b6ddafd</span><br><span class="line">error: inflate: data stream error (unknown compression method)</span><br><span class="line">error: unable to unpack header of .git/objects/89/6e969a25c2238ebbb41e895753e82da1cdc7af</span><br><span class="line">error: 896e969a25c2238ebbb41e895753e82da1cdc7af: object corrupt or missing: .git/objects/89/6e969a25c2238ebbb41e895753e82da1cdc7af</span><br><span class="line">error: inflate: data stream error (unknown compression method)</span><br><span class="line">error: unable to unpack header of .git/objects/d8/a180969f6cf8047def4b50c7c920dcd2b6f5cd</span><br><span class="line">error: d8a180969f6cf8047def4b50c7c920dcd2b6f5cd: object corrupt or missing: .git/objects/d8/a180969f6cf8047def4b50c7c920dcd2b6f5cd</span><br></pre></td></tr></table></figure><p>其实，接触Git的这些年里，使用命令行并没有让我觉得Git难以接近，相反它让我对GUI理解更深一点，就像好多人分不清<code>pull</code>和<code>fetch</code>，因为你不看命令行的输出啊；有好多人每次SourceTree一报错就不知道该怎么办 ，其实Git给的提示真的相当清晰了；我之前一直不知道什么叫<code>cherry-pick</code>，后来发现这玩意儿就是我们所说的“补丁”。平时这种问题可能就放过去了，可这次“扶大厦于将顷”，让代码失而复得的经历，的确令人难忘，所以，我更想把它写下来，当你都能真正驾驭它了，是用命令行还是用GUI 就真的不在重要啦！这次的一个例外是索引没有坏，如果索引坏了，可以试试下面的命令：<code>git reset --mixed</code>。我还是坚持一个观点，<strong>Git仓库坏了，能修复尽量去修复，不到万不得已，千万不要去删<code>. git</code>目录</strong>。</p><h1 id="各种场景下的Git恢复-撤销"><a href="#各种场景下的Git恢复-撤销" class="headerlink" title="各种场景下的Git恢复/撤销"></a>各种场景下的Git恢复/撤销</h1><p>在这篇文章刚开始的时候，我问大家，如何做到湿了鞋子而不慌呢？答案是脚上无凉鞋而心中有凉鞋。虽然Git本身是一款非常复杂的软件，可我们依然有很多的策略去应对各种“失误”，正如这篇文章 <a href="https://git.seveas.net/undoing-all-kinds-of-mistakes.html#undoing-all-kinds-of-mistakes" target="_blank" rel="noopener">Undoing all kinds of mistakes</a> 所言，Git深知人类都是不完美的，面对平时使用Git过程中的各种失误，我们可以尝试使用下面的思路来解决。</p><h2 id="更改未提交到暂存区"><a href="#更改未提交到暂存区" class="headerlink" title="更改未提交到暂存区"></a>更改未提交到暂存区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//放弃所有文件的更改</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></span><br><span class="line">//放弃指定文件的更新</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- &lt;path/to/file&gt;</span></span><br></pre></td></tr></table></figure><h2 id="更改已提交到暂存区"><a href="#更改已提交到暂存区" class="headerlink" title="更改已提交到暂存区"></a>更改已提交到暂存区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//回到最近的一次提交(改变指针)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">//回到某一次提交(改变指针)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard &lt;commitId&gt;</span></span><br><span class="line">//全部放弃=回到最近的一次提交(改变指针)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 全部放弃</span></span><br><span class="line">//放弃提交指定文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset HEAD &lt;path/to/file&gt;</span></span><br><span class="line">//修改提交信息</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit --amend</span></span><br></pre></td></tr></table></figure><h2 id="更改已推送到远程服务器"><a href="#更改已推送到远程服务器" class="headerlink" title="更改已推送到远程服务器"></a>更改已推送到远程服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//撤销前一次提交(产生新的提交)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert HEAD </span></span><br><span class="line">//撤销前前一次提交(产生新的提交) </span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert HEAD^</span></span><br><span class="line">//撤销某一个提交(产生新的提交)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert commit</span></span><br></pre></td></tr></table></figure><h2 id="万能公式"><a href="#万能公式" class="headerlink" title="万能公式"></a>万能公式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//万能公式</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;commitId&gt;</span></span><br><span class="line">//退而求其次</span><br><span class="line"><span class="meta">$</span><span class="bash"> git fsck --lost-found</span></span><br></pre></td></tr></table></figure><p>除了SourceTree，我想安利第二个Git GUI工具：<a href="https://git-fork.com/" target="_blank" rel="noopener">Fork</a>，大家感兴趣的话可以安装试用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://git.seveas.net/repairing-and-recovering-broken-git-repositories.html" target="_blank" rel="noopener">Repairing and recovering broken git repositories</a></li><li><a href="https://zhuanlan.zhihu.com/p/72091550?utm_source=cn.wiz.note&utm_medium=social&utm_oi=53182268964864" target="_blank" rel="noopener">Git撤销&amp;回滚操作</a></li><li><a href="http://blog.psjay.com/posts/git-revert-merge-commit/" target="_blank" rel="noopener">Git撤销合并</a></li><li><a href="https://stackoverflow.com/questions/9059335/get-parents-of-a-merge-commit-in-git" target="_blank" rel="noopener">How to get the parents of a merge commit in git?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="开发工具" scheme="https://qinyuanpei.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://qinyuanpei.github.io/tags/Git/"/>
    
      <category term="工具" scheme="https://qinyuanpei.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="软件" scheme="https://qinyuanpei.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core原生DI扩展之属性注入实现</title>
    <link href="https://qinyuanpei.github.io/posts/1658310834/"/>
    <id>https://qinyuanpei.github.io/posts/1658310834/</id>
    <published>2020-06-20T13:10:31.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在上一篇博客里，我们为<code>.NET Core</code>原生DI扩展了基于名称的注入功能。而今天，我们要来聊一聊属性注入。关于属性注入，历来争议不断，支持派认为，构造函数注入会让构造函数变得冗余，其立意点主要在代码的可读性。而反对派则认为，属性注入会让组件间的依赖关系变得模糊，其立意点主要在代码是否利于测试。我认识的一位前辈更是留下一句话：<strong>只要构造函数中超过5个以上的参数，我就觉得无法忍受</strong>。我个人是支持派，因为我写这篇博客的动机，正是一位朋友向我吐槽公司项目，说一个控制器里单单是构造函数里的参数就有十来个。在这其中最大的痛点是，有些在构造函数中注入的类型其实是重复的，譬如<code>ILogger&lt;&gt;</code>、<code>IMapper</code>、<code>IRepository&lt;&gt;</code>以及用户上下文信息等，虽然继承可以让痛苦减轻一点，可随之而来的就是冗长的base调用链。博主参与的项目里不乏有大量使用静态类、静态方法的，譬如LogEx、UserContext等等，可这种实践显然与依赖注入的思想背道而驰，为吾所不取也，这就是这篇博客产生的背景啦！</p><p>好了，当视角正式切入属性注入的时候，我们不妨先来考虑这样一件事情，即：当我们从容器里Resolve一个特定的类型的时候，这个实例到底是怎么被创建出来的呢？这个问题如果给到三年前的我，我会不假思索的说出两个字——反射。的确，这是最简单的一种实现方式，换句话说，首先，容器收集构造函数中的类型信息，并根据这些类型信息Resolve对应的实例；其次，这些实例最终会被放到一个<code>object[]</code>里，并作为参数传递给<code>Activator.CreateInstance()</code>方法。这是一个一般意义上的Ioc容器的工作机制。那么，相对应地，关于属性注入，我们可以认为容器Reslove一个特定类型的时候，这个类型提供了一个空的构造函数(<strong>这一点非常重要</strong>)，再创建完实例以后，再去Reslove这个类型中的字段或者是属性。所以，为了在微软自带的DI上实现属性注入，我们就必须实现自己的ServiceProvider——AutowiredServiceProvider，这个ServiceProvider相比默认的ServiceProvider多了一部分功能，即反射属性或者字段的过程。一旦想通这一点，我们可以考虑装饰器模式。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutowiredServiceProvider</span> : <span class="title">IServiceProvider</span>, <span class="title">ISupportRequiredService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutowiredServiceProvider</span> (<span class="params">IServiceProvider serviceProvider</span>)</span> &#123;</span><br><span class="line">        _serviceProvider = serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetRequiredService</span> (<span class="params">Type serviceType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GetService (serviceType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">GetService</span> (<span class="params">Type serviceType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> instance = _serviceProvider.GetService (serviceType);</span><br><span class="line">        Autowried (instance);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Autowried</span> (<span class="params"><span class="keyword">object</span> instance</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_serviceProvider == <span class="literal">null</span> || instance == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> flags = BindingFlags.Public | BindingFlags.NonPublic;</span><br><span class="line">        <span class="keyword">var</span> type = instance <span class="keyword">as</span> Type ?? instance.GetType ();</span><br><span class="line">        <span class="keyword">if</span> (instance <span class="keyword">is</span> Type) &#123;</span><br><span class="line">            instance = <span class="literal">null</span>;</span><br><span class="line">            flags |= BindingFlags.Static;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flags |= BindingFlags.Instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Feild</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> type.GetFields (flags)) &#123;</span><br><span class="line">        <span class="keyword">var</span> autowriedAttr = field.GetCustomAttribute&lt;AutowiredAttribute&gt; ();</span><br><span class="line">            <span class="keyword">if</span> (autowriedAttr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dependency = GetService (field.FieldType);</span><br><span class="line">                <span class="keyword">if</span> (dependency != <span class="literal">null</span>)</span><br><span class="line">                    field.SetValue (instance, dependency);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Property</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> property <span class="keyword">in</span> type.GetProperties (flags)) &#123;</span><br><span class="line">            <span class="keyword">var</span> autowriedAttr = property.GetCustomAttribute&lt;AutowiredAttribute&gt; ();</span><br><span class="line">            <span class="keyword">if</span> (autowriedAttr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dependency = GetService (property.PropertyType);</span><br><span class="line">                <span class="keyword">if</span> (dependency != <span class="literal">null</span>)</span><br><span class="line">                    property.SetValue (instance, dependency);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器模式，又被称之为“静态代理”，是面向切面编程(<strong>AOP</strong>)的实现方式之一，我们在这里为默认的ServiceProvider增加了<code>Autowired()</code>方法，它会扫描所有含<code>[Autowired]</code>标签的字段或属性，并尝试从容器中获取对应类型的实例。所以，这又说到了反对属性注入第二个理由，即：使用反射带来的性能问题，尤其是当依赖项间的引用关系异常复杂的时候。当然，所谓“兵来将挡，水来土掩”，反射产生性能损失，可以考虑用Emit或者表达书树作来替代反射，不过，微软貌似在.NET Core中阉割了一部分Emit的API，这些都是Todo啦你懂就好，我们继续往下说。接下来，为了替换掉微软默认的ServiceProvider，我们还必须实现自己的ServiceProviderFactory，像Autofac、Unity、Castle等容器，都是采用类似的做法来支持.NET Core。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class AutowiredServiceProviderFactory : IServiceProviderFactory&lt;IServiceCollection&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IServiceProvider <span class="title">CreateServiceProvider</span> (<span class="params">IServiceCollection containerBuilder</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> serviceProvider = containerBuilder.BuildServiceProvider ();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AutowiredServiceProvider (serviceProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IServiceCollection IServiceProviderFactory&lt;IServiceCollection&gt;.CreateBuilder (IServiceCollection services) &#123;</span><br><span class="line">        <span class="keyword">if</span> (services == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ServiceCollection ();</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们是以微软内置的DI为基础来进行扩展的，所以，在实现<code>AutowiredServiceProviderFactory</code>的时候，提供的泛型参数依然是<code>IServiceCollection</code>。它需要实现两个方法：<code>CreateBuilder</code>和<code>CreateServiceProvider</code>，在这里我们需要返回我们“装饰”过的ServiceProvider。接下来，万事俱备，只欠东风，我们需要在项目入口(<strong>Program.cs</strong>)调用<code>UseServiceProviderFactory()</code>方法，如果你在.NET Core 使用Autofac，应该会对此感到亲切：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">  Host.CreateDefaultBuilder(args)</span><br><span class="line">    .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">      webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">    &#125;)</span><br><span class="line">    .UseServiceProviderFactory(<span class="keyword">new</span> AutowiredServiceProviderFactory());</span><br></pre></td></tr></table></figure><p>至此，我们就完成了对微软默认的ServiceProvider的替换。假设我们有两个接口：<code>IFooService</code>和<code>IBarService</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IFooService &amp;&amp; FooService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFooService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">string</span> <span class="title">Foo</span> (<span class="params"></span>)</span>;</span><br><span class="line">  IBarService Bar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooService</span> : <span class="title">IFooService</span> &#123;</span><br><span class="line">  [<span class="meta">Autowired</span>]</span><br><span class="line">  <span class="keyword">public</span> IBarService Bar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Foo</span> (<span class="params"></span>)</span> =&gt; <span class="string">"I am Foo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IBarService &amp;&amp; BarService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBarService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">string</span> <span class="title">Bar</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BarService</span> : <span class="title">IBarService</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Bar</span> (<span class="params"></span>)</span> =&gt; <span class="string">"I am Bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到<code>FooService</code>依赖<code>IBarService</code>，而我们只需要给<code>Bar</code>加上<code>[Autowired]</code>标签即可，风格上借鉴了<code>Spring</code>的<code>@Autowired</code>。只要这两个接口被注入到Ioc容器中，这个属性就可以自动获得相应的服务实例。一起来看下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IFooService,FooService&gt;();</span><br><span class="line">services.AddTransient&lt;IBarService, BarService&gt;();</span><br><span class="line"><span class="keyword">var</span> serviceProvider = <span class="keyword">new</span> AutowiredServiceProvider(services.BuildServiceProvider());</span><br><span class="line"><span class="keyword">var</span> fooService = serviceProvier.GetRequiredService&lt;IFooService&gt;();</span><br><span class="line">Console.WriteLine(<span class="string">$"<span class="subst">&#123;fooService.Foo()&#125;</span> , <span class="subst">&#123;fooService.Bar.Bar()&#125;</span>"</span>);</span><br></pre></td></tr></table></figure><p>回到我们一开始遇到的那个问题，如果我们让<code>IFooService</code>变成Controller中的一个属性，是否就能解决构造函数参数冗余的问题了呢？下面是一段简单的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">Autowired</span>]</span><br><span class="line">  <span class="keyword">public</span> IFooService Foo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">Autowired</span>]</span><br><span class="line">  <span class="keyword">public</span> ILogger&lt;WeatherForecastController&gt; Logger &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">HttpGet</span>]</span><br><span class="line">  [<span class="meta">Route(<span class="meta-string">"Autowired"</span>)</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetAutowriedService</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> Content(<span class="string">$"<span class="subst">&#123;Foo.Foo()&#125;</span> , <span class="subst">&#123;Foo.Bar.Bar()&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们会发现<code>Foo</code>属性提示空引用错误，这是为什么呢？这是因为Controller并不是通过IoC容器来负责创建和销毁的，为了实现属性注入的目的，我们就必须让IoC容器来全面接管Controller的创建和销毁，此时，我们需要做两件事情，其一，注册Controller到IoC容器中；其二，实现自定义的<code>IControllerActivator</code>，并替换默认的ControllerActivator:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">services.AddControllers();</span><br><span class="line">services.AddControllersWithViews().AddControllersAsServices();</span><br><span class="line">services.Replace(ServiceDescriptor.Transient&lt;IControllerActivator, AutowiredControllerActivator&gt;());</span><br></pre></td></tr></table></figure><p>其中，<code>AutowiredControllerActivator</code>实现如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutowiredControllerActivator</span> : <span class="title">IControllerActivator</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Create</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(ControllerContext));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> controllerType = context.ActionDescriptor.ControllerTypeInfo.AsType();</span><br><span class="line">    <span class="keyword">var</span> serviceProvider = context.HttpContext.RequestServices;</span><br><span class="line">    <span class="keyword">if</span>(!(serviceProvider <span class="keyword">is</span> AutowiredServiceProvider))</span><br><span class="line">      serviceProvider = <span class="keyword">new</span> AutowiredServiceProvider(context.HttpContext.RequestServices);</span><br><span class="line">    <span class="keyword">var</span> controller = serviceProvider.GetRequiredService(controllerType);</span><br><span class="line">    <span class="keyword">return</span> controller;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params">ControllerContext context, <span class="keyword">object</span> controller</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span>)</span><br><span class="line">      <span class="function">hrow new <span class="title">ArgumentNullException</span>(<span class="params"><span class="keyword">nameof</span>(ControllerContext</span>))</span>;</span><br><span class="line">    <span class="keyword">if</span> (controller == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(controller));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> disposeable = controller <span class="keyword">as</span> IDisposable;</span><br><span class="line">    <span class="keyword">if</span> (disposeable != <span class="literal">null</span>)</span><br><span class="line">      disposeable.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，一切都会像我们期待的那样美好，返回正确的结果。目前，这个方案最大的问题是，在非Controller层使用的时候，还是需要构造<code>AutowirdServiceProvider</code>实例。其实，在<code>AutowiredControllerActivator</code>里同样有这个问题，就是你即使实现<code>IServiceProviderFactory</code>接口，依然没有办法替换掉默认的ServiceProvider实现，只能说它能解决一部分问题，同时又引入了新的问题，最直观的例子是，你看到一个接口的时候，你并不能找全所有加了<code>[Autowired]</code>标签的依赖项，所以，直接造成了依赖关系模糊、不透明、难以测试等等的一系列问题，我认为，在一个可控的、小范围内使用还是可以的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="DI" scheme="https://qinyuanpei.github.io/tags/DI/"/>
    
      <category term="依赖注入" scheme="https://qinyuanpei.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core原生DI扩展之基于名称的注入实现</title>
    <link href="https://qinyuanpei.github.io/posts/1734098504/"/>
    <id>https://qinyuanpei.github.io/posts/1734098504/</id>
    <published>2020-06-10T13:08:03.000Z</published>
    <updated>2020-07-10T02:33:20.061Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>接触 <code>.NET Core</code> 有一段时间了，最大的感受无外乎无所不在的依赖注入，以及抽象化程度更高的全新框架设计。想起三年前 Peter 大神手写 IoC 容器时的惊艳，此时此刻，也许会有不一样的体会。的确，那个基于字典实现的 IoC 容器相当“简陋”，就像 <code>.NET Core</code> 里的依赖注入，默认(原生)都是采用构造函数注入的方式，可其实从整个依赖注入的理论上而言，属性注入和方法注入的方式，同样是依赖注入的实现方式啊。最近一位朋友找我讨论，<code>.NET Core</code> 里该如何实现 <code>Autowried</code>，这位朋友本身是 Java 出身，一番攀谈了解到原来是指属性注入啊。所以，我打算用两篇博客来聊聊 <code>.NET Core</code> 中的原生 DI 的扩展，而今天这篇，则单讲基于名称的注入的实现。</p><p><a href="https://autofac.org/" target="_blank" rel="noopener">Autofac</a>是一个非常不错的 IoC 容器，通常我们会使用它来替换微软内置的 IoC 容器。为什么要这样做呢？其实，微软在其官方<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1" target="_blank" rel="noopener">文档</a>中早已给出了说明，即微软内置的 IoC 容器实际上是不支持以下特性的： <strong>属性注入、基于名称的注入、子容器、自定义生存期管理、对迟缓初始化的 Func<T> 支持、基于约定的注册</strong>。这是我们为什么要替换微软内置的 IoC  容器的原因，除了Autofac 以外，我们还可以考虑 <code>Unity</code> 、<code>Castle</code> 等容器，对我个人而言，其实最需要的一个功能是“扫描”，即它可以针对程序集中的组件或者服务进行自动注册。这个功能可以让人写起代码更省心一点，果然，人类的本质就是让自己变得更加懒惰呢。好了，话题拉回到本文主题，我们为什么需要基于名称的注入呢？它其实针对的是“<strong>同一个接口对应多种不同的实现</strong>”这种场景。</p><p>OK ，假设我们现在有一个接口ISayHello，它对外提供一个方法SayHello：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISayHello</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">string</span> <span class="title">SayHello</span>(<span class="params"><span class="keyword">string</span> receiver</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对应地，我们有两个实现类，ChineseSayHello和EnglishSayHello：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ChineseSayHello</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseSayHello</span> : <span class="title">ISayHello</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SayHello</span>(<span class="params"><span class="keyword">string</span> receiver</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">$"你好，<span class="subst">&#123;receiver&#125;</span>"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EnglishSayHello</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnglishSayHello</span> : <span class="title">ISayHello</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">SayHello</span>(<span class="params"><span class="keyword">string</span> receiver</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">$"Hello，<span class="subst">&#123;receiver&#125;</span>"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，一顿操作猛如虎：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">services.AddTransient&lt;ISayHello, ChineseSayHello&gt;();</span><br><span class="line">services.AddTransient&lt;ISayHello, EnglishSayHello&gt;();</span><br><span class="line"><span class="keyword">var</span> serviceProvider = services.BuildServiceProvider();</span><br><span class="line"><span class="keyword">var</span> sayHello = serviceProvider.GetRequiredService&lt;ISayHello&gt;();</span><br></pre></td></tr></table></figure><p>没想到，尴尬的事情就发生了，大家来猜猜看，这个时候我们获取到的<code>ISayHello</code>到底是哪一个呢？事实上，它会获取到<code>EnglishSayHello</code>这个实现类，为什么呢？因为它后注册的呀！当然，微软的工程师们不可能想不到这个问题，所以，官方推荐的做法是使用<code>IEnumerable&lt;ISayHello&gt;</code>，这样我们就能拿到所有注册的<code>ISayHello</code>，然后自己决定到底要使用一种实现，类似下面这样：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHellos = _serviceProvider.GetRequiredService&lt;IEnumerable&lt;ISayHello&gt;&gt;();</span><br><span class="line"><span class="keyword">var</span> chineseSayHello = sayHellos.FirstOrDefault(x =&gt; x.GetType() == (<span class="keyword">typeof</span>(ChineseSayHello)));</span><br><span class="line"><span class="keyword">var</span> englishSayHello = sayHellos.FirstOrDefault(x =&gt; x.GetType() == (<span class="keyword">typeof</span>(EnglishSayHello)));</span><br></pre></td></tr></table></figure><p>可这样还是有一点不方便啊，继续改造：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;ChineseSayHello&gt;();</span><br><span class="line">services.AddTransient&lt;EnglishSayHello&gt;();</span><br><span class="line">services.AddTransient(implementationFactory =&gt;</span><br><span class="line">&#123;</span><br><span class="line">  Func&lt;<span class="keyword">string</span>, ISayHello&gt; sayHelloFactory = lang =&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (lang)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"Chinese"</span>:</span><br><span class="line">        <span class="keyword">return</span> implementationFactory.GetService&lt;ChineseSayHello&gt;();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"English"</span>:</span><br><span class="line">        <span class="keyword">return</span> implementationFactory.GetService&lt;EnglishSayHello&gt;();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sayHelloFactory;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样子，这个工厂类看起来就消失了对吧，其实并没有(逃</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayHelloFactory = _serviceProvider.GetRequiredService&lt;Func&lt;<span class="keyword">string</span>, ISayHello&gt;&gt;();</span><br><span class="line"><span class="keyword">var</span> chineseSayHello = sayHelloFactory(<span class="string">"Chinese"</span>);</span><br><span class="line"><span class="keyword">var</span> englishSayHello = sayHelloFactory(<span class="string">"English"</span>);</span><br></pre></td></tr></table></figure><p>这距离我们的目标有一点接近了哈，唯一的遗憾是这个工厂类对调用方是透明的，可谓是隐藏细节上的失败。有没有更好的方案呢？好了，我不卖关子啦，一起来看下面的实现。</p><p>首先，我们定义一个接口<code>INamedServiceProvider</code>, 顾名思义，就不需要再解释什么了:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">INamedServiceProvider</span></span><br><span class="line">&#123;</span><br><span class="line">  TService GetService&lt;TService&gt;(<span class="keyword">string</span> serviceName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，编写实现类<code>NamedServiceProvider</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NamedServiceProvider</span> : <span class="title">INamedServiceProvider</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IDictionary&lt;<span class="keyword">string</span>, Type&gt; _registrations;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedServiceProvider</span>(<span class="params">IServiceProvider serviceProvider, IDictionary&lt;<span class="keyword">string</span>, Type&gt; registrations</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    _serviceProvider = serviceProvider;</span><br><span class="line">    _registrations = registrations;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> TService GetService&lt;TService&gt;(<span class="keyword">string</span> serviceName)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(!_registrations.TryGetValue(serviceName, <span class="keyword">out</span> <span class="keyword">var</span> implementationType))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Service \"<span class="subst">&#123;serviceName&#125;</span>\" is not registered in container"</span>);</span><br><span class="line">    <span class="keyword">return</span> (TService)_serviceProvider.GetService(implementationType);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到，我们这里用一个字典来维护名称和类型间的关系，一切仿佛又回到三年前Peter大神手写IoC的那个下午。接下来，我们定义一个<code>INamedServiceProviderBuilder</code>, 它可以让我们使用链式语法注册服务：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">INamedServiceProviderBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">  INamedServiceProviderBuilder AddNamedService&lt;TService&gt;(<span class="keyword">string</span> serviceName, ServiceLifetime lifetime) <span class="keyword">where</span> TService : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">  INamedServiceProviderBuilder TryAddNamedService&lt;TService&gt;(<span class="keyword">string</span> serviceName, ServiceLifetime lifetime) <span class="keyword">where</span> TService : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Build</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，Add和TryAdd的区别就是后者会对已有的键进行检查，如果键存在则不会继续注册，和微软自带的DI中的Add/TryAdd对应，我们一起来看它的实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NamedServiceProviderBuilder</span> : <span class="title">INamedServiceProviderBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceCollection _services;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> IDictionary&lt;<span class="keyword">string</span>, Type&gt; _registrations = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, Type&gt;();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NamedServiceProviderBuilder</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    _services = services;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Build</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    _services.AddTransient&lt;INamedServiceProvider&gt;(sp =&gt; <span class="keyword">new</span> NamedServiceProvider(sp, _registrations));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> INamedServiceProviderBuilder AddNamedService&lt;TImplementation&gt;(<span class="keyword">string</span> serviceName, ServiceLifetime lifetime) <span class="keyword">where</span> TImplementation : <span class="keyword">class</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (lifetime)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Transient:</span><br><span class="line">        _services.AddTransient&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Scoped:</span><br><span class="line">        _services.AddScoped&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Singleton:</span><br><span class="line">        _services.AddSingleton&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _registrations.Add(serviceName, <span class="keyword">typeof</span>(TImplementation));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> INamedServiceProviderBuilder TryAddNamedService&lt;TImplementation&gt;(<span class="keyword">string</span> serviceName, ServiceLifetime lifetime) <span class="keyword">where</span> TImplementation : <span class="keyword">class</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (lifetime)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Transient:</span><br><span class="line">        _services.TryAddTransient&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Scoped:</span><br><span class="line">        _services.TryAddScoped&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ServiceLifetime.Singleton:</span><br><span class="line">        _services.TryAddSingleton&lt;TImplementation&gt;();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _registrations.TryAdd(serviceName, <span class="keyword">typeof</span>(TImplementation));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信到这里，大家都明白博主的意图了吧，核心其实是在<code>Build()</code>方法中，因为我们最终需要的是其实是<code>NamedServiceProvider</code>，而在此之前的种种，都属于收集依赖、构建ServiceProvider的过程，所以，它被定义为<code>NamedServiceProviderBuilder</code>，我们在这里维护的这个字典，最终会被传入到<code>NamedServiceProvider</code>的构造函数中，这样我们就知道根据名称应该返回哪一个服务了。</p><p>接下来，为了让它和微软自带的DI无缝粘合，我们需要编写一点扩展方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceCollectionExstension</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> TService GetNamedService&lt;TService&gt;(<span class="keyword">this</span> IServiceProvider serviceProvider, <span class="keyword">string</span> serviceName)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> namedServiceProvider = serviceProvider.GetRequiredService&lt;INamedServiceProvider&gt;();</span><br><span class="line">    <span class="keyword">if</span> (namedServiceProvider == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">$"Service \"<span class="subst">&#123;<span class="keyword">nameof</span>(INamedServiceProvider)&#125;</span>\" is not registered in container"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> namedServiceProvider.GetService&lt;TService&gt;(serviceName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> INamedServiceProviderBuilder <span class="title">AsNamedServiceProvider</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">var</span> builder = <span class="keyword">new</span> NamedServiceProviderBuilder(services);</span><br><span class="line">    <span class="keyword">return</span> builder;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，回到我们一开始的问题，它是如何被解决的呢？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">  .AsNamedServiceProvider()</span><br><span class="line">  .AddNamedService&lt;ChineseSayHello&gt;(<span class="string">"Chinese"</span>, ServiceLifetime.Transient)</span><br><span class="line">  .AddNamedService&lt;EnglishSayHello&gt;(<span class="string">"English"</span>, ServiceLifetime.Transient)</span><br><span class="line">  .Build();</span><br><span class="line"><span class="keyword">var</span> serviceProvider = services.BuildServiceProvier();</span><br><span class="line"><span class="keyword">var</span> chineseSayHello = serviceProvider.GetNamedService&lt;ISayHello&gt;(<span class="string">"Chinese"</span>);</span><br><span class="line"><span class="keyword">var</span> englishSayHello = serviceProvider.GetNamedService&lt;ISayHello&gt;(<span class="string">"English"</span>);</span><br></pre></td></tr></table></figure><p>这个时候，对调用方而已，依然是熟悉的ServiceProvider，它只需要传入一个名称来获取服务即可，由此，我们就实现了基于名称的依赖注入。回顾一下它的实现过程，其实是一个逐步推进的过程，我们使用依赖注入，本来是希望依赖抽象，即针对同一个接口，可以无痛地从一种实现切换到另外一种实现。可我们发现，当这些实现同时被注册到容器里的时候，容器一样会迷惑于到底用哪一种实现，这就让我们开始思考，这种基于字典的IoC容器设计方案是否存在缺陷。所以，在.NET Core里的DI设计中还引入了工厂的概念，因为并不是所以的Resolve<T>都可以通过<code>Activator.Create</code>来实现，更不必说Autofac和Castle中还有子容器的概念，只能说人生不同的阶段总会有不同的理解吧！好了，这篇博客就先写到这里，欢迎大家给我留言，晚安！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="DI" scheme="https://qinyuanpei.github.io/tags/DI/"/>
    
      <category term="依赖注入" scheme="https://qinyuanpei.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript实现Hexo博客推荐功能</title>
    <link href="https://qinyuanpei.github.io/posts/478946932/"/>
    <id>https://qinyuanpei.github.io/posts/478946932/</id>
    <published>2020-06-08T12:30:54.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>有时候，我不禁在想，我们到底处在一个什么样的时代呢？而之所以会有这样的疑问，则是因为我们的习惯在不断地被这个时代向前推进，就像我用了两年多的魅蓝Note6屏幕出现了问题，扫视了一圈新手机，居然再找不出一款带实体键的手机，刘海屏、水滴屏、破孔屏、异形屏、曲面屏等等简直令人眼花缭乱，唯独没有一款让我感到熟悉的非全面屏手机。做软件的时候，会不明白那些似是而非的定制需求的差异，可为什么偏偏到了硬件的时候，大家就能被迫适应这些越来越同质化的东西呢？也许有和我一样怀念非全面屏的人，可对于这个时代而言，一切都好像无足轻重，喜欢魅族对产品的设计，喜欢小而美的不妥协，可当大家都越来越相似的时候，<code>也许，是因为我们终于都长大了吧，而怀念则是一种可有可无、甚至有一点多余的东西</code>。在被告知一切向前看的路上，我们能拥有、用留住的东西本就不多，可偏偏我们就在给世间一切东西，努力地刻上时间的温度，经历着花繁叶茂，经历着落叶归根。</p><p>写博客，曾经是件很有意思的事情，透过网页去读每条留言背后的人，常常令你产生神交已久的感觉，即便网络如此发达的今天，让一个人失散，无非是动动手指拉黑、删除。<code>陈星汉</code>先生有一款游戏作品叫做<code>《风之旅人》</code>，游戏里的玩家依靠某种微弱的信号相互联系，而一旦失散彼此，将永远迷失在浩瀚无际的沙海里，你说，这是不是有人生本身的意味在里面呢？再后来140个字符的微博开始流行，而这些沉迷在博客时代里的人们，或固执地继续在博客这一方天地里挥洒，或搭乘移动互联网的“高铁”通往新的彼岸。有人这样比喻朋友圈和微博，说朋友圈装饰别人梦境的月亮，而微博则是装饰自己梦境的镜子。其实呢，在隐私问题基本荡然无存的今天，我们都只是在装饰资本的“窗户”吧！</p><p>曾经运营过一段时间的微信公众号，最后发觉还是博客的载体更适合自己，虽然这些年没少为博客投入“钱财”，在博客时代一去不复返的时间禁锢里，通过博客来盈利的想法堪堪聊以自慰，更不必说后来流行起来的“在线教育”和Vlog。有人说，靠工资是没有办法挣到钱的，挣钱要靠这些“睡后收入”，可当一件事物风头正盛的时候，彼时的你不足以追逐这一切的时候，这种感觉该如何言明呢？大概就像你在最落魄的时候，遇到一生中最想要保护的那个人一样，这听起来多少有点讽刺，人在不成熟的时候，总是后知后觉，可有一天真成熟了，再难有那时的运气或是豪气。所以呢，继续写下去吧，也许有一天，当你看着从前写的幼稚的文字，或哭或笑皆可入题，这不就是“嬉笑怒骂，皆成文章”了吗？</p><p>果然，一不小心又扯远了。虽然说博客平时没什么流量，可像搜索引擎优化(<code>SEO</code>)、前端构建(<code>CI/CD</code>)、<code>PWA</code>等等这些东西倒是有所钻研，提高博客访问量的方式除了增加搜索引擎里的权重和曝光率以外，其实，还有一种方式就是减少跳出时间。换句话说，访客在你博客里停留的时间越长，这意味着你有更多的内容可以被对方访问到，所以，增加内链是一个不错的思路。最直接的方式，就是在每篇博客结束以后推荐相关的博客供访客继续阅读。之前曾经尝试过像 <a href="https://github.com/huiwang/hexo-recommended-posts" target="_blank" rel="noopener">hexo-recommended-posts</a> 这样的插件，坦白说效果不是特别好，因为有时候加载这些站外的内容，导致博客页面打开的时候异常卡顿，所以，我们今天将采用原生的JavaScript来为Hexo实现博客推理功能，希望对大家有所启发。</p><p>首先，我们来说说原理，推荐系统一般是需要一部分量化的指标来表征不同内容的相关性的。譬如通过<code>TF-IDF</code>来计算文本的相似度，通过公共词袋中的词频构造向量再配合余弦公式来计算，通过<code>TextRank</code>这类借鉴<code>PageRank</code>思想的方法来计算等等。这里呢，我们不采用这些方法来实现，主要是考虑到200篇左右的博客，两两计算相似度特别耗费时间，对于Hexo这种静态博客而言，我们还是应该节省生成静态页面的时间，虽然这部分时间都是<code>Travis CI</code>去跑的(逃……。我们采用的方案是基于标签和日期的推荐方式，即根据当前文章的标签筛选相同标签的文章，根据当前文章的日期筛选相同日期的文章。有了这两种策略，配合Hexo中提供的全局变量，我们可以很容易地编写出下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = a.length; i; i--) &#123;</span><br><span class="line">            <span class="keyword">let</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * i);</span><br><span class="line">            [a[i - <span class="number">1</span>], a[j]] = [a[j], a[i - <span class="number">1</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recommended_posts</span>(<span class="params">page, site, limit = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">        page.tags = page.tags || []</span><br><span class="line">        <span class="keyword">if</span> (page.tags.length == <span class="number">0</span>) <span class="keyword">return</span> [];</span><br><span class="line">        <span class="keyword">let</span> pageTags = page.tags.map(<span class="function"><span class="params">x</span>=&gt;</span>x.name);</span><br><span class="line">        <span class="keyword">let</span> sitePosts = site.posts.toArray().map(<span class="function"><span class="params">x</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">tags</span>:x.tags.toArray().map(<span class="function"><span class="params">y</span>=&gt;</span>y.name), <span class="attr">title</span>:x.title, <span class="attr">permalink</span>:x.permalink, <span class="attr">date</span>:x.date&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> relatedPosts = pageTags.map(<span class="function"><span class="params">x</span>=&gt;</span>sitePosts.filter(<span class="function"><span class="params">y</span>=&gt;</span>y.title != page.title  &amp;&amp; <span class="function">(<span class="params">y.tags.indexOf(x</span>) != -1 || <span class="params">y</span>.<span class="params">date</span>.<span class="params">format</span>(<span class="params"><span class="string">'MM/DD'</span></span>) == <span class="params">page</span>.<span class="params">date</span>.<span class="params">format</span>(<span class="params"><span class="string">'MM/DD'</span></span>)))).<span class="params">reduce</span>(<span class="params">(prev,next</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> prev.concat(next);</span><br><span class="line">        &#125;,[]);</span><br><span class="line">        <span class="keyword">return</span> shuffle(<span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(relatedPosts))).slice(<span class="number">0</span>, limit);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;% <span class="keyword">var</span> post_list = recommended_posts(page, site, config.recommended_posts.limit) %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(post_list.length &gt; <span class="number">0</span> &amp;&amp; config.recommended_posts.enable) &#123; %&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"recommended_posts"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= config.recommended_posts.title %&gt;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;% post_list.forEach(function(link) &#123; %&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;a href="&lt;%= link.permalink %&gt;"&gt;&lt;%= link.title %&gt;&lt;/</span>a&gt;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;% &#125;) %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>代码非常直白，按照标签和日期两种策略筛选出文章，打乱顺序后从中提取出若干个返回，而剩下的工作，就是将其渲染到页面中。在这里，博主单独定义了一个模板文件，所以，我们在博客的适当位置引入即可，博主是放在博客结束以后的位置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-content"</span> <span class="attr">id</span>=<span class="string">"post-content"</span> <span class="attr">itemprop</span>=<span class="string">"postContent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">recommended_posts</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终实现的效果如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2020/06/16/NibBjJ.png" alt="本文实现的相关文章推荐功能" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">本文实现的相关文章推荐功能</div>            </figure><p>当然，当你看到这篇博客的时候，你已经看到博主为你推荐的内容了，是否有兴趣继续读下去呢？如果这样的话，就说明这两个内容是相关的。而基于日期的推荐，即所谓的“去年今日”，它本身的相关性可能并不强，但可以让你产生一种强烈的对比感，原来，这一天我是这样度过的啊。好了，这就是这篇博客的内容啦，晚安～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/styles/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/scripts/APlayer.min
      
    
    </summary>
    
      <category term="独立博客" scheme="https://qinyuanpei.github.io/categories/%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="插件" scheme="https://qinyuanpei.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Hexo" scheme="https://qinyuanpei.github.io/tags/Hexo/"/>
    
      <category term="推荐" scheme="https://qinyuanpei.github.io/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Dynamic Linq构建动态Lambda表达式</title>
    <link href="https://qinyuanpei.github.io/posts/118272597/"/>
    <id>https://qinyuanpei.github.io/posts/118272597/</id>
    <published>2020-05-08T12:27:11.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>相信大家都有这样一种感觉，<code>Linq</code>和<code>Lambda</code>是.NET中一以贯之的存在，从最早的Linq to Object到Linq to SQL，再到EF/EF Core甚至如今的.NET Core，我们可以看到<code>Lambda</code>表达式的身影出现地越来越频繁。虽然Linq to Object和Linq to SQL，分别是以<code>IEnumerable&lt;T&gt;</code>和<code>IQueryable &lt;T&gt;</code>为基础来实现的。我个人以为，<code>Lambda</code>呢，其实就是匿名委托的“变种”，而<code>Linq</code>则是对<code>Lambda</code>的进一步封装。在<code>System.Linq.Expressions</code>命名空间下，提供大量关于表达式树的API，而我们都知道，这些表达式树最终都会被编译为委托。所以，动态创建Lambda表达式，实际上就是指从一个字符串生成对应委托的过程，而一旦这个委托被生成，可以直接传递给Where()方法作为参数，显然，它可以对源数据进行过滤，这正是我们想要的结果。</p><h1 id="事出有因"><a href="#事出有因" class="headerlink" title="事出有因"></a>事出有因</h1><p>在今天这篇博客中，我们主要介绍<code>System.Linq.Dynamic.Core</code>这个库，即我所说的Dynamic Linq。本着“艺术源于生活的态度”，在介绍它的用法之前，不妨随博主一起看看，一个“简单“的查询是如何随着业务演进而变得越来越复杂。从某种意义上来说，正是它让博主想起了Dynamic Linq。我们为客户编写了一个生成订单的接口，它从一张数据表中“消费”订单数据。最开始，它只需要过滤状态为“未处理”的记录，对应的CRUD可以表示为这样：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> orderInfos = repository.GetByQuery&lt;tt_wg_order&gt;(x =&gt; x.STATUS == <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>后来，因为业务方存在重复/错误下单的情况，业务数据有了“软删除”的状态，相应地查询条件再次发生变化，这看起来还行对吧：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> orderInfos = repository.GetByQuery&lt;tt_wg_order&gt;(x =&gt; x.STATUS == <span class="number">10</span> &amp;&amp; x.Isdelete == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>再后来，因为接口处理速度不理想，无法满足客户的使用场景，公司大佬们建议“加机器”，而为了让每台服务器上消费的订单数据不同(据说是为了避免发生并发)，大佬们要求博主开放所有字段作为查询条件，这样，每台服务器上可以配置不同查询条件。自此，又双叒叕改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> repository = container.Resolve&lt;CrudRepositoryBase&gt;();</span><br><span class="line"><span class="keyword">var</span> searchParameters = <span class="keyword">new</span> SearchParameters() &#123; PageInfo = <span class="keyword">new</span> PageInfo() &#123; PageSize = parameters.PAGE_SIZE.Value &#125;&#125;;</span><br><span class="line">searchParameters.QueryModel.Items.Add(<span class="keyword">new</span> ConditionItem &#123; Field = <span class="string">"STATUS"</span>, Method = QueryMethod.Equal, Value = <span class="number">10</span> &#125;);</span><br><span class="line">searchParameters.QueryModel.Items.Add(<span class="keyword">new</span> ConditionItem &#123; Field = <span class="string">"Isdelete"</span>, Method = QueryMethod.Equal, Value = <span class="number">0</span> &#125;);</span><br><span class="line"><span class="comment">//此处省略更多的查询条件:)</span></span><br><span class="line"><span class="keyword">var</span> orderInfos = repository.GetByPage&lt;tt_wg_order&gt;(searchParameters);</span><br></pre></td></tr></table></figure><p>可以想象得出，终极终终极的查询会变成下面这张图。这种方式看起来很美好对不对？可谁能想到，就在五一放假前的某一天里，博主还在替某个“刁钻”客户排查一组同样“刁钻”的过滤条件为什么没有生效。显然，我需要有一种更友好的方式，它可以从一个字符串变成一个委托，就像JavaScript里”邪恶”的Eval()函数一样，说它邪恶，是因为它的输入是不可控的，”机智”的人类习惯把事件万物都当成SQL语句，其实，RESTful接口里传SQL、调存储过程难道不可以吗？同样，是因为这种做法太”邪恶”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/05/11/QEDHwA9bZUTInJY.png" alt="过滤条件在风中凌乱]" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">过滤条件在风中凌乱]</div>            </figure><h1 id="ParseLambda"><a href="#ParseLambda" class="headerlink" title="ParseLambda"></a>ParseLambda</h1><p>首先，通过<code>nuget</code>安装：<code>System.Linq.Dynamic.Core</code>。这里主要介绍的是介绍的是其中的ParseLambda()方法，顾名思义，它可以把一个字符串转换为指定类型的委托，一起来看下面的例子。首先，我们定义一个通用方法BuildLambda<T>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;T, <span class="keyword">bool</span>&gt; BuildLambda&lt;T&gt;(<span class="keyword">string</span> exps)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> sourceType = <span class="keyword">typeof</span>(T);</span><br><span class="line">  <span class="keyword">var</span> sourceParameter = Expression.Parameter(sourceType);</span><br><span class="line">  <span class="keyword">var</span> lambdaExps = DynamicExpressionParser.ParseLambda(</span><br><span class="line">    <span class="keyword">new</span>[] &#123; sourceParameter &#125;, </span><br><span class="line">    <span class="keyword">typeof</span>(<span class="keyword">bool</span>), </span><br><span class="line">    exps</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> lambdaExps.Compile() <span class="keyword">as</span> Func&lt;T, <span class="keyword">bool</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> students = <span class="keyword">new</span> List&lt;Student&gt;()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">new</span> Student() &#123; </span><br><span class="line">    Name = <span class="string">"长安书小妆"</span>, Age = <span class="number">25</span>, Address = <span class="string">"洛阳市洛龙区"</span>, </span><br><span class="line">    Teacher = <span class="keyword">new</span> Teacher() &#123; Name = <span class="string">"孔子"</span> &#125; &#125;,</span><br><span class="line">  <span class="keyword">new</span> Student() &#123; </span><br><span class="line">    Name = <span class="string">"飞鸿踏雪"</span>, Age = <span class="number">28</span>, Address = <span class="string">"宁夏中卫市"</span>, </span><br><span class="line">    Teacher = <span class="keyword">new</span> Teacher() &#123; Name = <span class="string">"孔子"</span> &#125; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exps = <span class="string">"Age&lt;=25 &amp;&amp; Address.Contains(\"洛阳市\") &amp;&amp; Teacher.Name=\"孟子\""</span>;</span><br><span class="line"><span class="keyword">var</span> lambda = BuildLambda&lt;Student&gt;(exps);</span><br><span class="line"><span class="keyword">var</span> results = students.Where(lambda);</span><br></pre></td></tr></table></figure><p>注意到，核心的代码其实只有<code>DynamicExpressionParser.ParseLambda()</code>这一句，这充分暴露了博主“调包侠”的本质。按照示例代码中的过滤条件，我们知道给定数据中是没有符合条件的数据的。假如你真的运行了这段代码，你就会得到真正的结果：我说的是对的(逃</p><h1 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h1><p>其实，我们今天所说这一切，从本质上来讲，还是属于表达式树的范畴，因为上面的例子，我们同样可以使用表达式树来编写，无非是这个第三方库帮我们隐藏了这部分细节。对于上面这个例子，如果用表达式树来写，会是什么样子的呢？相信熟悉表达式树的朋友，可以非常容易地写出下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x</span></span><br><span class="line"><span class="keyword">var</span> parameter = Expression.Parameter(<span class="keyword">typeof</span>(tt_wg_order), <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">//x.STATUS == 10</span></span><br><span class="line"><span class="keyword">var</span> condStatus = Expression.Equal(Expression.Property(parameter, <span class="string">"STATUS"</span>), Expression.Constant(<span class="number">10</span>));</span><br><span class="line"><span class="comment">//x.Isdelete == 0</span></span><br><span class="line"><span class="keyword">var</span> condIsDelete = Expression.Equal(Expression.Property(parameter, <span class="string">"Isdelete"</span>), Expression.Constant(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//x.STATUS == 10 &amp;&amp; x.Isdelete == 0</span></span><br><span class="line"><span class="keyword">var</span> condAndAlso = Expression.AndAlso(condStatus, condIsDelete);</span><br><span class="line"><span class="comment">//x =&gt; x.STATUS == 10 &amp;&amp; x.Isdelete == 0</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;tt_wg_order,<span class="keyword">bool</span>&gt;&gt;(condAndAlso, parameter);</span><br></pre></td></tr></table></figure><p>我们可以注意到，一个Lmabda表达式，可以抽象为:参数(<code>Parameter</code>)和函数体(<code>Body</code>)两部分，而<code>Body</code>实际上是由一个<code>操作符</code>和一个<code>值</code>组成。譬如这里的第一个条件：<code>x.STATUS == 10</code>。在这里基础上，我们可以定义一个类型：SearchParameters，它将每个条件抽象为字段(Field)、查询方法(QueryMethod)、值(Value)和或分组(OrGroup)。所以，它的处理逻辑就是，将相同OrGroup的条件放在一起用Or连接，然后再和其它条件放在一起用And连接。故而，它可以通过表达式构造出一个Predict<T>类型的委托，而我们的数据持久层是使用EF来实现的，所以，它可以顺利成章地和IQueryable<T>搭配使用，这就是我们这个SearchParameters的实现原理，它唯一让我觉得不好的地方是，字段(Field)不能通过一个Lambda表达式去构造，而必须传入一个字符串，这给了使用者写错字段名称的机会(逃：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LambdaExpressionBuilder</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Expression <span class="title">GetExpression</span> (<span class="params">ParameterExpression parameter, Condition condition</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> propertyParam = Expression.Property (parameter, condition.Field);</span><br><span class="line">        <span class="keyword">var</span> propertyInfo = propertyParam.Member <span class="keyword">as</span> PropertyInfo;</span><br><span class="line">        <span class="keyword">if</span> (propertyInfo == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException (<span class="string">$"Invalid field \"<span class="subst">&#123;condition.Field&#125;</span>\""</span>);</span><br><span class="line">        <span class="keyword">var</span> realPropertyType = Nullable.GetUnderlyingType (propertyInfo.PropertyType) ?? propertyInfo.PropertyType;</span><br><span class="line">        <span class="keyword">if</span> (condition.Op != Operation.StdIn &amp;&amp; condition.Op != Operation.StdNotIn)</span><br><span class="line">            condition.Value = Convert.ChangeType (condition.Value, realPropertyType);</span><br><span class="line">        <span class="keyword">var</span> constantParam = Expression.Constant (condition.Value);</span><br><span class="line">        <span class="keyword">switch</span> (condition.Op) &#123;</span><br><span class="line">            <span class="keyword">case</span> Operation.Equals:</span><br><span class="line">                <span class="keyword">return</span> Expression.Equal (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.NotEquals:</span><br><span class="line">                <span class="keyword">return</span> Expression.NotEqual (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.Contains:</span><br><span class="line">                <span class="keyword">return</span> Expression.Call (propertyParam, <span class="string">"Contains"</span>, <span class="literal">null</span>, constantParam);;</span><br><span class="line">            <span class="keyword">case</span> Operation.NotContains:</span><br><span class="line">                <span class="keyword">return</span> Expression.Not (Expression.Call (propertyParam, <span class="string">"Contains"</span>, <span class="literal">null</span>, constantParam));</span><br><span class="line">            <span class="keyword">case</span> Operation.StartsWith:</span><br><span class="line">                <span class="keyword">return</span> Expression.Call (propertyParam, <span class="string">"StartsWith"</span>, <span class="literal">null</span>, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.EndsWith:</span><br><span class="line">                <span class="keyword">return</span> Expression.Call (propertyParam, <span class="string">"EndsWith"</span>, <span class="literal">null</span>, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.GreaterThen:</span><br><span class="line">                <span class="keyword">return</span> Expression.GreaterThan (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.GreaterThenOrEquals:</span><br><span class="line">                <span class="keyword">return</span> Expression.GreaterThanOrEqual (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.LessThan:</span><br><span class="line">                <span class="keyword">return</span> Expression.LessThan (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.LessThanOrEquals:</span><br><span class="line">                <span class="keyword">return</span> Expression.LessThanOrEqual (propertyParam, constantParam);</span><br><span class="line">            <span class="keyword">case</span> Operation.StdIn:</span><br><span class="line">                <span class="keyword">return</span> Expression.Call (<span class="keyword">typeof</span> (Enumerable), <span class="string">"Contains"</span>, <span class="keyword">new</span> Type[] &#123; realPropertyType &#125;, <span class="keyword">new</span> Expression[] &#123; constantParam, propertyParam &#125;);</span><br><span class="line">            <span class="keyword">case</span> Operation.StdNotIn:</span><br><span class="line">                <span class="keyword">return</span> Expression.Not (Expression.Call (<span class="keyword">typeof</span> (Enumerable), <span class="string">"Contains"</span>, <span class="keyword">new</span> Type[] &#123; realPropertyType &#125;, <span class="keyword">new</span> Expression[] &#123; constantParam, propertyParam &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Expression <span class="title">GetGroupExpression</span> (<span class="params">ParameterExpression parameter, List&lt;Condition&gt; orConditions</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (orConditions.Count == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> exps = orConditions.Select (c =&gt; GetExpression (parameter, c)).ToList ();</span><br><span class="line">        <span class="keyword">return</span> exps.Aggregate&lt;Expression, Expression&gt; (<span class="literal">null</span>, (left, right) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            <span class="keyword">return</span> Expression.OrElse (left, right);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Expression&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; BuildLambda&lt;T&gt; (IEnumerable&lt;Condition&gt; conditions) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (conditions == <span class="literal">null</span> || !conditions.Any ()) <span class="keyword">return</span> x =&gt; <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">var</span> parameter = Expression.Parameter (<span class="keyword">typeof</span> (T), <span class="string">"x"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单条件</span></span><br><span class="line">        <span class="keyword">var</span> simpleExps = conditions.ToList ().FindAll (c =&gt; <span class="keyword">string</span>.IsNullOrEmpty (c.OrGroup))</span><br><span class="line">            .Select (c =&gt; GetExpression (parameter, c))</span><br><span class="line">            .ToList ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复杂条件</span></span><br><span class="line">        <span class="keyword">var</span> complexExps = conditions.ToList ().FindAll (c =&gt; !<span class="keyword">string</span>.IsNullOrEmpty (c.OrGroup))</span><br><span class="line">            .GroupBy (x =&gt; x.OrGroup)</span><br><span class="line">            .Select (g =&gt; GetGroupExpression (parameter, g.ToList ()))</span><br><span class="line">            .ToList ();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> exp = simpleExps.Concat (complexExps).Aggregate&lt;Expression, Expression&gt; (<span class="literal">null</span>, (left, right) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (left == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> right;</span><br><span class="line">                <span class="keyword">return</span> Expression.AndAlso (left, right);</span><br><span class="line">            &#125;);;</span><br><span class="line">        <span class="keyword">return</span> Expression.Lambda&lt;Func&lt;T, <span class="keyword">bool</span>&gt;&gt; (exp, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以以一种优雅的方式来对编写查询条件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchParameters = <span class="keyword">new</span> SearchParameters();</span><br><span class="line">searchParameters.Query = <span class="keyword">new</span> QueryModel();</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition() &#123; Field = <span class="string">"IntValue"</span>, Op = Operation.LessThan, Value = <span class="number">30</span> &#125;);</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition() &#123; Field = <span class="string">"StringValue"</span>, Op = Operation.Contains, Value = <span class="string">"山"</span>, OrGroup = <span class="string">"StringValue"</span> &#125;);</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition&lt;Foo&gt;() &#123; Field = x =&gt; x.StringValue, Op = Operation.Contains, Value = <span class="string">"有朋"</span>, OrGroup = <span class="string">"StringValue"</span> &#125;);</span><br><span class="line"><span class="keyword">var</span> lambda = LambdaExpressionBuilder.BuildLambda&lt;Foo&gt;(searchParameters.Query);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">where</span> = lambda.Compile();</span><br><span class="line"><span class="keyword">var</span> result = list.Where(<span class="keyword">where</span>);</span><br></pre></td></tr></table></figure><p>这种实现可以说相当巧妙啦，因为通过有限的条件，我们就可以覆盖到大部分查询的场景，而如果直接去解析一个Lambda表达式，难度显然会增加不少。这里是以一个普通的泛型列表作为示例的，而在实际使用中，常常是结合EntityFramework这类ORM来使用的。相应地，我们只需要为IQueryable接口扩展出支持SearchParameter作为参数进行查询地扩展方法即可，这分别对应了我们在文章一开头所提到的<code>IEnumerable&lt;T&gt;</code>和<code>IQueryable &lt;T&gt;</code>。</p><p>可如果遇上Dapper这样的轻量级ORM，我们要考虑的问题就变成了怎么通过Lambda表达式生成SQL语句，所以，通过Dapper来扩展功能的时候，最困难的地方，往往在于没法儿像EF/EF Core一样去随心所欲地Where()，像Dapper.Contrib则只能先查询出所有结果再去做进一步的过滤，这种在数据量特别大的时候就会出问题。通过Lambda生成SQL，最难的地方是，你压根不知道，人家会写一个什么样的表达式，而这个表达式，又怎么通过SQL去表达。那么，退而求其次，我们继续用SearchParameters来实现，因为它里面的QueryMethod是有限的，下面给出一个简单的实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SearchParametersExtension</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">static</span> (<span class="params"><span class="keyword">string</span>, Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt;</span>) <span class="title">BuildSqlWhere</span> (<span class="params"><span class="keyword">this</span> SearchParameters searchParameters</span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> conditions = searchParameters.Query;</span><br><span class="line">        <span class="keyword">if</span> (conditions == <span class="literal">null</span> || !conditions.Any ())</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">string</span>.Empty, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sqlExps = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; ();</span><br><span class="line">        <span class="keyword">var</span> sqlParam = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建简单条件</span></span><br><span class="line">        <span class="keyword">var</span> simpleConditions = conditions.FindAll (x =&gt; <span class="keyword">string</span>.IsNullOrEmpty (x.OrGroup));</span><br><span class="line">        sqlExps.Add (simpleConditions.BuildSqlWhere (<span class="keyword">ref</span> sqlParam));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建复杂条件</span></span><br><span class="line">        <span class="keyword">var</span> complexConditions = conditions.FindAll (x =&gt; !<span class="keyword">string</span>.IsNullOrEmpty (x.OrGroup));</span><br><span class="line">        sqlExps.AddRange (complexConditions.GroupBy (x =&gt; x.OrGroup).ToList ().Select (x =&gt; <span class="string">"( "</span> + x.BuildSqlWhere (<span class="keyword">ref</span> sqlParam, <span class="string">" OR "</span>) + <span class="string">" )"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sqlWhwere = sqlExps.Count &gt; <span class="number">1</span> ? <span class="keyword">string</span>.Join (<span class="string">" AND "</span>, sqlExps) : sqlExps[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">$" WHERE <span class="subst">&#123;sqlWhwere&#125;</span> "</span>, sqlParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">BuildSqlWhere</span> (<span class="params"><span class="keyword">this</span> IEnumerable&lt;Condition&gt; conditions, <span class="keyword">ref</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">object</span>&gt; sqlParams, <span class="keyword">string</span> keywords = <span class="string">" AND "</span></span>) </span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (conditions == <span class="literal">null</span> || !conditions.Any ())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sqlParamIndex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> sqlExps = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; ();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> condition <span class="keyword">in</span> conditions) &#123;</span><br><span class="line">            <span class="keyword">var</span> index = sqlParams.Count + sqlParamIndex;</span><br><span class="line">            <span class="keyword">switch</span> (condition.Op) &#123;</span><br><span class="line">                <span class="keyword">case</span> Operation.Equals:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> = @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = condition.Value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.NotEquals:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> &lt;&gt; @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = condition.Value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.Contains:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> LIKE @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"%<span class="subst">&#123;condition.Value&#125;</span>%"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.NotContains:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> NOT LIKE @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"%<span class="subst">&#123;condition.Value&#125;</span>%"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.StartsWith:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> LIKE @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"%<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.EndsWith:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> LIKE @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>%"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.GreaterThen:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> &gt; @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.GreaterThenOrEquals:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> &gt;= @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.LessThan:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> &lt; @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.LessThanOrEquals:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> &lt;= @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.StdIn:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> IN @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Operation.StdNotIn:</span><br><span class="line">                    sqlExps.Add (<span class="string">$"<span class="subst">&#123;condition.Field&#125;</span> NOT IN @Param<span class="subst">&#123;index&#125;</span>"</span>);</span><br><span class="line">                    sqlParams[<span class="string">$"Param<span class="subst">&#123;index&#125;</span>"</span>] = <span class="string">$"<span class="subst">&#123;condition.Value&#125;</span>"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sqlParamIndex += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlExps.Count &gt; <span class="number">1</span> ? <span class="keyword">string</span>.Join (keywords, sqlExps) : sqlExps[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以换一种方式来查Dapper，果然是因为手写SQL没有安全感的缘故啊！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchParameters = <span class="keyword">new</span> SearchParameters();</span><br><span class="line">searchParameters.Page = <span class="keyword">new</span> PageModel() &#123; PageSize = <span class="number">10</span>, CurrentPage = <span class="number">1</span> &#125;;</span><br><span class="line">searchParameters.Query = <span class="keyword">new</span> QueryModel();</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition() &#123; Field = <span class="string">"OrgCode"</span>, Op = Operation.Contains, Value = <span class="string">"飞天御剑流"</span>, OrGroup = <span class="string">"OrgCode"</span> &#125;);</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition() &#123; Field = <span class="string">"OrgCode"</span>, Op = Operation.Equals, Value = <span class="string">"新选组"</span>, OrGroup = <span class="string">"OrgCode"</span> &#125;);</span><br><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition() &#123; Field = <span class="string">"CreatedAt"</span>, Op = Operation.GreaterThenOrEquals, Value = <span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">1</span>)&#125;);</span><br><span class="line">_repository.GetByQuery&lt;BusinessUnit&gt;(searchParameters);</span><br></pre></td></tr></table></figure><p>对于定义<code>Condition</code>时，<code>Field</code>属性安全感缺失的问题，我们可以这样来解决：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Condition&lt;T&gt; : Condition</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">new</span> Expression&lt;Func&lt;T, <span class="keyword">dynamic</span>&gt;&gt; Field &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> Operation Op &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">object</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> OrGroup &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class QueryModel : List&lt;Condition&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Add&lt;T&gt;(Condition&lt;T&gt; condition) <span class="keyword">where</span> T : <span class="keyword">class</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> filedName = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">var</span> memberExp = condition.Field.Body <span class="keyword">as</span> MemberExpression;</span><br><span class="line">    <span class="keyword">if</span> (memberExp == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> ubody = (UnaryExpression)condition.Field.Body;</span><br><span class="line">      memberExp = ubody.Operand <span class="keyword">as</span> MemberExpression;</span><br><span class="line">    &#125;</span><br><span class="line">    filedName = memberExp.Member.Name;</span><br><span class="line">    Add(<span class="keyword">new</span> Condition() &#123; Field = filedName, Op = condition.Op, Value = condition.Value, OrGroup = condition.OrGroup &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实，这还是表达式树的内容，在上面的代码片段中，早已出现过它的身影，回想起多年前用这个东西改造INotifyPropertyChanged的时候，总觉得一切似曾相识：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchParameters.Query.Add(<span class="keyword">new</span> Condition&lt;Foo&gt;() &#123; Field = x =&gt; x.StringValue, Op = Operation.Contains, Value = <span class="string">"有朋"</span>, OrGroup = <span class="string">"StringValue"</span> &#125;);</span><br></pre></td></tr></table></figure><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>和博主的大多数博客一样，这篇博客是一个“醉翁之意不在酒”的博客。听起来在说如何动态创建Lambda表达式，实际上讲的还是表达式树，至于原因，则还是博客开篇所提到的“一以贯之”。博主想写这篇博客，是源于实际工作中遇到的“查询”问题，而最后解决的还真就是查询的问题。不管是Dynamic Linq中的ParseLambda()还是表达式树中的LambdaExpression，本质上都是同一个东西，最终的命运都是Predict<T>这个委托。SearchParameters则是对前者的一种简化，通过控制Lambda表达式的复杂度来简化问题，相比起直接传一个字符串过来，这种在风险的控制上要更高一点，之所以要传字符串，则是又一个非关技术的无聊的问题了，用Jira里的概念说应该叫做设计如此(By Design)。好了，以上就是这篇博客的内容啦，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      var propertyParam = Expression.Property (parameter, condition.Field);searchParameters.Query.Add(new Condition() { Field = &quot;StringValue&quot;, Op = Operation.Contains, Value = &quot;山&quot;, OrGroup = &quot;StringValue&quot; });searchParameters.Query.Add(new Condition&lt;Foo&gt;() { Field = x =&gt; x.StringValue, Op = Operation.Contains, Value = &quot;有朋&quot;, OrGroup = &quot;StringValue&quot; })
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Linq" scheme="https://qinyuanpei.github.io/tags/Linq/"/>
    
      <category term="Lambda" scheme="https://qinyuanpei.github.io/tags/Lambda/"/>
    
      <category term="表达式树" scheme="https://qinyuanpei.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>通过EF/Dapper扩展实现数据库审计功能</title>
    <link href="https://qinyuanpei.github.io/posts/1289244227/"/>
    <id>https://qinyuanpei.github.io/posts/1289244227/</id>
    <published>2020-04-24T08:20:32.000Z</published>
    <updated>2020-07-10T02:33:20.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>相信大家都有过周末被电话“吵醒”的经历，这个时候，客服同事会火急火燎地告诉你，客户反馈生产环境上某某数据“异常”，然后你花费大量时间去排查这些错误数据，发现这是客户使用某一种“骚”操作搞出来的“人祸”。可更多的时候，你不会这么顺利，因为你缺乏有力的证据去支持你的结论。最终，你不情愿地去处理了这些错误数据。你开始反思，为什么没有一种流程去记录客户对数据的变更呢？为什么你总要花时间去和客户解释这些数据产生的原因呢？好了，这就要说到我们今天这篇博客的主题——审计。</p><h1 id="什么是审计？"><a href="#什么是审计？" class="headerlink" title="什么是审计？"></a>什么是审计？</h1><p>结合本文引言中的描述的场景，当我们需要知道某条数据被什么人修改过的时候，或者是希望在数据变更的时候去通知某个人，亦或者是我们需要追溯一条数据的变更历史的时候，我们需要一种机制去记录数据表中的数据变更，这就是所谓的审计。而实际的业务中，可能会有类似，查询某一个员工一天内审批了多少单据的需求。你不要笑，人类常常如此无聊，就像我们有一个异常复杂的计费逻辑，虽然审计日志里记录了某个费用是怎么计算出来的，可花时间最多的地方，无一例外是需要开发去排查和解释的，对于这一点，我时常感觉疲于应对，这是我这篇文章里想要写审计的一个重要原因。</p><h1 id="EF-EF-Core实体跟踪"><a href="#EF-EF-Core实体跟踪" class="headerlink" title="EF/EF Core实体跟踪"></a>EF/EF Core实体跟踪</h1><p>EF和EF Core里都提供了实体跟踪的功能，我的领导经常吐槽我，在操作数据库的时候，喜欢显式地调用<code>repository.Update()</code>方法，因为他觉得项目中的实体跟踪是默认打开的。可当你学习了<code>Vue</code>以后，你了解到<code>Vue</code>中是检测不到数组的某些变化的，所以，这个事情我持保留意见，显式调用就显式调用呗，万一哪天人家把实体跟踪给关闭了呢？不过，话说回来，实体跟踪确实可以帮我们做一点工作的，其中，就包括我们今天要说的审计功能。</p><p>EF和EF Core中的实体追踪主要指DbContext类的ChangeTracker，而通过DetachChanges()方法，则可以获得那些变化了的实体的集合。所以，使用实体追踪来实现审计功能，本质上就是在SaveChanges()方法调用前后，记录实体中每一个字段的变化情况。为此，我们考虑编写下面的类——AuditDbContextBase，顾名思义，这是一个审计相关的DbContext基类，所以，希望实现审计功能的DbContext都会继承这个类。这里，我们重写其SaveChanges()方法，其基本定义如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuditDbContextBase</span> : <span class="title">DbContext</span>, <span class="title">IAuditStorage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;AuditLog&gt; AuditLog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuditDbContextBase</span>(<span class="params">DbContextOptions options, AuditConfig auditConfig</span>) : <span class="title">base</span>(<span class="params">options</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Task <span class="title">BeforeSaveChanges</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Task <span class="title">AfterSaveChanges</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">SaveChangesAsync</span>(<span class="params"><span class="keyword">bool</span> acceptAllChangesOnSuccess,</span></span></span><br><span class="line"><span class="function"><span class="params">         CancellationToken cancellationToken = <span class="keyword">default</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">await</span> BeforeSaveChanges();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">base</span>.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);</span><br><span class="line">        <span class="keyword">await</span> AfterSaveChanges();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveAuditLogs</span>(<span class="params"><span class="keyword">params</span> AuditLog[] auditLogs</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        AuditLog.AddRange(auditLogs);</span><br><span class="line">        <span class="keyword">base</span>.SaveChangesAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，就是去实现<code>BeforeSaveChanges()</code>和<code>AfterSaveChanges()</code>两个方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BeforeSaveChanges</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Task <span class="title">BeforeSaveChanges</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ChangeTracker.DetectChanges();</span><br><span class="line">    _auditEntries = <span class="keyword">new</span> List&lt;AuditEntry&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> entityEntry <span class="keyword">in</span> ChangeTracker.Entries())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (entityEntry.State == EntityState.Detached </span><br><span class="line">            || entityEntry.State == EntityState.Unchanged)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (entityEntry.Entity.GetType() == <span class="keyword">typeof</span>(AuditLog))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (_auditConfig.EntityFilters.Any(x =&gt; x(entityEntry)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> auditEntry = <span class="keyword">new</span> AuditEntry(entityEntry, _auditConfig);</span><br><span class="line">        _auditEntries.Add(auditEntry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AfterSaveChanges</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Task <span class="title">AfterSaveChanges</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_auditEntries == <span class="literal">null</span> || !_auditEntries.Any())</span><br><span class="line">        <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line"></span><br><span class="line">    _auditEntries.ForEach(auditEntry =&gt; auditEntry.UpdateTemporaryProperties());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> auditLogs = _auditEntries.Select(x =&gt; x.AsAuditLog()).ToArray();</span><br><span class="line">    <span class="keyword">if</span> (!_auditConfig.AuditStorages.Any())</span><br><span class="line">        _auditConfig.AuditStorages.Add(<span class="keyword">this</span>);</span><br><span class="line">    _auditConfig.AuditStorages.ForEach(</span><br><span class="line">        auditStorage =&gt; auditStorage.SaveAuditLogs(auditLogs)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到，我们会在<code>SaveChanges()</code>方法执行前，通过<code>ChangeTracker.DetectChanges()</code>方法显式地捕获“变化”，这些“变化”会被存储到一个临时的列表中。而在<code>SaveChanges()</code>方法执行后，则会更新那些只有在数据提交后才可以获得的“临时”数据，最典型的例子是自增的ID，在数据提交前，我们是无法获得真正的ID的。这个列表中的内容最终会通过<code>AsAuditLog()</code>方法进行转化。下面是<code>AuditEntry</code>中的部分代码片段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SetValuesCollection</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetValuesCollection</span>(<span class="params">List&lt;PropertyEntry&gt; properties</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> property <span class="keyword">in</span> properties)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> propertyName = property.Metadata.GetColumnName();</span><br><span class="line">        <span class="keyword">if</span> (_auditConfig.PropertyFilters.Any(x =&gt; x(_entityEntry, property)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (OperationType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> OperationType.Created:</span><br><span class="line">                NewValues[propertyName] = property.CurrentValue;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OperationType.Updated:</span><br><span class="line">                <span class="keyword">if</span> (_auditConfig.IsIgnoreSameValue </span><br><span class="line">                    &amp;&amp; property.OriginalValue.ToString() == property.CurrentValue.ToString())</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                OldValues[propertyName] = property.OriginalValue;</span><br><span class="line">                NewValues[propertyName] = property.CurrentValue;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OperationType.Deleted:</span><br><span class="line">                OldValues[propertyName] = property.OriginalValue;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AsAuditLog</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuditLog <span class="title">AsAuditLog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AuditLog()</span><br><span class="line">    &#123;</span><br><span class="line">        Id = Guid.NewGuid().ToString(<span class="string">"N"</span>),</span><br><span class="line">        TableName = TableName,</span><br><span class="line">        CreatedBy = <span class="keyword">string</span>.Empty,</span><br><span class="line">        CreatedDate = DateTime.Now,</span><br><span class="line">        NewValues = NewValues.Any() ? JsonConvert.SerializeObject(NewValues) : <span class="literal">null</span>,</span><br><span class="line">        OldValues = OldValues.Any() ? JsonConvert.SerializeObject(OldValues) : <span class="literal">null</span>,</span><br><span class="line">        ExtraData = ExtraData.Any() ? JsonConvert.SerializeObject(ExtraData) : <span class="literal">null</span>,</span><br><span class="line">        OperationType = (<span class="keyword">int</span>)OperationType</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上，我们可以编写我们实际的DbContext，这里以CustomerContext为例，当我们向其中添加、修改和删除Customer的时候，就会触发审计相关的逻辑，默认情况下，审计产生的数据AuditLog和Customer在同一个数据库上下文中，当然，我们可以通过注入IAuditStore来实现更精细的控制，例如，可以将审计日志输入到文本文件，甚至是Mongodb这样的非关系型数据库里，因为有依赖注入的存在，这些实现起来会非常的简单！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入AuditLog配置</span></span><br><span class="line">services.AddAuditLog(<span class="function"><span class="params">config</span> =&gt;</span> </span><br><span class="line">    config</span><br><span class="line">    .IgnoreTable&lt;AuditLog&gt;()</span><br><span class="line">    .IgnoreProperty&lt;AuditLog&gt;(<span class="function"><span class="params">x</span> =&gt;</span> x.CreatedDate)</span><br><span class="line">    .WithExtraData(<span class="string">"Tags"</span>, <span class="string">".NET Core"</span>)</span><br><span class="line">    .WithStorage&lt;FileAuditStorage&gt;()</span><br><span class="line">    .WithStorage&lt;MongoAuditStorage&gt;()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入DbContext</span></span><br><span class="line">services.AddDbContext&lt;CustomerContext&gt;(<span class="function"><span class="params">options</span> =&gt;</span></span><br><span class="line">    options.UseSqlServer(Configuration.GetConnectionString(<span class="string">"DefaultConnection"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//像平时一样使用EF</span></span><br><span class="line"><span class="keyword">var</span> entity = _context.Customer.Where(<span class="function"><span class="params">x</span> =&gt;</span> x.Id == customer.Id).FirstOrDefault();</span><br><span class="line">entity.Name = customer.Name;</span><br><span class="line">entity.Email = customer.Email;</span><br><span class="line">entity.Address = customer.Address;</span><br><span class="line">entity.Tel = customer.Tel;</span><br><span class="line">_context.Customer.Update(entity);</span><br><span class="line"><span class="keyword">await</span> _context.SaveChangesAsync();</span><br></pre></td></tr></table></figure><p>下面是最终生成的审计日志信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/26/yefcJ1749L5TiMD.png" alt="审计日志表展示" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">审计日志表展示</div>            </figure><h1 id="Castle动态代理"><a href="#Castle动态代理" class="headerlink" title="Castle动态代理"></a>Castle动态代理</h1><p>而对于像Dapper这种轻量级的ORM，它本身没有类似EF/EF Core的ChangeTracker的设计，如果我们在项目中使用Dapper，并且希望实现审计的相关功能，直观上看就会有一点困难。其实，平时在混合使用EF/Dapper的过程中，经常遇到的问题就是，如何确保传统的ADO.NET和EF在一个数据库事务中，如何确保Dapper和EF在一个数据库事务中等等。此时，我们就需要一点抽象，首先去实现一个Dapper的仓储模式，然后再借助Castle这类动态代理库实现对接口的拦截。这里以Dapper的扩展库Dapper.Contrib为例。首先，我们定义一个仓储接口IRepository:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span>  <span class="title">IRepository</span></span><br><span class="line">&#123;</span><br><span class="line">    TEntity GetByID&lt;TEntity&gt;(<span class="keyword">object</span> id) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    TEntity GetByKeys&lt;TEntity&gt;(<span class="keyword">object</span> keys) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    TEntity QueryFirst&lt;TEntity&gt;(<span class="keyword">string</span> sql, <span class="keyword">object</span> param) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    TEntity QuerySingle&lt;TEntity&gt;(<span class="keyword">string</span> sql, <span class="keyword">object</span> param) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AuditLog(OperationType.Created)</span>]</span><br><span class="line">    <span class="keyword">void</span> Insert&lt;TEntity&gt;(<span class="keyword">params</span> TEntity[] entities) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AuditLog(OperationType.Updated)</span>]</span><br><span class="line">    <span class="keyword">void</span> Update&lt;TEntity&gt;(<span class="keyword">params</span> TEntity[] entities) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AuditLog(OperationType.Deleted)</span>]</span><br><span class="line">    <span class="keyword">void</span> Delete&lt;TEntity&gt;(<span class="keyword">params</span> TEntity[] entities) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> Delete&lt;TEntity&gt;(<span class="keyword">params</span> <span class="keyword">object</span>[] ids) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    IEnumerable&lt;TEntity&gt; GetByQuery&lt;TEntity&gt;(Expression&lt;Func&lt;TEntity,<span class="keyword">bool</span>&gt;&gt; exps) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    IEnumerable&lt;TEntity&gt; GetByQuery&lt;TEntity&gt;(<span class="keyword">string</span> sql, <span class="keyword">object</span> param) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">    IEnumerable&lt;TEntity&gt; GetAll&lt;TEntity&gt;() <span class="keyword">where</span> TEntity : <span class="keyword">class</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以在拦截器中实现数据审计功能，因为Dapper本身没有ChangeTracker，所以，我们必须要在先从数据库中查出来OldValue，所以，实际效率应该并不会特别高，这里权当做为大家扩展思路吧！</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuditLogInterceptor</span> : <span class="title">IInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> repository = invocation.Proxy <span class="keyword">as</span> IRepository;</span><br><span class="line">        <span class="keyword">var</span> entityType = GetEntityType(invocation);</span><br><span class="line">        <span class="keyword">var</span> tableName = GetTableName(entityType);</span><br><span class="line">        <span class="keyword">var</span> tableIdProperty = entityType.GetProperty(<span class="string">"Id"</span>);</span><br><span class="line">        <span class="keyword">var</span> auditLogAttrs = invocation.Method.GetCustomAttributes(<span class="keyword">typeof</span>(AuditLogAttribute), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (auditLogAttrs == <span class="literal">null</span> || auditLogAttrs.Length == <span class="number">0</span> || entityType == <span class="keyword">typeof</span>(AuditLog))</span><br><span class="line">        &#123;</span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> auditLogAttr = (auditLogAttrs <span class="keyword">as</span> AuditLogAttribute[])[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> auditLogs = <span class="keyword">new</span> List&lt;AuditLog&gt;();</span><br><span class="line">        <span class="keyword">switch</span> (auditLogAttr.OperationType)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Domain.OperationType.Created:</span><br><span class="line">                auditLogs = GetAddedAuditLogs(invocation, tableName);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Domain.OperationType.Updated:</span><br><span class="line">                auditLogs = GetUpdatedAuditLogs(invocation, tableName, entityType, </span><br><span class="line">                    tableIdProperty, repository);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Domain.OperationType.Deleted:</span><br><span class="line">                auditLogs = GetDeletedAuditLogs(invocation, tableName);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        invocation.Proceed();</span><br><span class="line">        repository.Insert&lt;AuditLog&gt;(auditLogs.ToArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，这里需要需要使用<code>Autofac</code>将其注册到IoC容器中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.RegisterType&lt;DapperRepository&gt;().As&lt;IRepository&gt;()</span><br><span class="line">    .InterceptedBy(<span class="keyword">typeof</span>(AuditLogInterceptor))</span><br><span class="line">    .EnableInterfaceInterceptors();</span><br><span class="line">builder.RegisterType&lt;AuditLogInterceptor&gt;();</span><br></pre></td></tr></table></figure><h1 id="思路延伸：领域事件"><a href="#思路延伸：领域事件" class="headerlink" title="思路延伸：领域事件"></a>思路延伸：领域事件</h1><p>最近这段时间，对于数据同步这类“需求”略有感触，譬如某种单据在两个互为上下游的系统里流转，譬如不同系统间实时地对基础资料进行同步等。这类需求可能会通过<code>ETL</code>、<code>DBLink</code>这类“数据库”手段实现，亦有可能是通过互相调用API的方式实现，再者无非是通过数据库实现类似消息队列的功能……而我个人，更推崇通过事件来处理，因为它更接近人类思考的本质，希望在适当的时机来“通知”对方，而论询实际上是一种相当低效的沟通方式。一个订单被创建，一条记录被修改，本质上都是一个特定事件，而在业务上对此感兴趣的任何第三方，都可以去订阅这个事件，这就是事件驱动的思想。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/04/24/8sgUqxmF5n2CdYO.png" alt="领域事件" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">领域事件</div>            </figure><p>我拜读了几篇关于“领域驱动设计(DDD)”文章，了解到DDD中有领域事件和集成事件的概念。最直接的体会就是，DDD是主张“充血模型”的，它把事件附加到实体上，最大的好处就是，可以让“发送(Dispatch)”事件的代码，集中地放在一个地方。而我们现在的业务代码，基本是高度耦合的，每次去添加一个事件的时候，最担心地就是遗漏了某个地方。按照DDD的思想，实现领域事件，最常用的伎俩是重写DbContext的SaveChanges()方法，或者在EF中去指定DbContext的Complate事件。这里同样借助了ChangeTracker来实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">bool</span>&gt; <span class="title">SaveChangesAsync</span>(<span class="params">CancellationToken cancellationToken = <span class="keyword">default</span>(CancellationToken</span>))</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> aggregateRoots = dbContext.ChangeTracker.Entries().ToList();</span><br><span class="line">        <span class="keyword">await</span> _eventDispatcher.DispatchAsync(aggregateRoots,cancellationToken);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="keyword">base</span>.SaveChangesAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>_eventDispatcher</code>作为事件分发器来分发事件，它实现了<code>IEventDispatcher</code>接口。相对应地，事件订阅者需要实现<code>IDomainEventHandler</code>接口。如果是最简单的进程内通信，那么你需要一个容器来管理<code>IDomainEvent</code>和<code>IDomainEventHandler</code>间的关系；而如果是不同微服务间的通信，那么你需要引入<code>RabbitMQ</code>或者<code>kafka</code>这类消息队列中间件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDomainEvent</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface IDomainEventHandler&lt;in TDomainEvent&gt;</span><br><span class="line">        <span class="keyword">where</span> TDomainEvent : IDomainEvent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task <span class="title">HandleAysnc</span>(<span class="params">TDomainEvent @<span class="keyword">event</span>, CancellationToken cancellationToken = <span class="keyword">default</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEventDispatcher</span></span><br><span class="line">&#123;</span><br><span class="line">    Task DispatchAsync&lt;TDomainEvent&gt;(</span><br><span class="line">        TDomainEvent @<span class="keyword">event</span>,</span><br><span class="line">        CancellationToken cancellationToken = <span class="keyword">default</span>) <span class="keyword">where</span> TDomainEvent :IDomainEvent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，你现在问我怎么样做数据同步好，我一定会说，通过事件来处理。因为这样，每一条数据的新增、更新、删除，都可以事件的形式发布出去，而关心这些数据的下游系统，则只需要订阅这些事件，该干嘛好嘛，何乐而不为呢？搞什么中间表，打什么标记，用数据库一遍遍地实现消息队列有意思吗？同样地，你会意识到，仓储模式，哪怕ORM换成Dapper，我们一样可以去发布这些事件，增量同步自然是要比全量同步优雅而且高效的。最重要的是，程序员再不需要到处找地方埋点了，你看我博客更新频率这么低，不就是因为这些事情浪费了时间吗(逃？因为，全量 + 实时同步就是一个非常愚蠢的决定。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>本文分别针对<code>EF Core</code>和<code>Dapper</code>实现了数据库审计的功能。对于前者，主要是通过重写DbContext的<code>SaveChanges()</code>方法来实现，而<code>EF</code>及<code>EF Core</code>中的<code>ChangeTracker</code>则提供了一种获取数据库表记录变化前后值的能力。而对于后者，主要是实现了<code>Dapper</code>的仓储模式，在此基础上结合<code>Castle</code>的动态代理功能，对仓储接口进行拦截，以此实现审计日志的记录功能。整体来看，后者对代码的侵入性要更小一点，理论上我们可以实现<code>EF</code>或<code>EF Core</code>的仓储模式，这样两者在实现上会更接近一点，当然，更直接的方案是去拦截<code>SaveChanges()</code>方法，这和我们使用继承的目的是一样的，由于Dapper本身没有<code>ChangeTracker</code>，所以，在处理<code>Update()</code>相关的仓储接口时，都需要先查询一次数据库，这一点是这个方案里最大的短板。而顺着这个方案扩展下去，我们同样可以挖掘出一点<code>DDD</code>里<code>领域事件</code>的意味，这就变得很有意思了，不是吗？这篇博客就先写到这里吧……再见</p>]]></content>
    
    <summary type="html">
    
      整体来看，后者对代码的侵入性要更小一点，理论上我们可以实现`EF`或`EF Core`的仓储模式，这样两者在实现上会更接近一点，当然，更直接的方案是去拦截`SaveChanges()`方法，这和我们使用继承的目的是一样的，由于Dapper本身没有`ChangeTracker`，所以，在处理`Update()`相关的仓储接口时，都需要先查询一次数据库，这一点是这个方案里最大的短板;在此基础上，我们可以编写我们实际的DbContext，这里以CustomerContext为例，当我们向其中添加、修改和删除Customer的时候，就会触发审计相关的逻辑，默认情况下，审计产生的数据AuditLog和Customer在同一个数据库上下文中，当然，我们可以通过注入IAuditStore来实现更精细的控制，例如，可以将审计日志输入到文本文件，甚至是Mongodb这样的非关系型数据库里，因为有依赖注入的存在，这些实现起来会非常的简单;而对于像Dapper这种轻量级的ORM，它本身没有类似EF/EF Core的ChangeTracker的设计，如果我们在项目中使用Dapper，并且希望实现审计的相关功能，直观上看就会有一点困难
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="EF" scheme="https://qinyuanpei.github.io/tags/EF/"/>
    
      <category term="Dapper" scheme="https://qinyuanpei.github.io/tags/Dapper/"/>
    
      <category term="审计" scheme="https://qinyuanpei.github.io/tags/%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>WebApiClient中动态路由的实现与使用</title>
    <link href="https://qinyuanpei.github.io/posts/2488769283/"/>
    <id>https://qinyuanpei.github.io/posts/2488769283/</id>
    <published>2020-04-02T10:26:53.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>博主曾经在「<a href="https://blog.yuanpei.me/posts/380519286/" target="_blank" rel="noopener">声明式RESTful客户端WebApiClient在项目中的应用</a>」这篇博客中，介绍过.NET平台下的“Retrofit”——<a href="https://github.com/dotnetcore/WebApiClient" target="_blank" rel="noopener">WebApiClient</a>，它是一种声明式的RESTful客户端，通过动态代理来生成Http调用过程代码，而调用方只需要定义一个接口，并使用相关“注解”对接口进行修饰即可，类似的实现还有<a href="https://github.com/reactiveui/refit" target="_blank" rel="noopener">Refit</a>，是一种比HttpWebRequest、HttpClient和RestSharp更为优雅的接口调用方式。在今天这篇博客中，我想聊聊WebApiClient中动态路由的实现与使用。</p><p>一个典型的WebApiClient使用流程如下，首先定义一个接口，并使用“注解”对接口进行修饰：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISinoiovApiClient</span> : <span class="title">IHttpApiClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 运单取消接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost(<span class="meta-string">"/yl/api/waybill/cancel"</span>)</span>]</span><br><span class="line">    [<span class="meta">AuthorizeFilter</span>]</span><br><span class="line">    [<span class="meta">LoggingFilter</span>]</span><br><span class="line">    [<span class="meta">JsonReturn</span>]</span><br><span class="line">    ITask&lt;BaseApiResult&lt;<span class="keyword">object</span>&gt;&gt; CancelShipment([JsonContent]BaseShipmentDto shipment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，调用就变得非常简单：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> HttpApiConfig () &#123; HttpHost = <span class="keyword">new</span> Uri (baseUrl) &#125;;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> client = HttpApiClient.Create&lt;ISinoiovApiClient&gt; (config)) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> client.CancelShipment (<span class="keyword">new</span> BaseShipmentDto () &#123; &#125;);</span><br><span class="line">    <span class="comment">//TODO：TODO的意思就是永远都不做</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有多简单呢？简单到调用的时候我们只需要给一个baseUrl就可以了！然而，如果你真这么想的话，就太天真了！虽然现在是一个遍地都是微服务和容器的时代，可是因为RESTful风格本身的约束力并不强，实际使用中难免会出现以下情况：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试环境</span></span><br><span class="line">http:<span class="comment">//your-domain.com/test/api/waybill/cancel</span></span><br><span class="line"><span class="comment">//正式环境</span></span><br><span class="line">http:<span class="comment">//your-domain.com/prod/api/waybill/cancel</span></span><br></pre></td></tr></table></figure><p>是的，你猜对了，实际运作过程中，测试环境和正式环境不单单会使用不同的域名，可能还会使用不同的路由，虽然，理论上两个环境的程序应该完全一样，应该使用相同的路由。这样子就让我们有一点尴尬，因为我们的路由是写在特性(<strong>Attribute</strong>)里的，这玩意儿的实例化是附着在对应的类上面的，并且在整个运行时期间是不允许修改的。所谓<strong>“兵来将挡水来土掩”</strong>，接下来，我们来考虑如何解决这个问题。</p><h1 id="使用-Uri"><a href="#使用-Uri" class="headerlink" title="使用[Uri]"></a>使用[Uri]</h1><p>第一种思路是给接口加一个Url参数，此时，调整接口方法声明如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 运单取消接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">AuthorizeFilter</span>]</span><br><span class="line">[<span class="meta">LoggingFilter</span>]</span><br><span class="line">[<span class="meta">JsonReturn</span>]</span><br><span class="line">ITask&lt;BaseApiResult&lt;<span class="keyword">object</span>&gt;&gt; CancelShipment([Uri]<span class="keyword">string</span> url, [JsonContent]BaseShipmentDto shipment);</span><br></pre></td></tr></table></figure><p>这种方式可以解决问题，可我使用WebApiClient的原因之一，就是我不喜欢在客户端(调用方)维护这些地址。作为一个ApiCaller，在微服务架构流行以来，接口越来越多，逐渐呈现出爆炸式增加的趋势。当我作为一个后端工程师的时候，编写接口是件非常惬意的事情。可当我为了”全栈工程师”的虚名，去做一个面无表情的ApiCaller的时候，我是不情愿去配置这些Url的，有本事你把配置中心搭起来啊！所以，道理我都懂，But，我拒绝！</p><h1 id="使用-foobar"><a href="#使用-foobar" class="headerlink" title="使用{foobar}"></a>使用{foobar}</h1><p>第二种思路是同样是给接口增加一个片段参数，此时，调整接口方法声明如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 运单取消接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpPost('/&#123;prefix&#125;/api/waybill/cancel)</span>]</span><br><span class="line">[<span class="meta">AuthorizeFilter</span>]</span><br><span class="line">[<span class="meta">LoggingFilter</span>]</span><br><span class="line">[<span class="meta">JsonReturn</span>]</span><br><span class="line">ITask&lt;BaseApiResult&lt;<span class="keyword">object</span>&gt;&gt; CancelShipment([JsonContent]BaseShipmentDto shipment, <span class="keyword">string</span> prefix = <span class="string">"yl"</span>);</span><br></pre></td></tr></table></figure><p>这种方式和第一种方式原理一致，无非是需要配置的参数从多个变成一个。我个人更喜欢这种方式，为什么呢？可能我认为专业的Api接口会有版本的概念，类似于：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版本号路由</span></span><br><span class="line">/api/v2<span class="number">.0</span>/abc/xyz</span><br><span class="line"><span class="comment">//查询参数路由</span></span><br><span class="line">/api/abc/xyz?v=<span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>这样，我们就在无形中解决了一类问题，对于第二种形式，版本号以查询参数的方式出现，我们选择在过滤器中<code>AddUrlQuery()</code>或者使用<code>[PathQuery]</code>来解决。如果让我选择，我一定会选择这种方式，因为它更优雅一点吗？不，因为我懒，写程序的终究目的就是为了不写代码，就好像一个程序试图去杀死它自己的进程。</p><h1 id="使用服务发现"><a href="#使用服务发现" class="headerlink" title="使用服务发现"></a>使用服务发现</h1><p>第三种思路，我承认有一点赌的成份，你猜对接客户的接口的时候，会不会提供服务发现这套基础设施给你？可如果在自己的项目里有服务发现，还需要再配置每个服务的Url吗？这样想是不是觉得还不错，的确，我们在微服务架构里引入WebApiClient这种类Retrofit的库，本质上还是为了弱化服务的界限感，如果我调用一个服务和调用本地方法的体验一样，那么，这是什么呢？不用怀疑，这就是RPC(<strong>大雾</strong>)。这里，我实现了一个简单的示例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Consul获取可用地址</span></span><br><span class="line"><span class="keyword">var</span> services = <span class="keyword">await</span> _consul.Health.Service(<span class="string">"SinoiovApi"</span>, <span class="keyword">string</span>.Empty, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> serviceUrls = services.Response.Select(s =&gt; <span class="string">$"<span class="subst">&#123;s.Service.Address&#125;</span>:<span class="subst">&#123;s.Service.Port&#125;</span>"</span>).ToList();</span><br><span class="line">serviceUrl = serviceUrls[<span class="keyword">new</span> Random().Next(<span class="number">0</span>, serviceUrls.Count - <span class="number">1</span>)];</span><br><span class="line"><span class="comment">//今天的你我，怎样重复昨天的故事</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> HttpApiConfig () &#123; HttpHost = <span class="keyword">new</span> Uri (serviceUrl) &#125;;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> client = HttpApiClient.Create&lt;ISinoiovApiClient&gt; (config)) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> client.CancelShipment (<span class="keyword">new</span> BaseShipmentDto () &#123; &#125;);</span><br><span class="line">    <span class="comment">//TODO：TODO的意思就是永远都不做</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我说了这有赌的成份，前提是这些服务在Consul中提前注册，这一点相信大家都知道啦！WebApiClient的<a href="https://www.cnblogs.com/kewei/" target="_blank" rel="noopener">作者</a>提供了类似扩展:<a href="https://github.com/xljiulang/WebApiClient.Extensions/blob/master/WebApiClient.Extensions.DiscoveryClient/DiscoveryClientExtensions.cs" target="_blank" rel="noopener">WebApiClient.Extensions.DiscoveryClient</a>，该扩展基于<a href="https://github.com/SteeltoeOSS/steeltoe" target="_blank" rel="noopener">Steeltoe</a>打造，感兴趣的朋友，可以前去了解一下。</p>]]></content>
    
    <summary type="html">
    
      博主曾经在「[声明式RESTful客户端WebApiClient在项目中的应用](https://blog.yuanpei.me/posts/380519286/)」这篇博客中，介绍过.NET平台下的“Retrofit”——[WebApiClient](https://github.com/dotnetcore/WebApiClient)，它是一种声明式的RESTful客户端，通过动态代理来生成Http调用过程代码，而调用方只需要定义一个接口，并使用相关“注解”对接口进行修饰即可，类似的实现还有[Refit](https://github.com/reactiveui/refit)，是一种比HttpWebRequest、HttpClient和RestSharp更为优雅的接口调用方式;是的，你猜对了，实际运作过程中，测试环境和正式环境不单单会使用不同的域名，可能还会使用不同的路由，虽然，理论上两个环境的程序应该完全一样，应该使用相同的路由;在今天这篇博客中，我想聊聊WebApiClient中动态路由的实现与使用
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="RESTful" scheme="https://qinyuanpei.github.io/tags/RESTful/"/>
    
      <category term="Retrofit" scheme="https://qinyuanpei.github.io/tags/Retrofit/"/>
    
      <category term="WebApi" scheme="https://qinyuanpei.github.io/tags/WebApi/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core + ELK搭建可视化日志分析平台(上)</title>
    <link href="https://qinyuanpei.github.io/posts/3687594958/"/>
    <id>https://qinyuanpei.github.io/posts/3687594958/</id>
    <published>2020-02-15T16:01:13.000Z</published>
    <updated>2020-07-10T02:33:20.061Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>Hi，各位朋友，大家好！欢迎大家关注我的博客，我的博客地址是: <a href="https://blog.yuanpei.me" target="_blank" rel="noopener">https://blog.yuanpei.me</a>。今天是远程办公以来的第一个周末，虽然公司计划在远程两周后恢复正常办公，可面对着每天都有人离开的疫情，深知这一切都不会那么容易。窗外的阳光透过玻璃照射进屋子，这一切都昭示着春天的脚步渐渐近了。可春天来了，有的人却没有再回来。那些在2019年结束时许下的美好期待、豪言壮语，在这样一场灾难面前，终究是如此的无力而苍白。可不管怎么样，生活还是要继续，在这些无法出门的日子里，在这样一个印象深刻的春节长假里，除了做好<strong>勤洗手</strong>、<strong>多通风</strong>、<strong>戴口罩</strong>这些防疫保护措施以外，博主还是希望大家能够抽空学习，通过知识来充实这“枯燥”的生活。所以，从今天开始，我将为大家带来 <strong>.NET Core + ELK搭建可视化日志分析平台</strong> 系列文章，希望大家喜欢。</p><h1 id="什么是ELK"><a href="#什么是ELK" class="headerlink" title="什么是ELK"></a>什么是ELK</h1><p>当接触到一个新的事物的时候，我们最好是从它的概念开始入手。那么，什么是ELK呢？ELK，是<code>Elastaicsearch</code>、<code>Logstash</code>和<code>Kibana</code>三款软件的简称。其中，<code>Elastaicsearch</code>是一个开源的全文搜索引擎。如果你没有听说过它，那至少应该听说过<code>Lucene</code>这个开源搜索引擎。事实上，<code>Elastaicsearch</code>是<code>Lucene</code>的封装，它提供了<code>REST</code> API 的操作接口 。而<code>Logstash</code>则是一个开源的数据收集引擎，具有实时的管道，它可以动态地将不同的数据源的数据统一起来。最后，<code>Kibana</code>是一个日志可视化分析的平台，它提供了一系列日志分析的Web接口，可以使用它对日志进行高效地搜索、分析和可视化操作。至此，我们可以给ELK一个简单的定义：</p><blockquote><p>ELK是一个集日志收集、搜索、日志聚合和日志分析于一身的完整解决方案。</p></blockquote><p>下面这张图，展示了<code>Elastaicsearch</code>、<code>Logstash</code>和<code>Kibana</code>三款软件间的协作关系。可以注意到，<code>Logstash</code>负责从应用服务器收集日志。我们知道，现在的应用程序都是跨端应用，程序可能运行在PC、移动端、H5、小程序等等各种各样的终端上，而<code>Logstash</code>则可以将这些不同的日志信息通过管道转换为统一的数据接口。这些日志将被存储到<code>Elasticsearch</code>中。我们提到<code>Elastaicsearch</code>是一个开源的全文搜索引擎，故而它在数据查询上相对传统的数据库有着更好的优势，并且<code>Elasticsearch</code>可以根据需要搭建单机或者集群。最终，<code>Kibana</code>从<code>Elasticsearch</code>中查询数据并绘制可视化图表，并展示在浏览器中。在最新的ELK架构中，新增了<code>FireBeat</code>这个软件，它是它是一个轻量级的日志收集处理工具(Agent)，适合于在各个服务器上搜集日志后传输给<code>Logstash</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/mbJRXGo56YA9jQP.png" alt="ELK-01.png" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">ELK-01.png</div>            </figure><p>总而言之，ELK可以让我们以一种更优雅的方式来收集日志，传统的日志收集通常会把日志写到文件或者数据库中。前者，不利于日志的集中管理和查询；后者，则无法应对海量文本检索的需求。所以，使用ELK可以为我们带来下面这些便利：<strong>分布式日志数据集中式查询和管理；系统监控，譬如对系统硬件和应用各个组件的监控；故障排查；报表功能；日志查询，问题排查，上线检查； 服务器监控、应用监控、错误报警；性能分析、用户行为分析、时间管理等等</strong>。</p><h1 id="如何安装ELK"><a href="#如何安装ELK" class="headerlink" title="如何安装ELK"></a>如何安装ELK</h1><p>安装ELK的方式，首推以Docker方式安装。关于Docker的安装、使用请大家查阅官方文档：<a href="https://docs.docker.com/" target="_blank" rel="noopener">https://docs.docker.com/</a>。这里我假设大家都已经掌握了Linux和Docker的使用。首先我们拉取ELK镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sebp/elk</span><br></pre></td></tr></table></figure><p>接下来，我们利用此镜像来运行一个容器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 --name elk sebp/elk</span><br></pre></td></tr></table></figure><p>通常情况下，完成这两个步骤以后，我们就完成了ELK安装。此时，我们可以在浏览器中输入地址：<code>http//localhost:9200</code>，这是<code>Elasticsearch</code>的默认端口。如果浏览器中返回了了类似下面的信息，则表示ELK安装成功。这里是博主获得的关于<code>Elasticseach</code>的信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"elk"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"GGlJrOvtT2uSfoHioLCWww"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"7.5.2"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"tar"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"8bec50e1e0ad29dad5653712cf3bb580cd1afcdf"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2020-01-15T12:11:52.313576Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"8.3.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们继续在浏览器中输入地址：<code>http://localhost:5601/app/kibana</code>。显然，这是<code>Kibana</code>的默认地址，至此<strong>ELK</strong>的“庐山真面目”<strong>终于揭晓，首次安装完</strong>ELK，<code>Kibana</code>的界面应该试类似下面这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/uOQSCUxfWYManK6.png" alt="ELK的庐山真面目" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">ELK的庐山真面目</div>            </figure><p>按照指引，我们可以添加示例数据来感受下<strong>ELK</strong>全家桶的魅力：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/j6xFzedsPf7y9gL.png" alt="ELK示例 - Global Flight Dashboard" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">ELK示例 - Global Flight Dashboard</div>            </figure><p>这样，我们就完成<strong>ELK</strong>环境的快速搭建。下面，按照惯例，我们将实现一个“<strong>Hello World</strong>”级别的实例，即：通过ELK来收集一个ASP .NET Core应用的日志信息。为了让这个示例尽可能地简单一点，我们选择了直接向<code>Elasticsearch</code>写入日志的方式，这里选择的日志库是<a href="https://serilog.net/" target="_blank" rel="noopener">Serilog</a>。</p><h1 id="Hello-ELK"><a href="#Hello-ELK" class="headerlink" title="Hello ELK"></a>Hello ELK</h1><p>本文所用的例子已发布到<a href="https://github.com/qinyuanpei/DynamicWebApi/tree/master/DynamicWebApi.Core" target="_blank" rel="noopener">Github</a>。首先，我们准备一个ASP.NET Core的项目，MVC或者Web API都可以。接下来，在项目中引入三个依赖项：<code>Serilog</code>、<code>Serilog.Extensions.Logging</code>和<code>Serilog.Sinks.ElasticSearch</code>。对于前两个，如果大家用过<code>Log4Net</code>或者<code>NLog</code>应该会感到非常熟悉啦，这一点不在赘述。而第三个，从名字就可以看出来这是冲着<code>Elasticsearch</code>来的，因为这是这个系列的第一篇文章，所以，我们直接写<code>Elasticsearch</code>即可。<code>Logstash</code>管道相关的内容，是一个非常复杂的东西，我们会在下一篇文章中单独来讲。</p><p>接下来，主要是<code>Serilog</code>在ASP.NET Core中的配置。首先是<code>Startup</code>类，在构造函数中初始化<code>Serilog</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">  .Enrich.FromLogContext()</span><br><span class="line">  .MinimumLevel.Debug()</span><br><span class="line">  .WriteTo.Elasticsearch(</span><br><span class="line">  <span class="keyword">new</span> ElasticsearchSinkOptions(<span class="keyword">new</span> Uri(<span class="string">"http://localhost:9200"</span>))</span><br><span class="line">  &#123;</span><br><span class="line">   MinimumLogEventLevel = LogEventLevel.Verbose,</span><br><span class="line">   AutoRegisterTemplate = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .CreateLogger();</span><br><span class="line"> Configuration = configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得<code>http://localhost:9200</code>这个地址是什么吗？不错，这是<code>Elasticsearch</code>的默认地址，所以，这部分代码主要的作用就是告诉<code>Elasticsearch</code>，接下来的日志信息都写到<code>Elasticsearch</code>中。为了让日志的信息更丰富一点，我们这里设置最小的日志事件级别为<code>Verbose</code>。</p><p>接下来，在<code>ConfigureServices()</code>方法中注册ILogger实例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddLogging(loggingBuilder =&gt; loggingBuilder.AddSerilog(dispose: <span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p>接下来，在业务层增加日志：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _logger = Log.Logger;</span><br><span class="line">      </span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Add</span>(<span class="params"><span class="keyword">double</span> n1, <span class="keyword">double</span> n2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> _logger.Information(<span class="string">$"Invoke <span class="subst">&#123;<span class="keyword">typeof</span>(CoreCalculatorService).Name&#125;</span>/Add: <span class="subst">&#123;n1&#125;</span>,<span class="subst">&#123;n2&#125;</span>"</span>);</span><br><span class="line"> <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，ELK在ASP.NET Core中的集成已经全部结束，这意味着我们所有的日志都会写入到ELK中。那么，要到那里去找这些日志信息呢？且听博主娓娓道来。我们在<code>Kibana</code>中点击左侧导航栏最底下的设置按钮，然后再点击右侧的<code>Create index pattern</code>按钮创建一个索引。什么叫做索引呢？在<code>Elasticsearch</code>中索引相当于一张”表”，而这个“表”中的一条行记录则被称为<code>Document</code>，如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/fywAlQcH45mId1F.png" alt="为Kibana创建索引1" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">为Kibana创建索引1</div>            </figure><p>创建索引的时候，会发现列表中列出了目前<code>Elasticsearch</code>中可用的数据。以博主为例，这里的<code>logstash-2020.02.15</code>就是本文中的ASP.NET Core应用产生的日志信息。在这里，我们可以通过一个模糊匹配来匹配同种类型的数据。通常这里需要我们选择一个过滤字段，我们选择时间戳即可：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/8fD1EabSUV7OeZM.png" alt="为Kibana创建索引2" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">为Kibana创建索引2</div>            </figure><p>创建完索引，就可以看到目前收集的日志信息了，在此基础上，我们可以做进一步的检索、过滤，来生成各种各样的“查询”。而每一个“查询”实际上就是一个数据源。我们就可以利用这些数据源来完成可视化，这是利用ELK进行可视化分析的一般流程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/m5jufkQW4qEiZAJ.png" alt="在Kibana中查看当前日志信息" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">在Kibana中查看当前日志信息</div>            </figure><p>下面是博主自己制作的一个简单的可视化看板，果然很长时间没有再用过<code>Kibana</code>，我都快忘记了要怎么做一个折线图。这实在是一篇迟到的博客，我早该在2019年的时候就完成这个系列的，这要命的拖延症啊，虽然没有新冠病毒恐怖，可终究不是什么好习惯！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/15/me7v2LBIOCUfM5a.png" alt="一个简单的可视化看板" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">一个简单的可视化看板</div>            </figure><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇博客是这个系列的第一篇，是一篇珊珊来迟的博客，因为博主早在2019年就开始着手学习ELK。考虑最新公司有使用ELK的打算，而因疫情又让博主有充足的时间，所以，博主决定把ELK相关的内容花点时间梳理出来。ELK是一个集日志收集、搜索、日志聚合和日志分析于一身的完整解决方案。博主计划在接下来的篇幅中介绍<code>Logstash</code>/<code>FireBeat</code>管道配置、Docker容器内的日志收集、以及自定义日志组件开发这些话题，希望大家继续关注我的博客。以上就是这篇博客的全部内容啦，晚安！</p>]]></content>
    
    <summary type="html">
    
      下面，按照惯例，我们将实现一个“**Hello World**”级别的实例，即：通过ELK来收集一个ASP .NET Core应用的日志信息;所以，从今天开始，我将为大家带来 **.NET Core + ELK搭建可视化日志分析平台** 系列文章，希望大家喜欢;博主计划在接下来的篇幅中介绍`Logstash`/`FireBeat`管道配置、Docker容器内的日志收集、以及自定义日志组件开发这些话题，希望大家继续关注我的博客
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="ELK" scheme="https://qinyuanpei.github.io/tags/ELK/"/>
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="日志" scheme="https://qinyuanpei.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>使用 jsDelivr 为 Hexo 博客提供高效免费的CDN加速</title>
    <link href="https://qinyuanpei.github.io/posts/1417719502/"/>
    <id>https://qinyuanpei.github.io/posts/1417719502/</id>
    <published>2020-02-05T19:01:00.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>最近给博客做了升级，从3.x升级到了4.x，主要是在官网看到了关于静态页面生成效率提升的内容。众所周知，Hexo在文章数目增加以后会越来越慢。博主大概是从14年年底开始使用Hexo这个静态博客的，截止到目前一共有176篇博客，其中的“慢”可想而知，中间甚至动过使用Hugo和VuePress的念头，所以，听说有性能方面的提升，还是决定第一时间来试试。整个升级过程挺顺利的，唯一遇到的问题是关于外部链接检测方面的，具体可以参考<a href="https://github.com/hexojs/hexo/issues/4107" target="_blank" rel="noopener">这里</a>。今天，博主主要想和大家分享下关于如何使用<a href="http://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>来为博客提供免费、高效的CDN服务，希望对大家有所帮助。</p><p><a href="http://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>是一个免费、快速和可信赖的CDN加速服务，官网上声称它每个月可以支撑680亿次的请求。博主是在去年年底的时候，偶然了解到这个服务的存在，这次趁着疫情肆虐的间隙，终于把这个服务集成到了博客中。更重要的是，这个服务在Github上是<a href="https://github.com/jsdelivr/jsdelivr" target="_blank" rel="noopener">开源</a>的。目前，它提供了针对<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>、<a href="https://github.com" target="_blank" rel="noopener">Github</a>和<a href="https://cn.wordpress.org" target="_blank" rel="noopener">WordPress</a>的加速服务，只需要一行代码就可以获得加速效果，以常用的jQuery和Bootstrap为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load jQuery v3.2.1</span></span><br><span class="line">https:<span class="comment">//cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load bootstrap v4.4.1</span></span><br><span class="line">https:<span class="comment">//cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.js</span></span><br></pre></td></tr></table></figure><p>这意味着我们只需要发布一个npm的包，就可以使用它提供的加速服务。CDN加速的好处我这里就不再多说了，只要我们的项目中用到了第三方的静态资源，譬如JavaScript/CSS等等都应该考虑接入到CDN中。有人常常担心CDN挂掉或者是私有化部署无法接入外网环境。我想说，我们目光应该长远一点，现在早已不是早年那种单打独斗式的开发模式了，我们不可能把所有资源都放到本地来。随着云计算的概念越发地深入人心，越来越多的基础服务都运行在一台又一台虚拟化的“云服务器”上，这种情况下，搞这种集中化配置的做法，是完全违背分布式的发展趋势的。</p><p>如果说，针对npm包的CDN加速服务离我们还有点遥远，因为我们大多数情况下都是在使用别人写好的库。那么，接下来，针对Github的CDN加速服务应该会让我们无比兴奋吧，毕竟Github Pages的“慢”大家是可以感受得到的。不然，为什么大家要用Coding Pages做国内/国外的双线部署呢？首先，我们在浏览器里输入下面这个地址：<a href="https://cdn.jsdelivr.net/gh/qinyuanpei/qinyuanpei.github.io@latest/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/qinyuanpei/qinyuanpei.github.io@latest/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/05/HtmhUdsSRLW4Q9A.png" alt="jsDelivr提供的CDN加速资源" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">jsDelivr提供的CDN加速资源</div>            </figure><p>此时，可以注意到，<a href="http://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a>可以把我们Github上的资源呈现出来，只要我们在Github上发布过相应的版本即可。这里的版本，可以理解为一次Release，对应Git中tag的概念，虽然Github现在引入了包管理器的概念，试图统一像npm、nuget、pip等等这样的包管理器。它提供的CDN服务有一个基本的格式：</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></p></blockquote><p>如果大家感兴趣，可以把这里的user和repo改成自己的来体验一番。需要注意的是，这里的版本号同样可以换成Commit ID或者是分支的名称。我个人建议用tag，因为它通常携带了版本号信息，语义上要更好一点。那么，顺着这个思路，我们只要把Hexo中的资源的相对路径改为jsDelivr的CDN加速路径就好啦！为了让切换更加自如，这里我们为Hexo写一个Helper，它可以理解为Hexo中的辅助代码片段。我们在<code>&lt;YouTheme&gt;/scripts/</code>目录下新建一个<code>plugins.js</code>文件，这样Hexo会在渲染时自动加载这个脚本文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="function">(<span class="params">path, cache, ext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">        <span class="keyword">const</span> minFile = <span class="string">`<span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;ext === <span class="string">'.js'</span> ? <span class="string">'.min'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> jsdelivrCDN = hexo.config.jsdelivr;</span><br><span class="line">        <span class="keyword">return</span> jsdelivrCDN.enable ? <span class="string">`//<span class="subst">$&#123;jsdelivrCDN.baseUrl&#125;</span>/gh/<span class="subst">$&#123;jsdelivrCDN.gh_user&#125;</span>/<span class="subst">$&#123;jsdelivrCDN.gh_repo&#125;</span>@latest/<span class="subst">$&#123;minFile&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;minFile&#125;</span>?v=<span class="subst">$&#123;version&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path + ext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.helper.register(<span class="string">'theme_js'</span>, (path, cache) =&gt; source(path, cache, <span class="string">'.js'</span>))</span><br><span class="line">hexo.extend.helper.register(<span class="string">'theme_css'</span>, (path, cache) =&gt; source(path, cache, <span class="string">'.css'</span>))</span><br></pre></td></tr></table></figure><p>接下来，修改布局文件，项目中的JavaScript和CSS文件，均通过<code>theme_js()</code>和<code>thems_css()</code>两个函数引入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载JavaScript</span><br><span class="line">&lt;script src="&lt;%- url_for(theme_js('assets/scripts/search', cache)) %&gt;" async&gt;&lt;/script&gt;</span><br><span class="line">//加载CSS</span><br><span class="line">&lt;link rel="stylesheet" href="&lt;%- url_for(theme_css('/assets/styles/style', cache)) %&gt;"&gt;</span><br></pre></td></tr></table></figure><p>既然是否使用CDN加速是可配置的，我们要在_config.yml文件中添加相应的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsdelivr CDN</span></span><br><span class="line"><span class="attr">jsdelivr:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">gh_user:</span> <span class="string">qinyuanpei</span></span><br><span class="line">  <span class="attr">gh_repo:</span> <span class="string">qinyuanpei.github.io</span></span><br><span class="line">  <span class="attr">baseUrl:</span> <span class="string">cdn.jsdelivr.net</span></span><br></pre></td></tr></table></figure><p>除此以外，我们还需要在部署博客的时候，生成一个名为latest的tag。虽然官网上说，在引用CDN的时候版本号可以省略，不过经过博主反复尝试，不带版本号并不会指向正确的版本，有些资源文件会报404，因为这部分资源文件回滚以后发现还是没有。所以，最后博主只好把这个版本号给固定下来了，这样又引入一个新问题，即：每次部署的时候都要先删除远程的latest。所以，这块儿的<a href="https://raw.githubusercontent.com/qinyuanpei/qinyuanpei.github.io/blog/.travis.yml" target="_blank" rel="noopener">Travis CI脚本</a>看起来会有点讨厌，如果大家有更好的方案，欢迎大家在博客中留言：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag latest</span><br><span class="line">git push --force --quiet "https://$&#123;CI_TOKEN&#125;@$&#123;GH_REF&#125;" master:master --tags</span><br></pre></td></tr></table></figure><p>好了，现在重新生成、部署，来看看效果吧：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/05/FZJi9esXWQzxLYf.png" alt="Coding Pages速度" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">Coding Pages速度</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/02/05/E3WYBRQk4DJCZr5.png" alt="Github Pages速度" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">Github Pages速度</div>            </figure><p>感觉效果还不错，Github Pages比平时要快很多，博主顺便就给Coding Pages启用了CDN加速。话说，看到这张图的时候总是感慨，如果肺炎疫情地图能像这两张图一样就好啦！面对这场无声的战役，有很多人一直在一线抗击病魔，还有很多人默默无闻地在支援武汉。或许，宅在家里的你我，什么都做不了，可即便如此，还是让我们一起来祈祷疫情快点结束吧，因为春天都要来了呢……好了，这就是这篇博客的全部内容啦，谢谢大家！</p><h1 id="2020-02-13-更新"><a href="#2020-02-13-更新" class="headerlink" title="2020/02/13 更新"></a>2020/02/13 更新</h1><p>在此之前，博主提到版本号的问题，即每一次在CDN上生成的版本，怎样体现到Hexo中引用的资源上面。当时采用了一个取巧的方法，Hexo中固定版本号为latest，然后每次都推送这个tag。这样引发一个问题，每次都先去远程删除这个tag，显然这不是我期望的解决方案。最终，我采用的方案是，通过Travis CI编译部署的时候，首先导出变量<code>$TRAVIS_BUILD_NUMBER</code>到一个文本文件中，然后Hexo在生成静态页面的时侯，从这个文本文件中读取该变量的值作为版本号，这样每次编译部署的时候，我们总能获得一个新的tag，而这个tag和Hexo中引用的资源版本一致，这样就彻底解决了这个遗留问题。修改后的<code>plugins.js</code>文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> version = <span class="string">'latest'</span></span><br><span class="line">fs.readFile(<span class="string">'./BUILD_NUMBER.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'load BUILD_NUMBER.txt fails, '</span> + error)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        version = data.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="function">(<span class="params">path, cache, ext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">        <span class="keyword">const</span> minFile = <span class="string">`<span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;ext === <span class="string">'.js'</span> ? <span class="string">'.min'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> jsdelivrCDN = hexo.config.jsdelivr;</span><br><span class="line">        <span class="keyword">return</span> jsdelivrCDN.enable ? <span class="string">`//<span class="subst">$&#123;jsdelivrCDN.baseUrl&#125;</span>/gh/<span class="subst">$&#123;jsdelivrCDN.gh_user&#125;</span>/<span class="subst">$&#123;jsdelivrCDN.gh_repo&#125;</span>@<span class="subst">$&#123;version&#125;</span>/<span class="subst">$&#123;minFile&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;minFile&#125;</span>?v=<span class="subst">$&#123;version&#125;</span>`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path + ext</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hexo.extend.helper.register(<span class="string">'theme_js'</span>, (path, cache) =&gt; source(path, cache, <span class="string">'.js'</span>))</span><br><span class="line">hexo.extend.helper.register(<span class="string">'theme_css'</span>, (path, cache) =&gt; source(path, cache, <span class="string">'.css'</span>))</span><br></pre></td></tr></table></figure><p>修改后的<code>.travis.yml</code>文件可以在<a href="https://raw.githubusercontent.com/qinyuanpei/qinyuanpei.github.io/blog/.travis.yml" target="_blank" rel="noopener">这里</a>获取。</p>]]></content>
    
    <summary type="html">
    
      &gt; https://cdn.jsdelivr.net/gh/user/repo@version/file;[jsDelivr提供的CDN加速资源](https://i.loli.net/2020/02/05/HtmhUdsSRLW4Q9A.png);https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js
    
    </summary>
    
      <category term="独立博客" scheme="https://qinyuanpei.github.io/categories/%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://qinyuanpei.github.io/tags/Hexo/"/>
    
      <category term="CDN" scheme="https://qinyuanpei.github.io/tags/CDN/"/>
    
      <category term="jsDelivr" scheme="https://qinyuanpei.github.io/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>从 .NET Core 2.2 升级到 3.1 的踩坑之旅</title>
    <link href="https://qinyuanpei.github.io/posts/3099575458/"/>
    <id>https://qinyuanpei.github.io/posts/3099575458/</id>
    <published>2020-01-22T10:23:08.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>有时候，版本更新太快并不是一件好事。虽然，两周一个迭代的“敏捷”开发依然被客户嫌弃交付缓慢，可一边是前端领域“求不要再更新了，学不动了”的声音，一边则是.NET Core从1.x到2.x再到3.x的高歌猛进。版本更新太快，带来的是API的频繁变动，无法形成有效的知识沉淀，就像转眼到了2020年，<code>Python 2.x</code>和<code>Windows 7</code>都引来了“寿终正寝”，可能你都还没有认真地学习过这些知识，突然就被告知这些知识要过期了，想想还是觉得挺疯狂啊。最近一直在捣鼓，如何让<code>.NET Core</code>应用跑在<code>Heroku</code>平台上，因为<code>Docker</code>镜像里使用最新的.NET Core 3.1运行时，所以，痛定思痛之余，决定把手头项目升级到3.1。上一次痛苦还是在2.1升级2.2，这还真没过多长时间。所以呢，这篇博客主要梳理下从2.2升级到3.1过程中遇到的问题。</p><h1 id="更新项目文件"><a href="#更新项目文件" class="headerlink" title="更新项目文件"></a>更新项目文件</h1><ul><li>调整目标框架为<code>netcoreapp3.1</code></li><li>删除引用项：<code>Microsoft.AspNetCore.App</code>、<code>Microsoft.AspNetCore.Razor.Design</code></li><li>删除<code>AspNetCoreHostingModel</code>，如果项目文件中的值为<code>InProcess</code>(因为ASP.NET Core 3.0 或更高版本项目默认为进程内承载模型）</li></ul><h1 id="更新程序入口"><a href="#更新程序入口" class="headerlink" title="更新程序入口"></a>更新程序入口</h1><ul><li>CreateWebHostBuilder()方法的返回值类型由<code>IWebHostBuilder</code>调整为<code>IHostBuilder</code></li><li>增加引用项：<code>Microsoft.Extensions.Hosting</code></li><li><code>Kestrel</code>配置变更至<code>ConfigureWebHostDefaults()</code>方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder CreateWebHostBuilder(<span class="built_in">string</span>[] args) =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureWebHostDefaults(<span class="function"><span class="params">webBuilder</span> =&gt;</span></span><br><span class="line">         &#123;</span><br><span class="line">             webBuilder.ConfigureKestrel(<span class="function"><span class="params">serverOptions</span> =&gt;</span></span><br><span class="line">             &#123;</span><br><span class="line">                    <span class="comment">// Set properties and call methods on options</span></span><br><span class="line">             &#125;)</span><br><span class="line">             .UseStartup&lt;Startup&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如果通过 <code>HostBuilder</code>手动创建宿主，则需要在 <code>ConfigureWebHostDefaults()</code>方法中显式调用·<code>UseKestrel()</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> Main (<span class="built_in">string</span>[] args) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> host = <span class="keyword">new</span> HostBuilder ()</span><br><span class="line">        .UseContentRoot (Directory.GetCurrentDirectory ())</span><br><span class="line">        .ConfigureWebHostDefaults (<span class="function"><span class="params">webBuilder</span> =&gt;</span> </span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.UseKestrel (<span class="function"><span class="params">serverOptions</span> =&gt;</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Set properties and call methods on options</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .UseIISIntegration ()</span><br><span class="line">            .UseStartup&lt;Startup&gt; ();</span><br><span class="line">        &#125;)</span><br><span class="line">        .Build ();</span><br><span class="line"></span><br><span class="line">    host.Run ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新Startup"><a href="#更新Startup" class="headerlink" title="更新Startup"></a>更新Startup</h1><ul><li><code>Configure()</code>方法第二个参数由``IHostingEnvironment<code>调整为</code>IWebHostEnvironment<code>(需要引用</code>Microsoft.Extensions.Hosting`)</li><li>从管道中删除<code>UseMvc()</code>扩展方法，相应地，删除<code>AddMvc()</code>及其链式调用相关方法</li><li><code>AddMvc()</code>等价于<code>AddRazorPages()</code> + <code>AddControllersWithViews()</code></li><li><code>AddControllers()</code>对应<code>WebApi</code>模板，<code>AddControllersWithViews()</code>对应<code>MVC</code>模板，<code>AddRazorPages()</code>对应<code>SPA</code>模板</li><li>路由注册由<code>传统路由</code>调整为<code>终结点路由</code>：</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public void Configure(IApplicationBuilder <span class="keyword">app</span>, IWebHostEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">app</span>.UseStaticFiles();</span><br><span class="line">    <span class="keyword">app</span>.UseRouting();</span><br><span class="line">    <span class="keyword">app</span>.UseCors();</span><br><span class="line">    <span class="keyword">app</span>.UseAuthentication();</span><br><span class="line">    <span class="keyword">app</span>.UseAuthorization();</span><br><span class="line">    <span class="keyword">app</span>.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//SignalR路由      </span></span><br><span class="line">        endpoints.MapHub&lt;ChatHub&gt;(<span class="string">"/chat"</span>);</span><br><span class="line">        <span class="comment">//RazorPages路由</span></span><br><span class="line">        endpoints.MapRazorPages()</span><br><span class="line">        <span class="comment">//特性路由(WebApi)</span></span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">        <span class="comment">//控制器路由(MVC)</span></span><br><span class="line">        endpoints.MapControllerRoute(<span class="string">"default"</span>, <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望继续使用<code>传统路由</code>，则可以使用下列方法任一：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.<span class="constructor">AddMvc(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddControllers(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddControllersWithViews(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br><span class="line">services.<span class="constructor">AddRazorPages()</span>.<span class="constructor">AddMvcOptions(<span class="params">options</span> =&gt; <span class="params">options</span>.EnableEndpointRouting = <span class="params">false</span>)</span>;</span><br></pre></td></tr></table></figure><h1 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h1><ul><li>从<code>.NET Core 3.0</code> 开始，<code>System.Text.Json</code>默认作为替代<code>Newtonsoft.json</code>的新一代JSON API</li><li>直接从<code>.NET Core 3.0</code> 创建的SignalR项目，服务端返回的JSON数据存在大小写的问题，这是由<code>System.Text.Json</code>引起的。解决方案是：</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.<span class="constructor">AddSignalR()</span></span><br><span class="line">    .<span class="constructor">AddJsonProtocol(<span class="params">options</span> =&gt; <span class="params">options</span>.PayloadSerializerOptions.PropertyNamingPolicy = <span class="params">null</span>)</span>;</span><br></pre></td></tr></table></figure><p>同理，对于该方案对于<code>services.AddControllers()</code>一样有效，前提是项目中使用了<code>System.Text.Json</code>。同理，对于SignalR的客户端项目，我们有：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">HubConnectionBuilder</span>()</span><br><span class="line">    <span class="selector-class">.WithUrl</span>(<span class="string">"/chatHub"</span>)</span><br><span class="line">    <span class="selector-class">.AddJsonProtocol</span>(options =&gt;</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">//TODO</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="selector-class">.Build</span>();</span><br></pre></td></tr></table></figure><ul><li>SignalR的JavaScript客户端由<code>@aspnet/signalr</code> 调整为为<code>@microsoft/signalr</code>：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const signalR = require(<span class="string">"@microsoft/signalr"</span>);</span><br><span class="line">let<span class="built_in"> connection </span>= new signalR.HubConnectionBuilder().withUrl(url).build();</span><br></pre></td></tr></table></figure><ul><li>如果希望继续使用<code>Newtonsoft.json</code>，则需要安装<code>AspNetCore NewtonsoftJson</code>。相应地，需要显式调用<code>AddNewtonsoftJson()</code>扩展方法：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddControllers()</span><br><span class="line">    .AddNewtonsoftJson(<span class="function"><span class="params">options</span> =&gt;</span> </span><br><span class="line">    &#123;</span><br><span class="line">        options.SerializerSettings.ContractResolver = <span class="keyword">new</span> CamelCasePropertyNamesContractResolver();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>同样地，<code>AddNewtonsoftJson()</code>支持<code>AddControllers()</code>， <code>AddControllersWithViews()</code>， <code>AddRazorPages()</code>所有方法</p><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><ul><li>升级后提示无法加载类型：<code>Microsoft.AspNetCore.Mvc.MvcJsonOptions</code>，解决方案是：<br>升级<code>Swashbuckle.AspNetCore</code>至最新版本(5.0+)，调整Swagger中间件配置代码：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(<span class="function"><span class="params">swagger</span> =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里发生了变化，需要引用：Microsoft.OpenApi.Models</span></span><br><span class="line">    swagger.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> OpenApiInfo &#123; Title = <span class="string">"ynamic WebApi"</span>, Version = <span class="string">"v1.0"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>安装完 <code>.NET Core 3.x</code>，使用<code>dotnet build</code>编译项目提示找不到<code>Microsoft.NET.Sdk.Web</code>。解决方案是：<br>升级2.2的时候，调整项目文件中的<code>Microsoft.NET.Sdk.Web</code>为<code>Microsoft.NET.Sdk</code>可以解决，而这个方法在3.x以后失效。<br>此时，可以检查环境变量<code>MSBuildSDKsPath</code>中的SDK版本和实际版本是否一致，尤其是像博主这样从2.0一路升级到3.x的朋友，应该都会遇到这个问题。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/migration/22-to-30?view=aspnetcore-2.2&tabs=visual-studio" target="_blank" rel="noopener">从 ASP.NET Core 2.2 迁移到3.0</a></li><li><a href="https://www.cnblogs.com/Irving/p/11587556.html" target="_blank" rel="noopener">升级 ASP.NET Core 3.0 设置 JSON 返回 PascalCase 格式与 SignalR 问题</a></li><li><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/1030" target="_blank" rel="noopener">Incompatibility with ASP.NET Core 3.0</a></li></ul>]]></content>
    
    <summary type="html">
    
      升级2.2的时候，调整项目文件中的`Microsoft.NET.Sdk.Web`为`Microsoft.NET.Sdk`可以解决，而这个方法在3.x以后失效;- 安装完 `.NET Core 3.x`，使用`dotnet build`编译项目提示找不到`Microsoft.NET.Sdk.Web`;- 升级后提示无法加载类型：`Microsoft.AspNetCore.Mvc.MvcJsonOptions`，解决方案是：
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term=".NET Core" scheme="https://qinyuanpei.github.io/tags/NET-Core/"/>
    
      <category term="SignalR" scheme="https://qinyuanpei.github.io/tags/SignalR/"/>
    
      <category term="迁移" scheme="https://qinyuanpei.github.io/tags/%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>不知老之将至</title>
    <link href="https://qinyuanpei.github.io/posts/888549816/"/>
    <id>https://qinyuanpei.github.io/posts/888549816/</id>
    <published>2020-01-01T08:46:24.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>我以为，时间是这个世界上最残忍的存在。因为，无论如何，你都无法阻止这如齿轮般互相咬合的时光机器，即使这世界上并没有所谓的“永动机”。习惯于沉默的时间之轮，你在或者不在，丝毫不影响它衡量宇宙万物的尺度。也许，是因为我们所拥有的时间太过短暂，所以，当一切都流失殆尽时，我们所能寄托的便只有不那么确定的未来。时间怎么会变得残忍呢？它无喜无悲俯视众生，倒像是一位入定参禅的老僧，有情感的分明是我们这些人类啊。</p><p>孔夫子说：发奋忘食，乐以忘忧，不知老之将至。而有时候，你甚至都没有怎么“发奋”、“快乐”，就不知老之将至了。也许，花了不少时间在工作甚至加班上面，如果这些可以算作“发奋”，老之将至才是符合人类生理趋势的必然。上个周末去看了《叶问4》的完结篇，突然发现，无论是戏里的叶师傅，还是戏外的甄子丹，居然都出现衰老的迹象。而童年记忆中的黄飞鸿则永远是白鹤亮翅的宗师气象，大概是因为《黄飞鸿》系列不曾像《叶问》系列，在功夫片的体裁外，多了一点传记电影的味道。有人说，这是华语功夫片的一次谢幕，而我更愿意理解为，这是演员同过去的自己的阶段性告别。人总是会老的，从公交车上为老人让座的宣传广播，到父母见一次就白一次的鬓角，再到一天比一天翻得飞快的日历……你，又是如何同过去的自己告别的呢？</p><p>Flag这种东西，是一种不立没有所谓“仪式感”，而立了又难免让你自愧虚度时光的存在。在过去的一年里，索性一个Flag都不立，这样看过来的时候，人生充满了一种荒芜感：微信公众号运营失败，因为缺少那个想让你运营下去的观众；博客写作无功无过，每月1至2篇文章，作为阶段性的回顾尚可；懒散/拖延症中晚期，此时此刻还有来自2019年的Todo；通过微软小英练习单词和口语，这一点没能坚持下来，更不必说连50音图都没学会的日语；没有被消费主义洗脑，量入为出、精简开支(穷得如此清新脱俗)；一个人做饭没怎么坚持下来，单单是准备食材就挺麻烦了，更何况炒菜锅坏了一直没换新的呢；工作快5年了，我还是没太大长进，还是喜欢怼人怼空气，沟通能力是挺重要了，可惜精力都被开会、扯皮这种事情消耗得差不多了啊；阅读量还是太少，从公司/图书馆借来的书，一般都能找时间去读，而下载下来放Kindle里的，读着读着就被遗忘了，订阅的RSS读起来倒没有这种压力，果然“书非借不能读也”。《一代宗师》里说，人活得是一个起伏，而我这一年是没能活成一杯烈酒的。人喜欢用平凡是真自我安慰，可都怕活成最平庸的样子，用天哥的话说，做人没意思啊！</p><p>醒来的时候和往常一样，一样到和平时上班没什么区别，直到我坐上公交车，惊诧于路上行人为何如此稀少时，我突然意识到，原来今天是2020年的第一天啊，原来2019年就这样失去了啊，原来今天元旦放假啊……习惯其实是件可怕的事情，我妈和我说，是我工作太认真了，确切地说，来到这家新公司后，太多的习惯都被改变了，譬如Deadline驱动开发而导致的加班，譬如身为乙方这个弱势群体的被动，譬如周末一样要被同事电话打扰的无力感……互联网在深入到这个世界的各个角落的同时，互联网从业者的生存环境反倒更加举步维艰，资本家们鼓吹996是一种福报，某企业用251来对待离职的员工，因为加班而过劳死留下孤儿遗孀的软通员工，因为被裁员而无力维持生活选择跳楼的员工……</p><p>詹青云在《奇葩说》里的一段话令我印象深刻，她说，整个社会都在选择性忽视对与错的问题，仅仅是因为这样子做更划算些，一群活生生的人就被当做冰冷的数字一样计算。《红楼梦》里说，“机关算尽太聪明，反误了卿卿性命”，一个大家都互相算计的世界是绝望的，而这种“划算”的想法有一天变成主流则是可怕的。有好几次工作到深夜凌晨，回到家困到直接穿着衣服睡着的我，恍惚中应该会同我的灵魂对话：到底是一件多么惊天动地的事情，需要我连命都不要地熬到这个点。对企业对说，它需要的是“划算”的员工。而对员工来说，生命比一切都重要。即使为社会这部大机器而殚精竭虑甚至牺牲生命，这部如永动机一般的大机器依旧不会停止，我们不需要去追赶整个社会的效率。如果追赶会有什么下场呢？卓别林的《摩登时代》已经告诉过你答案。</p><p>可笑的是，人类能接受同类所指定规则，唯独要抗衡比人类更高层次的自然规律。你、我，这个世界上的每一个人都会死，这是所有人都无法逃脱的自然规律，即使是同为人类的医生一样会死，难道医生都是神灵或者天使吗？《白色巨塔》中的財前医生医术精湛，可当面对身患癌症的自己时，一样回天乏术。医学的发展自始至终都是建立在死亡上的，我们不能在享受医学带来的好处的同时，仅仅因为那个人是你或我的亲人，就去伤害这些医疗工作者，因为他们和我们一样，都是普普通通的人，他们唯一比我们多的就是医术，可医术甚至于这世界上一切人类发明的东西，都不是万能的啊。</p><p>伤害别人，永远无法弥补我们对逝者的愧疚。生命原本就如此脆弱，如果身为医生而没能抢救过来自己的亲人，按照这套“划算”但不“正确”的理论，那么医生是不是应该选择自杀？我说，这个问题根本不需要多想，因为逝者已逝，让更多的人活下来，九泉之下有知的逝者或许会感到欣慰吧……如果你相信人死后灵魂会得到转世，那么，让逝者的生命从下一个新生命中得到延续不好吗？我们这个世界有一种病态的观念，对待客户要毕恭毕敬，对待患者要高风亮节，可如果有一天这些人要对你做出过分的事情，难道你还要一忍再忍吗？</p><p>人有时候会刻意拉大时空的疏离感，就像我第一次看《叶问》还是在同学的MP4上，我甚至都没有看过《叶问1》里“我要打10个”的名场面，因为第一次看《叶问》的时候，叶师傅已经在大圆桌上同洪师傅切磋武艺了。可当你回首时，时间已经过去10年啦，虽然在这10年里，罗师傅的武功一直没什么长进，而叶师傅的对手则一直在变强。翻过年以后，我就28岁啦，如果回头看我的10年，时间大概一样会变得空泛，因为有的人来来回回地从你生命里来了又去，而有的人甚至从未真正进入过你生命里。当时过境迁，你唯一能留下的就只有自己，我虽庆幸见证过那些花儿的开放，可那些花儿终究不是我的。也许，她们和我一样都渐渐老去了吧，听起来有些矫情对不对？其实，昨天和这些年里的每一天没有什么不同，甚至还要更普通些，因为我又没能控制住情绪发了火，记忆啊，终究带着些美化的滤镜……</p>]]></content>
    
    <summary type="html">
    
      人有时候会刻意拉大时空的疏离感，就像我第一次看《叶问》还是在同学的MP4上，我甚至都没有看过《叶问1》里“我要打10个”的名场面，因为第一次看《叶问》的时候，叶师傅已经在大圆桌上同洪师傅切磋武艺了;我说，这个问题根本不需要多想，因为逝者已逝，让更多的人活下来，九泉之下有知的逝者或许会感到欣慰吧;翻过年以后，我就28岁啦，如果回头看我的10年，时间大概一样会变得空泛，因为有的人来来回回地从你生命里来了又去，而有的人甚至从未真正进入过你生命里
    
    </summary>
    
      <category term="生活感悟" scheme="https://qinyuanpei.github.io/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="回顾" scheme="https://qinyuanpei.github.io/tags/%E5%9B%9E%E9%A1%BE/"/>
    
      <category term="2019" scheme="https://qinyuanpei.github.io/tags/2019/"/>
    
      <category term="年度" scheme="https://qinyuanpei.github.io/tags/%E5%B9%B4%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Liquid实现简单的数据交换</title>
    <link href="https://qinyuanpei.github.io/posts/3742212493/"/>
    <id>https://qinyuanpei.github.io/posts/3742212493/</id>
    <published>2019-12-22T09:36:42.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在平时的开发工作中，接口对接是一件无可避免的事情。虽然在“前后端分离”的大趋势下，后端的角色逐渐转换为数据接口的提供者，然而在实际的应用场景中，我们面对的往往是各种不同的“数据”，譬如企业应用中普遍使用的企业服务总线(ESB)，这类服务要求服务接入者必须使用WebService来作为数据交换格式；再譬如电子数据交换(EDI)这种特定行业中使用的数据交换格式，从可读性上甚至还不如基于XML的WebService……而更为普遍的则可能是需要使用Word、Excel、CSV来作为数据交换的媒介。顺着这个思路继续发散下去，进入我们失业的或许还有各种数据库，譬如MySQL和MongoDB；各种大数据平台，譬如Hadoop和Spark；各种消息队列，譬如RabbitMQ和Kafka等等。</p><p>注意到，这里反复提到的一个概念是数据交换(Data Switching)，它是指在多个数据终端设备间，为任意两个终端设备建立数据通信临时互联通路的过程。自从阿里提出“中台”的概念以来，越来越多的公司开始跟风“中台”概念，并随之衍生出譬如组织中台、数据中台、业务中台、内容中台等等的概念。今天这篇博客，我并不打算故弄玄虚地扯这些概念，我的落脚点是接口级别的数据交换，主要通过Liquid这款模板引擎来实现。它对应我在这篇博客开头提到的场景：一个对外提供RESful风格API的系统，如何快速地和一个WebService实现对接。总而言之，希望能对这篇博客对大家有所启发吧！</p><h2 id="关于Liquid"><a href="#关于Liquid" class="headerlink" title="关于Liquid"></a>关于Liquid</h2><p>首先，我们来介绍<a href="https://shopify.github.io/liquid" target="_blank" rel="noopener">Liquid</a>，通过它的官方网站，我们应该它是一门模板语言。对于模板语言，我们应该是非常熟悉啦，JavaScript里的<a href="https://handlebarjs.com" target="_blank" rel="noopener">Handlebars</a>和<a href="https://ejs.bootcss.com" target="_blank" rel="noopener">Ejs</a>就是非常著名的模板语言。如大家所见，这个博客就是用<code>Ejs</code>模板渲染出来的。而到了三大前端框架并驾齐驱的时代，模版语法依然被保留了下来，比如<code>Vue</code>中<code>{{model.userName}}</code>标记常常用来做文本插值。所以，如果要认真追溯起来的话，也许这些框架都或多或少的收到了<code>Liquid</code>的影响，因为它的基本语法如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//使用<span class="meta">page</span>实例的<span class="meta">title</span>属性插值</span><br><span class="line">&#123;&#123; <span class="meta">page</span>.<span class="meta">title</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>假设page是一个对象，它的title属性值为：Introduction，此时，渲染后的结果即为：Introduction。是不是感觉非常简单呢? 我们继续往下看。除了基本的“插值”语法以外，我们可以用<code>{% tag %}</code>这种结构(Liquid称之为Tag)：</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//声称变量author并赋值</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">sssign</span> author = '猫先森' %&#125;</span></span><br><span class="line"><span class="xml">//条件语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> author == '猫先森' %&#125;</span></span><br><span class="line"><span class="xml">帅哥，你好</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">//循环语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in posts %&#125;</span></span><br><span class="line"><span class="template-variable">&#123;&#123;post.<span class="name">date</span>&#125;&#125;</span><span class="xml">-</span><span class="template-variable">&#123;&#123;post.title&#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>这里仅仅展示了一部分<code>Liquid</code>的特性，但对于我们了解一门“语言”已经足够了，因为对于一门编程语言来说，只要学会顺序、条件和循环三种结构足矣。言下之意呢，像常规<code>else</code>、<code>elseif</code>、<code>break</code>和<code>continue</code>，<code>Liquid</code>都是支持的，这样子是不是更有编程语言的感觉了呢？除此之外，它还支持像<code>tablerow</code>这样的Tag，主要用来渲染HTML里的表格。</p><p>也许有人想说，这玩意儿有什么用呢？抱歉啊，这玩意儿还真有用。像发送邮件、发送短信这种一般都需要写个字符串模板的，简单的大家可以用<code>String.Format()</code>或者<code>$</code>来搞定，可一旦遇上循环的场景，这种基于字符串替换的方式就有点力不从心了。不开玩笑地说，在代码里用<code>StringBuilder</code>拼接HTML的方式，实在是太傻逼了。如果用<code>Liquid</code>写可能就是：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">亲爱的</span><span class="template-variable">&#123;&#123; model.UserID &#125;&#125;</span><span class="xml">:</span></span><br><span class="line"><span class="xml">   您好！您有以下设备即将超过校验有效期，请及时采取有效行动。</span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> equipment <span class="keyword">in</span> model.Equipments %&#125;</span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; equipment.EquipmentID &#125;&#125;</span></span><br><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="template-variable">&#123;&#123; model.SendBy &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>显然，这个代码比拼接字符串要优雅很多。博主曾经在一个前端页面看到过大量的HTML拼接操作，果然是jQuery操作DOM一时爽，jQuery操作DOM一直爽，可明明前端就有<a href="https://handlebarjs.com" target="_blank" rel="noopener">Handlebars</a>和<a href="https://ejs.bootcss.com" target="_blank" rel="noopener">Ejs</a>这样的模板语言。最近一位同事写前端页面的经历不由得让我感慨，眼睛觉得简单的事情，为什么总是要求手去做呢？直接操作DOM带来的弊端就是，业务逻辑永远和DOM纠缠在一起，那些没有人敢改的JavaScript代码，那些未经模块化全局引入的JavaScript代码，虽然马上就要2020年了，写下这些句子的时候还是感到魔幻，可能这就是所谓的魔幻现实主义吧。</p><p>OK, 我们把思绪拉回到<code>Liquid</code>。除了使用各种Tag实现流程控制以外，<code>Liquid</code>中还提供了过滤器(Filter)的概念，过滤器主要是配合<code>{{ variable | filter }}</code>语法来使用的。比如说，数据层返回了一个负数，而展示层希望展示正数，在不确定这个数值是否被别人使用的情况下，贸然去修改数据层的返回值是件危险的事情。此时，我们可以：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对绑定的变量或者值取绝对值</span></span><br><span class="line">&#123;&#123; <span class="number">-17</span> | <span class="keyword">abs</span>&#125;&#125;</span><br><span class="line"><span class="comment">//保留小数位</span></span><br><span class="line">&#123;&#123; <span class="number">183.357</span> | round: <span class="number">2</span> &#125;&#125;</span><br><span class="line"><span class="comment">//日期/时间格式</span></span><br><span class="line">&#123;&#123; article.created_date | data: %b %d, %Y&#125;&#125;</span><br></pre></td></tr></table></figure><p>类似小数点位数、日期/时间格式等问题，均可以在<code>Liquid</code>中找到相应的过滤器。需要说明的是，<code>Liquid</code>使用<code>Ruby</code>进行开发的。也许在读到这篇博客前，大家都没有听说过<code>Liquid</code>，那么至少听说过<code>Jekyll</code>这个著名的静态博客生成器吧。实际上，在我写这篇博客的时候，我刚刚了解到一件事情，<code>Jekyll</code>就是基于<code>Liquid</code>而开发的，想到当初搭建这个博客时被<code>Ruby</code>劝退的回忆，我大概想不到有一天会再次接触它吧，不得不说，人生还真是奇妙啊！</p><h2 id="一个简单的想法"><a href="#一个简单的想法" class="headerlink" title="一个简单的想法"></a>一个简单的想法</h2><p>好了，关于<code>Liquid</code>的介绍我们先了解到这里。写到这里，再回头去看我们一开始的问题，即：怎么把上游的数据(Model)转化为下游的数据(Template)。这里暂且抛开它到底是XML、JSON还是EDI这种细节性的问题，我想我们大概会有一个简单的想法，如果把需要传输给对方的接口报文做成模板，然后通过<code>Liquid</code>语法完成数据的绑定，那么数据映射这一层的工作就可以减轻不少，毕竟写<code>A.XXX=B.XXX</code>这种赋值语句是没什么前途的啦，而<code>AutoMapper</code>则需要提前写好Map并注册，经过一番权衡，我们来验证一下我们的想法吧！</p><p>这段时间一直在和金蝶K3Cloud接口做对接，坦白说我觉得金蝶的接口设计得非常糟糕，从它那个奇葩的<code>FNumber</code>字段就能看出来，而且它试图用一个接口做完所有事情的做法恕我不敢苟同，在我看来它违反了单一职责原则。因为要对接的接口数量多、字段多，我首先根据字段对应关系制作了一份<code>Liquid</code>模板，并根据业务上的需要，用主表(Main) + 明细表(Details)的方式来定义数据，这意味着我接下来只需要根据业务实现不同的数据源即可：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/23/HABb1GTJ3NCwedR.png" alt="基于Liquid的JSON报文模板" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">基于Liquid的JSON报文模板</div>            </figure><p>好了，现在我们使用<code>Liquid</code>的.NET版本<a href="http://dotliquidmarkup.org" target="_blank" rel="noopener">DotLiquid</a>来负责模板的解析和渲染，这个库可以直接通过<code>Nuget</code>安装，可以注意到这个代码非常的简单：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">string</span> <span class="title">RenderTpl</span>(<span class="params"><span class="keyword">string</span> filePath, <span class="keyword">dynamic</span> model</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> content = File.ReadAllText(filePath);</span><br><span class="line">  <span class="keyword">var</span> template = Template.Parse(content);</span><br><span class="line">  <span class="keyword">var</span> output = template.Render(Hash.FromAnonymousObject(model));</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上渲染后的文本就是对方需要的接口报文了，此时，该怎么样就怎么样处理，只需要把这个报文发送给对方就可以了。唯一需要花时间的就是对字段、写绑定，相比写实体类的方式效率要高更多。这种方式的话，我个人觉得更适合分工合作，如果需要数据加字段，那在数据层(Model)里增加就好了，而像改字段映射关系、字段默认值都可以由别人来完成。我一直相信，开发并不是帮别人做越多事情越好，而是可以提供一种能力让别人去做更多的事情，这就是我们常常听到的“赋能”。继续延伸下去的话，传统的MVC其实和<code>Liquid</code>是一个道理，都是根据数据去生成视图，无非是我们这里的”视图”变成了数据报文。</p><h2 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h2><p>通过日常工作中的接口对接这一典型场景，我们引出了“数据交换”的概念，而最低层级的数据交换实际上是接口报文的交换。为此，我们介绍了<code>Liquid</code>模板引擎，它提供的语法可以让我们完成一系列的绑定，顺着这个思路，博主为大家展示了这种想法的可行性。<code>Liquid</code>是一个非常成熟的模板引擎，无论是编写邮件、短信的文本模板，还是轻量级的文本表达式实现，都是一个非常不错的选择。即使是做一个ApiCaller，一定要做一个有头脑的ApiCaller。好了，以上就是这篇博客的全部内容啦，欢迎大家留言，谢谢大家。</p><h2 id="2020-01-09-更新"><a href="#2020-01-09-更新" class="headerlink" title="2020-01-09 更新"></a>2020-01-09 更新</h2><p>在组织JSON中的数组结构时，需要在各元素间添加<code>,</code>，同时最后一个元素不需要<code>,</code>，此时，可以使用以下语法：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"FEntity"</span>: [</span><br><span class="line">  &#123;% <span class="keyword">for</span> Detail <span class="keyword">in</span> Details %&#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"FCOSTID"</span>: &#123;</span><br><span class="line">      <span class="string">"FNumber"</span>: <span class="string">"&#123;&#123;Detail.FCOSTID&#125;&#125;"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"FCOSTDEPARTMENTID"</span>: &#123;</span><br><span class="line">      <span class="string">"FNumber"</span>: <span class="string">"BM000005"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"FINVOICETYPE"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"FTOTALAMOUNTFOR"</span>: &#123;&#123;Detail.FEE_AMOUNT&#125;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> forloop.last == false %&#125;,&#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这里暂且抛开它到底是XML、JSON还是EDI这种细节性的问题，我想我们大概会有一个简单的想法，如果把需要传输给对方的接口报文做成模板，然后通过`Liquid`语法完成数据的绑定，那么数据映射这一层的工作就可以减轻不少，毕竟写`A.XXX=B.XXX`这种赋值语句是没什么前途的啦，而`AutoMapper`则需要提前写好Map并注册，经过一番权衡，我们来验证一下我们的想法吧;因为要对接的接口数量多、字段多，我首先根据字段对应关系制作了一份`Liquid`模板，并根据业务上的需要，用主表(Main) + 明细表(Details)的方式来定义数据，这意味着我接下来只需要根据业务实现不同的数据源即可：;为此，我们介绍了`Liquid`模板引擎，它提供的语法可以让我们完成一系列的绑定，顺着这个思路，博主为大家展示了这种想法的可行性
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="Liquid" scheme="https://qinyuanpei.github.io/tags/Liquid/"/>
    
      <category term="数据交换" scheme="https://qinyuanpei.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/"/>
    
      <category term="模板引擎" scheme="https://qinyuanpei.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Referrer还是Referer? 一个迷人的错误</title>
    <link href="https://qinyuanpei.github.io/posts/2015300310/"/>
    <id>https://qinyuanpei.github.io/posts/2015300310/</id>
    <published>2019-12-04T17:22:33.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>诗人郑愁予曾经在一首诗中写道：<strong>我达达的马蹄是个美丽的错误，我不是归人，是个过客</strong>。而对我来说，十九岁之前的我，一样是个沉浸在诗歌中的文艺少年。十九岁之后的我，作为一名程序员，更多的是邂逅各种错误。可偏偏人类世界对待错误从来都不宽容，所以，<strong>错误本身既不美丽，亦不浪漫</strong>。接近中年的我，无论如何，都写不出年轻时令人惊艳的句子，这或许和我们面对错误时的不同心境，有着莫大的关联，而今天这篇博客，同样要从一个历史上的错误说起。</p><h1 id="因拼写而怀疑人生"><a href="#因拼写而怀疑人生" class="headerlink" title="因拼写而怀疑人生"></a>因拼写而怀疑人生</h1><p>话说，博主这天做了一个非常“简单”的功能，它允许用户通过富文本编辑器来编写HTML，而这些HTML会被插入到页面的特定位置，譬如用户可以为页脚的备案号添加一个超链接，当用户点击备案号的时候，就可以调转到工信部备案号查询的网站上。这个功能非常简单吧，因为这就是HTML中a标签的作用。博主快速了引入UEditor，虽然这个项目百度都不再继续维护了，虽然它直接把跨域问题甩锅给使用者，可我还是完成了这个功能。相信你能感受到我的不情愿吧，显然这不是重点，因为剧情的反转才是……</p><p>结果没高兴多久，测试同事就同我讲，客户提供的地址填进去以后，点击链接浏览器直接返回4XX，可明明这个地址敲到浏览器里就能打开啊……我脑海中快速地浮现出那道经典的面试题，浏览器里敲完地址按下回车的瞬间到底发生了什么？习惯性怀疑人生后，我发现居然是因为Referer的问题，从我们站点调转到客户站点的时候携带了Referer，虽然有很多种方法可以让浏览器禁止携带Referer，但我还是被这种历史性的错误搞得怀疑人生。因为人生最难的事情，就是“揣着明白装糊涂”和“揣着糊涂装明白”，所谓“假作真时真亦假”。</p><p>请注意区分<strong>Referer</strong>和<strong>Referrer</strong>这两个单词，眼尖的人会发现后者多了一个r，这有点像什么呢，大概类似于usr和user。我们总是不情愿地相信这是历史的错误，而固执地想要找到一种能自圆其说的理由。诚然，“前人栽树，后人乘凉”，可我实在不肯承认，这是一群卓越而智慧的先驱们，所创造出的某种高效简写。回顾一下，使用Referer的场合，基本都是在HTTP头部，最常见的场景就是防盗链，Nginx能用Referer判断访问者来源，爬虫就能用Referer和UserAgent伪造访问者身份。那什么时候用Referrer呢？我目前发现是在a标签的rel属性里，例如下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span> <span class="attr">href</span>=<span class="string">"https://www.w3school.com.cn/tags/att_a_rel.asp"</span>&gt;</span>w3school<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，rel属性还支持像nofollow、friend、licence这样的属性，详细地大家可以参考<a href="https://www.w3school.com.cn/tags/att_a_rel.asp" target="_blank" rel="noopener">这里</a>。相信大家想到博主经历了什么了，没错，我就是按照平时的书写习惯写了Referer，然后被Web标准委员会给疯狂地嘲讽了。那么，为什么表达同一个含义的词会有两种写法？为什么有时候要用Referer，而有时候要用Referrer? 这特么到底是怎么一回事儿……带着这些疑问，让我们一起回顾野蛮生长的Web标准，为什么要埋这样一个坑在这里。</p><h1 id="后世不忘，前世之锅？"><a href="#后世不忘，前世之锅？" class="headerlink" title="后世不忘，前世之锅？"></a>后世不忘，前世之锅？</h1><p>故事要追溯到上个世纪90年代，当时HTTP协议中需要有一个用来表示页面或资源来源的请求头部，Philip Hallam-Baker将这个请求头部定义为Referer，并将其写入了<a href="https://datatracker.ietf.org/doc/rfc1945/?include_text=1" target="_blank" rel="noopener">RFC1945</a>，这就是著名的HTTP/1.0协议。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/07/GE2WydKMf6HSk5n.png" alt="HTTP/1.0协议中定义的Referer" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">HTTP/1.0协议中定义的Referer</div>            </figure><p>然而这里发生一件有趣的事情，这个单词实际上是被作者给拼错了，即正确的拼写应该是<code>Referrer</code>。因为发现这个错误时为时已晚，大量的服务端和客户端都采用了这个错误的拼写，谁让它被写到了HTTP协议里呢？这其中就有像Nginx里的<code>ngx_http_referer_module</code>、Django里的<code>HttpRequest.META.HTTP_REFERER</code>等等。考虑到这个错误波及的范围过大，HTTP标准制定者奉决心将错就错，于是在接下来的<a href="https://datatracker.ietf.org/doc/rfc2616/?include_text=1" target="_blank" rel="noopener">RFC2616</a>，即HTTP/1.1中，HTTP标准制定者追加了针对这个错误的说明:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/07/IwMpYPSls485CHx.png" alt="HTTP/1.1协议中定义的Referer" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">HTTP/1.1协议中定义的Referer</div>            </figure><p>说到这里，大家至少明白了一件事情，这个错误的<code>Referer</code>其实是指<code>Referrer</code>。对于标准写错了这件事情，大家其实都能理解，因为只要是人就免不了会出错。可为什么不能一错到底呢？既然要使用<code>Referer</code>这个错误的拼写，那就一直这样错下去好了，为什么特么又冒出来个<code>Referrer</code>，虽然它的拼写的确是对的，可不统一的写法还是会让人抓狂啊！君不见<code>main</code>和<code>mian</code>傻傻分不清，君不见C++里<code>false</code>与<code>flase</code>的神奇宏定义。假如没有今天这个事情，我完全不知道还有<code>Referrer</code>的存在啊，可都拼错多少年了，我都把假当作真了，你突然这样搞，我还是会感到手足无措的啊！就像<code>Configuration</code>这个单词，虽然博主英语并不算太好，可至少敢拍着胸脯说这个单词没写错，结果有次我写对了反而让测试给我提了Bug，因为特么项目里定义的实际上是<code>Configuation</code>。你说，你这样让人崩溃不？</p><p>那么，为什么会有<code>Referrer</code>这个正确的拼写呢？这就要说到<code>Referrer-Policy</code>这个HTTP头部。不错，这次你没有看错，标准制定老爷们这次终于写对了。顾名思义，这是一种用来告诉浏览器应该如何发送Referer的策略。常见的取值有：no-referrer、no-referrer-when-downgrade、origin、origin-when-cross-origin、same-origin、strict-origin、strict-origin-when-cross-origin、unsafe-url，关于它们的含义及用途，大家可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy" target="_blank" rel="noopener">这里</a>。虽然我们经常吐槽JavaScript是一门垃圾语言，但是这一次，大家居然都非常齐心地统一了写法，譬如<code>DOM Level 2</code>里定义的 <code>document.referrer</code>、<code>Fetch API</code>中的<code>Request</code>接口的<code>referrer</code>属性等，这一次都写对了。而Referrer-Policy除了和JavaScript可以集成以外，同样可以和HTML、CSS集成。博主一开始遇到的问题，实际上就是和HTML集成的一个场景。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//meta标签里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"origin"</span>&gt;</span></span><br><span class="line">//出现在a, area, img, iframe, script, <span class="tag">&lt;<span class="name">link</span>&gt;</span>等元素里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">referrerpolicy</span>=<span class="string">"origin"</span>&gt;</span></span><br><span class="line">//出现在a, area, link等标签的rel属性里的'referrer'</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而和CSS集成实际上就是style标签中的<code>referrerpolicy</code>属性，它默认是no-referrer-when-downgrade，我们可以在返回一个CSS文件的时候设置响应流的<code>Referrer-Policy</code>，或者是设置style标签中的<code>referrerpolicy</code>属性，这个就不展开讲啦！</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>通过这次被标准制定者按在地上摩擦的经历，居然无意中收获了这样一段”迷人”的历史。假如JavaScript这里为了兼容历史错误而使用<code>Referer</code>的话，可能博主就不会一边吐槽这个错误，一边又乖乖地滚去读RFC2616。从这里可以得出一个结论：<strong>HTTP 请求中的 Referer 是一个典型的拼写错误，历史悠久，可以预见还会一直错下去，以后 Referer 变成一个专有名词也说不定。所以一般涉及到读取 HTTP 请求头的场景，我们需要用 Referer 这种错误拼写(后端)；除此之外一般都要用 Referrer 这种正确的拼写(前端)</strong>。有人说，使用JavaScript开发同构应用的体验非常好，恐怕从今天这篇博客以后要打个折扣，因为你刚刚在后端写完<code>referer</code>，转眼就要在前端写<code>referrer</code>，希望像博主这样的<code>伪全栈工程师</code>不会因此而精神分裂。实用主义者能用就行的策略，让这个错误在很多年以后还被人提起，假如这些标准制定者尚在人世的话，不知道会不会在浏览网页的时候，想起第一次起草<code>RFC1945</code>的那个下午。果然，历史还真是迷人啊！</p>]]></content>
    
    <summary type="html">
    
      既然要使用`Referer`这个错误的拼写，那就一直这样错下去好了，为什么特么又冒出来个`Referrer`，虽然它的拼写的确是对的，可不统一的写法还是会让人抓狂啊;说到这里，大家至少明白了一件事情，这个错误的`Referer`其实是指`Referrer`;有人说，使用JavaScript开发同构应用的体验非常好，恐怕从今天这篇博客以后要打个折扣，因为你刚刚在后端写完`referer`，转眼就要在前端写`referrer`，希望像博主这样的`伪全栈工程师`不会因此而精神分裂
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="HTTP" scheme="https://qinyuanpei.github.io/tags/HTTP/"/>
    
      <category term="历史" scheme="https://qinyuanpei.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
      <category term="Referrer" scheme="https://qinyuanpei.github.io/tags/Referrer/"/>
    
  </entry>
  
  <entry>
    <title>关于单位转换相关问题的常见思路</title>
    <link href="https://qinyuanpei.github.io/posts/2318173297/"/>
    <id>https://qinyuanpei.github.io/posts/2318173297/</id>
    <published>2019-11-15T09:43:54.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>请原谅我使用了这样一个“直白”的标题，因为我实在想不到更好的描述方法。或许，是因为临近年底的“996”式冲刺，让许久没有读完一本书的我，第一次感受到输出时的闭塞。是时候为自己的知识体系补充新鲜血液啦，而不是输给那些“无聊”的流程和关系。说这句话的缘由，是想到《Unnatural》中的法医三澄美琴，一个视非正常死亡为敌人的女法医。而对程序员来说，真正的敌人则是难以解决Bug和问题。可更多的时间，我们其实是在为流程和关系方面的事情消耗精力。</p><p>我越来越发现，人类所面对的绝大多数问题，都并非是寻求一个最优解，而是在于平衡和牵制。人类总是不可避免地堕入熵增的圈套，伴随着流程产生的除了规范还有复杂度。每当人们试图为这种复杂度找一种友好的说辞的时候，我终于意识到，有的人不愿意去寻找问题的本质，它们需要的就只是一种友好的说辞，仿佛只要有了这种说辞，问题就能自动解决一样。我想，我大概知道这段时间感到焦灼的原因了，因为这样的事情在工作中基本是常态。人类每天面对的事情，无外乎两种：”明知不可为而为之”和”什么都想兼顾的美好理想”。</p><p>我今天想说的是，一个业务中遇到的单位转换的问题，我们平时在存储货物的重量时，默认都是以千克作为单位来存储的，直到我们对接了一家以大宗商品交易作为主要业务的客户，对方要求我们在界面上统一用吨来展示数据，因为这样更符合客户方的使用习惯。按理说，这是一个非常简单的需求，是不需要用一篇博客来说这件事情的，可我觉得这是个有意思的话题，还是想和大家一起来聊聊相关方案的思路。带着问题，我首先拜访了<a href="https://www.c-sharpcorner.com/members/catcher-wong" target="_blank" rel="noopener">Cather Wong</a>大佬，大佬微微一笑，表示在视图层上加个字段就可以了嘛。的确，这是最简单的做法，大概是下面这个样子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OrderInfoQueryDTO</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 以千克为单位的净重</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">decimal</span>? NET_WEIGHT &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 以吨为单位的净重</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">decimal</span>? NET_WEIGHT_WITH_TON</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">get</span> &#123; <span class="keyword">return</span> NET_WEIGHT / <span class="number">1000</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我不甘心地追问，客户要在原来的字段上显示这个数值啊，这样能行吗？大佬稍作沉思，随即问道：“你们公司的项目就算做不到DDD，AutoMapper这种实体间映射转换的东西总有吧！”。我连忙接话道：“这个自然是有的”。其实我心里想的是，总算有点符合我的心理预期啦，这样的方案还像个大佬的样子。按照大佬的提示，使用AutoMapper来做单位的转换，应该是下面这样：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; &#123;</span><br><span class="line">    cfg.CreateMap&lt;order_info, OrderInfoQueryDTO&gt;()</span><br><span class="line">        .ForMember(d =&gt; d.NET_WEIGHT, opt =&gt; opt.MapFrom(x =&gt; x.NET_WEIGHT/<span class="number">1000</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样看起来是比加字段要好一点，可实际项目中，我们往往会把单位作为一种配置持久化到数据库中，以我们公司为例，我们实际上是支持千克和吨两种单位混合使用的，不过在表头汇总的时候，为了统一到一起，所以使用了千克作为单位。这样就引申出一个新问题，假如我在数据库里存了多行明细的重量，当需要在表头展示汇总以后的总重量，那么，这个总重量到底是汇总好存在数据库里，还是展示的时候交由调用方Sum()呢？</p><p>我个人倾向于第二种，因为它能有效避免表头和明细行数据不一致的问题，当然缺点是给了调用方一定的计算压力。我们项目中采用的第一种方案，我印象非常深刻，在计算件数、重量和体积的时候，必须要等所有明细行都计算完以后，再通过调用Sum()方法给表头赋值，实际上这个表头字段，完全可以通过只读属性的方式取值啊，更何况我们还使用了外键，表头实体本身就引用了明细表实体，因为有外键的存在，序列化表头实体的时候会出现循环引用，对此，我想说，干得漂亮！</p><p>通过AutoMapper中的ForMember扩展方法，可以实现我们这里这个功能。可考虑到要在AutoMapper里引入权限啊、角色啊这些东西，AutoMapper作为实体映射的纯粹性就被彻底破坏了。为此，我们考虑使用AutoMapper中提供的<a href="https://docs.automapper.org/en/stable/Value-converters.html" target="_blank" rel="noopener">Value Converters</a>和<a href="https://docs.automapper.org/en/stable/Value-converters.html" target="_blank" rel="noopener">Type Converters</a>。关于这两者的区别，大家可以参考官方文档中的描述。此时，我们可以通过下面的方式使用这些“转换器”：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> MapperConfiguration(cfg =&gt; &#123;</span><br><span class="line">    cfg.CreateMap&lt;order_info,OrderInfoQueryDTO&gt;()</span><br><span class="line">      .ForMember(d =&gt; d.NET_WEIGHT, opt =&gt; opt.ConvertUsing&lt;WeightValueConverter,<span class="keyword">decimal</span>?&gt;());</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> mapper = config.CreateMapper();</span><br><span class="line"><span class="keyword">var</span> orderInfo = <span class="keyword">new</span> order_info() &#123;</span><br><span class="line">    ORDER_ID = Guid.NewGuid().ToString(<span class="string">"N"</span>),</span><br><span class="line">    NET_WEIGHT = <span class="number">1245.78</span>M,</span><br><span class="line">    CREATED_DATE = DateTime.Now,</span><br><span class="line">    CREATED_BY = <span class="string">"灵犀一指陆小凤"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> orderInfoQueryDTO = mapper.Map&lt;order_info,OrderInfoQueryDTO&gt;(orderInfo);</span><br></pre></td></tr></table></figure><p>而对于WeightValueConverter这个类而言，它实现了IValueConverter接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> public class WeightValueConverter : IValueConverter&lt;decimal?, decimal?&gt; </span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">decimal</span>? Convert (<span class="keyword">decimal</span>? sourceMember, ResolutionContext context) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//TODO：可以查数据库或者是由规则决定，是否转换以及如何转换</span></span><br><span class="line">        <span class="keyword">if</span> (!sourceMember.HasValue)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> sourceMember.Value / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，虽然代码还是这个代码，可至少我们不用在MapFrom里写太重的业务逻辑了，而且这个转换器是可以复用的。显然，我们的系统中不会只有订单模块会涉及到重量、体积的转换。此时，我们可以考虑使用ITypeConverter接口，遗憾地是，这个接口在实现的时候就必须指定源类型和目标类型，这样离我们设想地全局转换器实际上是有一点差距的。例如，我们有时候希望源类型中Null值不会覆盖到目标类型，最常见的情况是，从一个EditDTO转化为数据库实体对象并更新数据库。为了解决这个问题，AutoMapper下面的做法就非常棒：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfg.ForAllMaps((a, b) =&gt; b.ForAllMembers(opt =&gt; opt.Condition((src, dest, sourceMember) =&gt; sourceMember != <span class="literal">null</span>)));</span><br></pre></td></tr></table></figure><p>可对于我们这里这个场景，显然，我们必须要提供一部分类型信息，我们几乎很难给所有的Map增加一个通用的类型转换器。我最终还是通过反射解决了这个问题，即在使用AutoMapper前，从数据库查出数据后，首先要做的第一件事情就是对数值进行转换：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userSetting = UserContext.GetLoginUser().UserSettng;</span><br><span class="line"><span class="keyword">var</span> formatSetting = userSetting.FormatSetting;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当默认重量单位为KG时不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (formatSetting.DefaultWeightUom == WeightUnit.KG)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> properties = <span class="keyword">typeof</span>(TDestination).GetProperties()</span><br><span class="line">    .Where(p =&gt; p.Name.EndsWith(<span class="string">"WEIGHT"</span>) || p.Name.EndsWith(<span class="string">"Weight"</span>));</span><br><span class="line"><span class="keyword">if</span> (properties == <span class="literal">null</span> || !properties.Any())</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> destList)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//转化结果为吨</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> property <span class="keyword">in</span> properties)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">var</span> weightValue = property.GetValue(item, <span class="literal">null</span>);</span><br><span class="line">         <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(<span class="keyword">decimal</span>))</span><br><span class="line">         &#123;</span><br><span class="line">             property.SetValue(item, (<span class="keyword">decimal</span>)weightValue / <span class="number">1000</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(Nullable&lt;<span class="keyword">decimal</span>&gt;))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (weightValue != <span class="literal">null</span>)</span><br><span class="line">                  property.SetValue(item, (<span class="keyword">decimal</span>)weightValue / <span class="number">1000</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(property.PropertyType == <span class="keyword">typeof</span>(<span class="keyword">string</span>))</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(weightValue.ToString()))</span><br><span class="line">                 property.SetValue(item, <span class="keyword">decimal</span>.Parse(weightValue.ToString()) / <span class="number">1000</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，这段代码相当无聊，可无论多么无聊的功能，只要客户觉得好就给积极地去做，对吧！其实，说到底，这是我们在设计数据库表结构时遗留的一个问题。假如我们在存储的时候就存储为吨，问题还不会有什么不一样呢？实际上，它还是会有问题，因为你不得不去设计一个单位转换表，类似下面这样的：</p><table><thead><tr><th>原始单位</th><th>目标单位</th><th>进率</th></tr></thead><tbody><tr><td>Kg</td><td>T</td><td>1/1000</td></tr><tr><td>T</td><td>Kg</td><td>1000</td></tr><tr><td>g</td><td>Kg</td><td>1/1000</td></tr><tr><td>Kg</td><td>g</td><td>1000</td></tr></tbody></table><p>我们目前设计的表结构中实际上是有重量单位的，不同的是，我们以千克为单位存储的量，数据库中对应的WEIGHT_UOM存储的是1，而以吨为单位存储的量，数据库中对应的WEIGHT_UOM存储的是1000。所以，理论上真实的重量都应该是数据库中存储的量 X WEIGHT_UOM。这样看起来是没有问题的，可当你结合今天这篇博客的背景来看是，就会发现一个问题，所有的数值在展示的时候都必须要知道，数据库里存储的数值的原始单位是什么，而使用者希望在界面上看到的数值的单位又是什么。</p><p>不单单如此，当用户通过界面查询的时候，一个简单的数字便不等再用简单地使用像大于、小于、等于、不等于这样的查询条件，因为现在每个量都带着单位，你必须明确得知道，用户认为的单位是什么，而数据库里对应的单位又是什么？这样听起来貌似还是统一使用一种单位比较好，正因为如此，博主可以在查询前把吨转化为千克，而在查询后则可以把千克转换为吨。</p><p>人类世界总是存在着这些奇奇怪怪的规则，不同的小数位精度要求，不同的货币金额展示方式，不同的日期格式显示要求，就在我写下这篇博客的时候，产品同事反馈我千克转成吨展示以后，应该至少保留三位小数，否则会让人觉得数字会丢失了精度。我还能说什么呢？联想到最近软通因为加班而猝死的同行，我大概只能说一句：<strong>恭喜你，还请节哀顺变，欢迎来到无法随心所欲的爱与欲望的世界！</strong>作为拖延症中晚期的博主，努力写完每月一篇的博客，抽空读读书、看看电影，这已然是种简单的幸福了呢！好了，这篇博客就先写到这里！</p>]]></content>
    
    <summary type="html">
    
      我今天想说的是，一个业务中遇到的单位转换的问题，我们平时在存储货物的重量时，默认都是以千克作为单位来存储的，直到我们对接了一家以大宗商品交易作为主要业务的客户，对方要求我们在界面上统一用吨来展示数据，因为这样更符合客户方的使用习惯;我最终还是通过反射解决了这个问题，即在使用AutoMapper前，从数据库查出数据后，首先要做的第一件事情就是对数值进行转换：;这样看起来是没有问题的，可当你结合今天这篇博客的背景来看是，就会发现一个问题，所有的数值在展示的时候都必须要知道，数据库里存储的数值的原始单位是什么，而使用者希望在界面上看到的数值的单位又是什么
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="数据库" scheme="https://qinyuanpei.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="单位" scheme="https://qinyuanpei.github.io/tags/%E5%8D%95%E4%BD%8D/"/>
    
      <category term="设计" scheme="https://qinyuanpei.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Valine搭配Server酱实现博客评论推送</title>
    <link href="https://qinyuanpei.github.io/posts/369095810/"/>
    <id>https://qinyuanpei.github.io/posts/369095810/</id>
    <published>2019-11-06T18:15:14.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>是一个基于<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>的评论系统，在很长的一段时间里，一直作为多说、<a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>等等的一个替代品，博主所使用的评论系统实际上就是Valine，虽然独立博客的整体活跃度无法媲美专业博客，可还是想在这纷扰的世界里有自己的一方天地啊。多说评论的关闭，某种意义上来说，是很多90后站长们关于互联网的集体记忆，因为从博主搭建第一个WordPress博客的时候，多说就一直作为首选的评论系统而存在。那个时候通过多说就能接入主流的社交媒体，对于一个还不大会编写Web应用的博主来说，此刻想来实在是有种时过境迁的感觉。所以，Valine作为一个相当优秀的评论系统，凭借着简洁大方的界面和开箱即用的优势，在这个时间点进入人们的视野，我们就不难理解，为什么它会成为博客作者们的“新宠”。</p><p>Valine本身是利用LeanCloud的数据存储SDK来实现评论的读写的，所以，它相对于“多说”这种第三方的服务，在数据安全性上更有保障一点，虽然“多说”在关闭评论服务以前，提供了导出JSON格式评论信息的功能。可话说回来，以国内这种“敏感”的网络环境，其实没有一家云服务提供商敢打这样的包票，像阿里云、LeanCloud、七牛云存储这些服务，都曾经出现过宕机或者封杀域名的事情，所以，趁着数据还在自己手上，尽可能地做好备份工作吧！Valine本身并没有提供评论推送的功能，我还是挺怀念过去“多说”推送评论到邮箱的功能。虽然<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>这个项目提供了类似的功能，但我感觉使用起来并不顺手，尤其是配置邮箱的时候，国内像QQ、163这些都非常麻烦，遇到一两个废弃的手机号，你就会发现短信验证码，是件多么尴尬而繁琐的事情，如同扫码使用的共享电话一般魔幻。</p><p>为了解决这个问题，我想到了Valine搭配Server酱实现评论推送的方案。首先，Valine是基于LeanCloud而开发的，用户发表评论实际上就是向<code>Comment</code>表插入记录。因此，我们可以利用LeanCloud提供的<a href="https://leancloud.cn/docs/leanengine_cloudfunction_guide-node.html#hash1095356413" target="_blank" rel="noopener">Hooks</a>来捕获写入评论的事件。所谓“Hooks”呢，通俗地说就是数据库里触发器的概念，我们可以在数据写入前后做点“小动作”。而<a href="http://sc.ftqq.com/" target="_blank" rel="noopener">Server酱</a>则是一个消息推送服务，它提供了一个基于HTTP的请求接口，通过这个接口，我们就能实现向微信推送消息，前提是关注“方糖”公众号。关于Server酱的原理大家可以进一步去看它的<a href="http://sc.ftqq.com/?c=code" target="_blank" rel="noopener">文档</a>，我们这里只需要考虑怎么样把它们结合起来，这就是工程师和科学家的区别所在[doge]。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/DlxWPgGNoKMVeOw.png" alt="运行在Valine云引擎中代码" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">运行在Valine云引擎中代码</div>            </figure><p>LeanCloud提供了一个称作“云引擎”的环境，它可以提供运行比如Nodejs、Python等等的环境，实际上，<a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>这个项目就是用Nodejs编写的，你可以理解为，只要你的应用符合它的规范，就能在它的环境里运行，这就是所谓的“FAAS”(函数即软件)和“BAAS”(后端即软件)。所以，说白了我们就是想利用它这个“云引擎”来调用Server酱的接口，幸运的是，LeanCloud提供的Hooks目前是支持Nodejs的，所以，到这里思路就非常清晰了，我们给<code>Comment</code>这张表加一个<code>AfterSave</code>类型的Hooks，在保存完以后调用Server酱接口推送评论信息即可。创建Hooks是在部署-&gt;云引擎选项下，我们来看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">AV.Cloud.afterSave(<span class="string">'Comment'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = request.object;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'收到一条新的评论：'</span> + <span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> title = <span class="string">"收到一条新的评论"</span>;</span><br><span class="line">  <span class="keyword">var</span> url = request.object.get(<span class="string">'url'</span>);</span><br><span class="line">  <span class="keyword">var</span> nick = obj.get(<span class="string">'nick'</span>);</span><br><span class="line">  <span class="keyword">if</span> (nick == <span class="string">'Anonymous'</span>)&#123;</span><br><span class="line">      nick = <span class="string">'陌生人'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> comment = obj.get(<span class="string">'comment'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> content = nick + <span class="string">"给你留言：\n\n"</span> + comment + <span class="string">"\n\n详情请访问：\n\n"</span> + url;</span><br><span class="line">  <span class="keyword">var</span> options = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>,</span><br><span class="line">    url: <span class="string">'https://sc.ftqq.com/&lt;在这里输入你的token&gt;.send'</span>,</span><br><span class="line">    qs: &#123; </span><br><span class="line">        text: title,</span><br><span class="line">        desp: content</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123; &#125; </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  http(options, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(error);</span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里主要利用了Nodejs中的<code>requests</code>模块来发送HTTP请求，其中token是Server酱经过Github授权以后获得的，具体可以参考Server酱的<a href="http://sc.ftqq.com/?c=code" target="_blank" rel="noopener">文档</a>。这里有一点要注意，Comment表里的记录是无法区分发出人的，因为有时候我们可能忘记填写邮箱或者昵称，所以，目前只要写入记录都会发送消息到手机。这个消息模板是Server酱作者提供的，我们无法对它的样式进行自定义，收到消息以后需要点击查看详情。不过，我认为这个方案可以满足我的日常使用，因为博客的评论数量并不多，而Servet酱的接口调用次数完全足够。免费的LeanCloud实例虽然会强制休眠，只要大部分时间能覆盖到就可以啦，谁让这些东西都是免费的呢，博主表示已经相当知足啦，哈哈！好了，看看消息推送到手机的效果吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/BSsu4cPFe1ZvhGN.png" alt="博客评论推送到手机上的展示效果" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">博客评论推送到手机上的展示效果</div>            </figure><p>如果大家想调整消息的格式，参考文章中给出的代码即可，每次调整完可以直接部署到线上，这是我在这个过程中体验到的Serverless的魅力，相比我们中华田园式的996敏捷开发，这种方式真的能缩短部署的周期。我还是那句话，敏捷开发是大家一起敏捷，不是只有开发苦哈哈地加班加点干活，快速交付的前提是基础设施完善，具备自动化测试、自动化部署的能力，让开发安心地写代码比什么都重要，就像LeanCloud里提供的云函数和Hooks，开发写完代码就能自动部署，这是真正的敏捷、真正的灵活。好了，这篇博客就先写到这里。想试试博主能不能第一时间收到你们的留言？欢迎在博客评论区留下你的足迹，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      所以，说白了我们就是想利用它这个“云引擎”来调用Server酱的接口，幸运的是，LeanCloud提供的Hooks目前是支持Nodejs的，所以，到这里思路就非常清晰了，我们给`Comment`这张表加一个`AfterSave`类型的Hooks，在保存完以后调用Server酱接口推送评论信息即可;[Valine](https://valine.js.org/)是一个基于[LeanCloud](https://leancloud.cn)的评论系统，在很长的一段时间里，一直作为多说、[Gitalk](https://gitalk.github.io/)、[Gitment](https://github.com/imsun/gitment)等等的一个替代品，博主所使用的评论系统实际上就是Valine，虽然独立博客的整体活跃度无法媲美专业博客，可还是想在这纷扰的世界里有自己的一方天地啊;Valine本身是利用LeanCloud的数据存储SDK来实现评论的读写的，所以，它相对于“多说”这种第三方的服务，在数据安全性上更有保障一点，虽然“多说”在关闭评论服务以前，提供了导出JSON格式评论信息的功能
    
    </summary>
    
      <category term="独立博客" scheme="https://qinyuanpei.github.io/categories/%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Valine" scheme="https://qinyuanpei.github.io/tags/Valine/"/>
    
      <category term="Server酱" scheme="https://qinyuanpei.github.io/tags/Server%E9%85%B1/"/>
    
      <category term="评论" scheme="https://qinyuanpei.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>浅析网站PV/UV统计系统的原理及其设计</title>
    <link href="https://qinyuanpei.github.io/posts/3494408209/"/>
    <id>https://qinyuanpei.github.io/posts/3494408209/</id>
    <published>2019-10-22T12:50:49.000Z</published>
    <updated>2020-07-10T02:33:20.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>国庆节前有段时间，新浪的“图床”一直不大稳定，因为新浪开启了防盗链，果然免费的永远是最贵的啊。为了不影响使用，我非常粗暴地禁止了浏览器发送Referer，然后我就发现了一件尴尬的事情，“不蒜子”统计服务无法使用了。这是一件用脚后跟想都能想明白的事情，我禁止了浏览器发送Referer，而“不蒜子”正好使用Referer来识别每个页面，所以，这是一个再明显不过的因为需求变更而引入的Bug。这个世界最离谱的事情，就是大家都认为程序员是一本“十万个为什么”，每次一出问题就找到程序员这里。其实，程序员是再普通不过的芸芸众生里的一员，人们喜欢听/看到自己愿意去听/看到的事物，而程序员同样喜欢解决自己想去解决的问题。所以，今天的话题是关于如何设计一个PV/UV统计系统。OK，Let’s Hacking Begin。</p><h1 id="PV-UV的概念"><a href="#PV-UV的概念" class="headerlink" title="PV/UV的概念"></a>PV/UV的概念</h1><p>首先，我们从两个最基本的概念PV和UV开始说起。我们都知道，互联网产品的核心就是流量，前期通过免费的产品吸引目标客户的目的，在积累了一定用户流量以后，再通过广告等增值服务实现盈利，这可以说是互联网产品的典型商业模式啦。而在这个过程中，为了对一个产品的流量进行科学地分析，就产生了譬如访客数(<strong>UV</strong>)、浏览量(<strong>PV</strong>)、访问次数(<strong>VV</strong>)等等的概念，这些概念通常作为衡量流量多少的指标。除此以外，我们还有类似日活跃用户(<strong>DAU</strong>)、月活跃用户(<strong>MAU</strong>)等等这种衡量服务用户粘性的指标，以及平均访问深度、平均访问时间、跳出率等等这种衡量流量质量优劣的指标。如果各位和我一样都写博客的话，对这些概念应该都不会感到陌生，因为我们多多少少会使用到诸如<a href="https://ziyuan.baidu.com/site/index" target="_blank" rel="noopener">百度站长</a>、<a href="https://www.umeng.com/" target="_blank" rel="noopener">站长统计</a>、<a href="https://ta.qq.com/#/" target="_blank" rel="noopener">腾讯统计</a>、<a href="https://developers.google.cn/analytics/devguides/reporting/?hl=zh-cn" target="_blank" rel="noopener">Google Analytics</a>这样的统计服务，这些统计服务可以让我们即时掌握博客的访问情况。博主目前使用了<a href="https://ta.qq.com/#/" target="_blank" rel="noopener">腾讯统计</a>来查看整个博客的流量情况，而每一篇博客的访问量则是通过<strong><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">“不蒜子”</a></strong>这个第三方服务，这里再次对作者表示感谢。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/24/VN2ubT71aLK6eZp.png" alt="使用腾讯统计来查看网站的流量情况" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">使用腾讯统计来查看网站的流量情况</div>            </figure><p>回到问题本身，PV，即<strong>Page View</strong>，<strong>表示页面浏览量或者点击量，每当一个页面被打开或者被刷新，都会产生一次PV，只要这个请求从浏览器端发送到了服务器端</strong>。聪明的各位肯定会想到，如果我写一个爬虫不停地去请求一个页面，那么这个页面的PV不就会一直增长下去吗？理论上的确是这样，所以，我们有第二个指标UV，来作为进一步的参考，所谓UV，即<strong>Unique Visitor，表示独立访客数</strong>。在上面这个问题中，尽管这个页面的PV在不断增长，可是因为这些访客的IP都是相同的，所以，这个页面只会产生一次UV，这就是PV和UV的区别。所以，我们结合这两个指标，可以非常容易得了解到，这个页面实际的访问情况是什么样的。这让我想起数据分析中的一个例子，虽然以统计学为背景的数学计算不会欺骗人类，可如果人类片面地相信某一个方面的分析结果，数据分析一样是带有欺骗性的。就像有人根据《战狼2》和《前任3》两部电影的观众购买冷/热饮的情况，得出下面的结论：<strong>看动作片的观众更喜欢喝冷饮来清凉紧绷着的神经，而看爱情片的观众更喜欢喝热饮来温暖各自的内心</strong>。其实想想就知道这里混淆了因果性和相关性，选择冷饮还是热饮无非是两部电影上映的季节不同而已。</p><h1 id="如何设计一个访问统计系统"><a href="#如何设计一个访问统计系统" class="headerlink" title="如何设计一个访问统计系统"></a>如何设计一个访问统计系统</h1><p>OK，了解了PV和UV的概念后，我们来思考如何去设计一个访问统计系统，这是今天这篇博客的主题内容。我知道，如果问如何设计一个访问系统，大家可能都会不由自主地想到建两张表。的确，这是最简单的做法。可问题是，我们对于PV的认识，其实一直都在不断地变化着。比如PV的定义是是一个页面被打开或者被刷新时视为一次有效PV，所以，我们通常的做法是在页面底部嵌入JavaScript脚本，这种方式一直工作得非常好。可在引入AJAX以后，用户几乎不会主动去刷新页面，那么，在这个过程中用户点击<strong>更多</strong>或者使用<strong>下拉刷新</strong>时，是否应该算作一次有效PV呢？甚至在PC端网页逐渐式微以后，越来越多的工作转移到手机等移动设备上来，越来越多的原生+Web混合App或者是单页面应用(<strong>SPA</strong>)或者是渐进式应用(<strong>PWA</strong>)，此时我们又该如何认识PV呢？微信公众号里的PV甚至更为严格，必须通过微信内置的浏览器访问才能算作一次有效PV。</p><p>可以发现，我们对PV的认识其实一直在不断的变化着，更多的时候，我们想追踪的并非页面被加载(<strong>Page Load</strong>)的次数，而是页面被浏览(<strong>Page View</strong>)的次数。这时候，我们可以Page Visiblity和History API结合的方式。前者在页面的visibilityState可见或者由隐藏变为可见时发送一次Page View，而后者则是在浏览器地址发生变化的时候发送一次Page View。这听起来非常像单页面应用(<strong>SPA</strong>)里前端路由的那套玩法，的确，当一个地址中的pathname或者search部分发生变化时，应该发送一次Page View请求，而hash部分的变化则应该忽略，因为它表示的是应用内部页面的跳转。对于页面的visibilityState由隐藏变为可见，不同的人有不同的看法，因为有时我们像合并多次Page View，而有时候则想通过Page View了解所谓的”回头客“，所以，这里面还可以继续引入Session的概念，比如Google Analytics默认会在30分钟内无交互的情况下结束。所以，这个问题要考虑的东西实际上比想象中的要多。</p><p>现在，我们至少可以前端部分达成共识，即通过在前端页面上埋点的方式收集PV和UV。就像我们设计一个Page View的表结构会非常简单，而一旦要开始考虑Unique Visitor，可能我们就需要收集诸如IP、省市、UA等等的信息，这些信息的数量会非常大，而Page View的数据规模实际上取决于一个站点下有多少个页面。所以，这些数据在后端要怎么样处理，这是我们接下来要去考虑的问题。直接去写数据库是万不得已的做法，因为如果你处理不好并发的问题，这些统计数据的正确性就会让人产生怀疑，所以，接下来，我们介绍三种不同的方法来处理这类问题，它们分别是：通过Nginx的access_log实现统计、通过Redis的Hyperlog实现统计，以及通过LeanCloud的Hook实现统计。同大家一样，我是第一次考虑这类问题，如果有什么不周到的地方，希望大家可以谅解。</p><h2 id="通过Nginx的access-log实现统计"><a href="#通过Nginx的access-log实现统计" class="headerlink" title="通过Nginx的access_log实现统计"></a>通过Nginx的access_log实现统计</h2><p>我们首先来介绍Nginx的access_log，顾名思义，这是Nginx的访问日志，由ngx_http_log_module模块提供相应功能。Nginx会把每一个用户访问网站的日志信息记录到指定文件里，从而帮助网站提供者分析用户的浏览行为。而PV/UV则是分析用户的浏览行为的最基础指标，所以，通过Nginx的访问日志来统计UV和PV是再合适不过的啦！在Nginx里主要使用<code>log_format</code>和<code>access_log</code> 两条指令来完成相关的配置。这里以博主自己使用的配置为例来说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log_format main '$remote_addr - $remote_user [$time_iso8601] "$request" '</span><br><span class="line">                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">                  </span><br><span class="line">access_log logs/access.log main;</span><br></pre></td></tr></table></figure><p>可以注意到，我们在这里首先通过<code>log_format</code>命令定义了一个日志格式，而这个日志格式则被定义为main，这表示我们我们可以在Nginx的配置文件中定义多个日志格式。它其实就是一个日志模板，相信大家在使用NLog、Log4Net这类日志库的时候，都接触过Layout这个概念，这里就是Nginx中访问日志的Layout。那么，在定义了这样一个日志格式以后，我们该怎么使用这个日志格式呢？这就要说到下面的<code>access_log</code>指令，它的基本用法就是一个路径 + 一个模板，在这里我们使用了定义好的main模板，然后指定了日志路径为：\logs\localhost.access_log.log。当然啦，大家使用NLog和Log4Net时，日志对应的Layout中都会有“变量”这样的概念，同样地，在Nginx中我们有一些常用的“变量”：</p><table><thead><tr><th>Nginx日志变量</th><th align="left">说明</th></tr></thead><tbody><tr><td>$remote_addr</td><td align="left">记录访问网站的客户端地址</td></tr><tr><td>$http_x_forward_for</td><td align="left">当前端有代理服务器时，设置Web节点记录客户端地址的配置</td></tr><tr><td>$remote_user</td><td align="left">远程客户端用户名称</td></tr><tr><td>$time_local</td><td align="left">记录带时区的访问时间</td></tr><tr><td>$request</td><td align="left">记录用户HTTP请求起始行信息</td></tr><tr><td>$status</td><td align="left">记录用户HTTP请求状态码</td></tr><tr><td>$body_bytes_sents</td><td align="left">记录服务端返回给客户端响应Body字节数</td></tr><tr><td>$http_referer</td><td align="left">记录本次请求是从哪一个链接访问过来的</td></tr><tr><td>$http_user_agent</td><td align="left">记录客户端类型信息，比如Chrome、微信等等</td></tr></tbody></table><p>为什么说这些时最常用的“变量”呢？因为通过这些，我们想要统计PV和UV的想法就能变成现实，关于更多的Nginx日志变量，大家可以从这里来了解：<a href="http://nginx.org/en/docs/http/ngx_http_log_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_log_module.html</a>。现在，通过Nginx托管一个简单的静态页面，然后在浏览器中访问：localhost:9090，此时，我们应该可以在前面设置的日志路径里找到Nginx生成的日志文件，它大概长下面这个样子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/10/24/sGT7QYRWariKDHz.png" alt="Nginx日志长什么样子" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">Nginx日志长什么样子</div>            </figure><p>OK，现在有日志文件啦，这PV/UV到底从哪里来呢？其实，到这里已经无所谓用什么方法啦，因为你可以用ELK全家桶把给它收集了去，或是选一门你喜欢的语言用正则给它匹配出来，这都完全没有问题，无非就是一个工具选择的问题。为了简单起见，我们直接用Shell命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">统计指定页面的PV</span></span><br><span class="line">grep / localhost.access.log | wc -l</span><br><span class="line">grep /favicon.ico localhost.access.log | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">统计站点PV</span></span><br><span class="line">awk '&#123;print $6&#125;' localhost.access.log | wc -l #$6表示模板中的第6个变量，即Referer</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">统计访客IP</span></span><br><span class="line">awk '&#123;print $1&#125;' localhost.access.log | sort -r |uniq -c |wc -l #$1表示模板中第一个变量，即客户端IP</span><br></pre></td></tr></table></figure><p>至此，我们就达到了基于Nginx访问日志实现PV/UV统计的目的。我知道有同学要问啦，你不是说要在前端通过埋点的方式来收集访客的信息吗，你这说了半天，完全就是说Nginx的事情嘛！的确，我们现在可以统计出自己网站的PV/UV了，可如果我们想对外提供一个访问统计的服务，我们又该如何做呢？这里简单分享下博主的思路，因为开发环境一直不是很稳定，所以，一直没有时间动手去实践(逃。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/25/DBj7SxOa8qf1FZH.png" alt="一种PV/UV统计的思路" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">一种PV/UV统计的思路</div>            </figure><p>通过这张图片，我们可以大致梳理出整个流程，即前端页面中通过JavaScript来调用后端提供的Analysis Service，此时这个请求会携带一个Referer信息，而这个Referer对应被访问的站点。注意到这个后端服务经过了一层Nginx转发，显然Nginx可以获得客户端的IP地址，这两个结合起来，表示的就是某个IP访问了某个站点，即PV。像百度站长和腾讯统计会在页面中注入一个token或者Id，主要用途就是确保请求的确是从当前站点中发出的，这就是这类访问统计产品统计的原理。也许在计算PV/UV的算法上存在差异，然而核心的原理应该没多大差别啦！</p><h2 id="通过Redis的HyperLogLog实现统计"><a href="#通过Redis的HyperLogLog实现统计" class="headerlink" title="通过Redis的HyperLogLog实现统计"></a>通过Redis的HyperLogLog实现统计</h2><p>不知道大家有没有发现，统计PV其实蛮简单的，因为它只需要对访问量做更新即可。可统计UV就会有点麻烦啦，因为同一个人可以多次访问同一篇文章。有时候我们希望统计一天内的访客数，而有时候我们希望统计一周甚至一个月内的访客数，所以，UV并不像PV那样简单，PV更多的时候是作为一种“汇总”数据，而UV则有“实时”的属性。简而言之，我们需要一张表来记录访客数据，博主在设计这张表的时候，更是引入了地理位置、UserAgent等等相关的字段设计，因为我们会有了解访客来源、访客设备等等一系列“行为”相关的数据记录。对应到数据库的概念，VisitorRecored这张表实际上是在不停地写入记录的。那么，面对每一个查看实时访客数的请求，我们真的要每次都要去这张表里统计一遍吗？也许我们会想到使用数据库任务去做定时的汇总，或者是任意形式的定时任务譬如CORN、Hangfire，在这里，我们有更好的选择——HyperLogLog。</p><p>什么是HyperlLogLog呢？我们提到的统计UV的这个场景，实际上是一个基数计数(Cardinality Counting)的问题，即统计一个集合中不重复的元素个数，例如集合{1,3,5,7,5,7,8}的基数为5。所以，HyperLogLog实际上就是一个在误差允许的范围内，快速统计元素数目的算法。为什么说是误差允许范围内呢？因为它来源于一个经典的概率分布——伯努利分布。高中时候，老师讲到这个知识，我们笑称它为“白努力”，因为有一段时间，排列组合属于我怎么学都学不会东西，可不就是白努力吗？HyperLogLog是在LogLog的基础上优化的一种算法，它主要的改进是采用了桶算法作为每一轮伯努利实验的估计值，同时使用调和平均数代替平均数，进而求出最终的估算值。它可以在不存储整个集合的情况下，使用极小的内存统计出集合元素的个数。</p><p>对应到Redis里，主要体现在PFADD、PFCOUNT、PFMERGE三个命令上。</p><ul><li>PFADD：将多个值存入指定的HyperLogLog。</li><li>PFCOUNT：获取指定HyperLogLog的基数。</li><li>PFMERGE：合并多个HyperLogLog，合并前与合并后的基数一致(取并集)。</li></ul><p>博主在写这篇博客的时候，基于LeanCloud的访问统计<a href="">LeanCloud-Counter</a>已经再线上运行了一段时间。下面，我们就以这些数据为例来展示下HyperLogLog的用法。为了方便起见，我选择使用Python来读写Redis：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接Redis</span></span><br><span class="line">r = redis.Redis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询访客记录</span></span><br><span class="line">VisitorRecord = leancloud.Object.extend(<span class="string">'VisitorRecord'</span>)</span><br><span class="line">query = VisitorRecord.query</span><br><span class="line">query.limit(<span class="number">1000</span>)</span><br><span class="line">queryResults = query.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个页面使用PFADD</span></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> queryResults:</span><br><span class="line">    r.pfadd(result.get(<span class="string">'page_url'</span>),result.get(<span class="string">'visitor_ip'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用PFCOUNT返回每个页面的基数</span></span><br><span class="line">pageUrls = list(set(map(<span class="keyword">lambda</span> x:(x.get(<span class="string">'page_url'</span>),x.get(<span class="string">'page_title'</span>),r.pfcount(x.get(<span class="string">'page_url'</span>))), queryResults)))</span><br><span class="line">pageUrls = sorted(pageUrls,key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">print(pageUrls[<span class="number">0</span>:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>运行完脚本，我们可以统计出访客数目：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/26/JxUQ9s1EiOlVBCY.png" alt="使用HyperLogLog统计访客数目" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">使用HyperLogLog统计访客数目</div>            </figure><h2 id="通过LeanCloud的Hooks实现统计"><a href="#通过LeanCloud的Hooks实现统计" class="headerlink" title="通过LeanCloud的Hooks实现统计"></a>通过LeanCloud的Hooks实现统计</h2><p>像Hexo、Jekyll这类静态博客，本质上是非常依赖Valine、不蒜子等等的第三方服务，而使用LeanCloud作为访问量统计的服务提供商，更是早就在博客圈子里流行了。不过我注意到，这些设计都少都会有一点不足，那就是网上的各种设计都没有实现站点的PV/UV统计。当我被迫从”不蒜子“上迁移过来以后，我其实非常想实现一个和”不蒜子“一模一样的统计服务，因为这样子的话，我对博客的修改会非常非常小。所以， 我不得不在现有方案上扩展更多的功能，实现单篇文章的UV、整个站点的PV/UV、访客IP/地理位置、客户端UA等的统计功能。</p><p>在这个过程中，我发现LeanCloud不支持传统关系型数据库里的Sum()操作，而我更不想在客户端通过分页去对表记录做Sum()操作。官方提供了离线分析和云函数，可这两个东西都是商业版里支持的东西。最终我找到了，通过Hooks来实现站点PV/UV统计的这样一种方法。所谓Hooks，你可以理解为传统关系型数据库里的触发器，它可以在你更新或者插入某个对象的时候，去做一点额外的工作。所以，单篇文章会根据文章链接+访客IP生成一条UV，而PV则是每次打开文章就视为一条PV。所以，最终的方案是插入访客记录(<strong>VisitorRecord</strong>)时更新文章的对应的访问次数(<strong>VisitorCounter</strong>)，而单篇文章的更新则会触发站点UV/PV的更新。听起来有点绕人，我们直接来看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建访客记录时，更新对应的UV记录</span></span><br><span class="line">AV.Cloud.afterSave(<span class="string">'VisitorRecord'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">    <span class="keyword">var</span> page_url = request.object.get(<span class="string">'page_url'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'query page_url: '</span> + page_url);</span><br><span class="line">    query.equalTo(<span class="string">'page_url'</span>, page_url);</span><br><span class="line">    <span class="keyword">return</span> query.find().then(<span class="function"><span class="keyword">function</span> (<span class="params">counters</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (counters.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            counters[<span class="number">0</span>].increment(<span class="string">'page_uv'</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'increment UV of page_url: '</span> + page_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_pv'</span>));</span><br><span class="line">            <span class="keyword">return</span> counters[<span class="number">0</span>].save()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面PV/UV更新时，更新站点PV/UV</span></span><br><span class="line">AV.Cloud.afterUpdate(<span class="string">'VisitorCounter'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> page_url = request.object.get(<span class="string">'page_url'</span>);</span><br><span class="line">    <span class="keyword">if</span>(page_url.indexOf(<span class="string">'//'</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> site_url = page_url.split(<span class="string">'//'</span>)[<span class="number">1</span>];</span><br><span class="line">    site_url = site_url.substring(<span class="number">0</span>, site_url.indexOf(<span class="string">'/'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'now to update site PV/UV with: '</span> + site_url);</span><br><span class="line">    <span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'page_pv'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">        query.equalTo(<span class="string">'page_url'</span>,site_url);</span><br><span class="line">        query.find().then(<span class="function"><span class="keyword">function</span>(<span class="params">counters</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(counters.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                counters[<span class="number">0</span>].increment(<span class="string">'page_pv'</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update site PV of '</span> + site_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_pv'</span>));</span><br><span class="line">                <span class="keyword">return</span> counters[<span class="number">0</span>].save();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'page_uv'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'VisitorCounter'</span>);</span><br><span class="line">        query.equalTo(<span class="string">'page_url'</span>,site_url);</span><br><span class="line">        query.find().then(<span class="function"><span class="keyword">function</span>(<span class="params">counters</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(counters.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                counters[<span class="number">0</span>].increment(<span class="string">'page_uv'</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update site PV of '</span> + site_url + <span class="string">", "</span> + counters[<span class="number">0</span>].get(<span class="string">'page_uv'</span>));</span><br><span class="line">                <span class="keyword">return</span> counters[<span class="number">0</span>].save();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上这里整个站点的UV统计是不严谨的，因为严格地来讲，同一个IP访问了同一个站点下的N篇文章，它的UV严格地来说应该算1次，可我们这个方案本身就是向LeanCloud妥协的一种做法，就像我这里直接使用了<code>location.href</code>和<code>document.title</code>，它带来的问题就是，一个网站的域名或者链接发生变化的时候，访问统计就会被重置从0开始。“不蒜子”本身就有这个问题。所以，博主这个博客从15年到现在，总访问量只有3万多，就是因为中间更换过两次域名。从我切换到自己写的统计服务以后，我发现每天来读我博客的人居然不少，我实在不忍心写下这种夸自己的句子啊！</p><p>想解决这个问题，并不是没有办法。像博主一开始设计的时候，是打算用每个页面唯一的Id来存储的，而这就要通过HTML5中的<strong>data-</strong>或者通过JavaScript来传参。可当你打算设计一个更通用的东西的时候，这些想法就显得有点多余，我和大部分人一样，喜欢开箱即用的东西，所以，最好它可以像大多数统计服务一样，只需要在页面里加入一行JavaScript脚本。所以，最终采用这样的设计是为了最大限度的开箱即用。考虑到“不蒜子”里因为更换域名而导致的访问统计重置的问题，我增加了一个初始化站点UV/PV的功能，满足了像博主这样虚荣心爆棚的人的需要。这一刻，我突然觉得，我和产品经理们一样“自信”啊。正如你所看到的这样，博客底部的访问统计已经从“不蒜子”切换到“LeanCloud-Counter”，为此我在博客上增加了<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>的链接，也许下一阶段会加上Heroku，总之，我已经完成了访问统计的平滑切换。关于这个项目，如果大家感兴趣，可以参考这个地址：<a href="https://github.com/qinyuanpei/leancloud-counter" target="_blank" rel="noopener">LeanCloud-Counter</a>。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇文章写下来，最大的感受或许是，有一台Linux环境的服务器是多么的重要。起初，是在Windows10下面的WSL里搭了Docker环境，再通过Docker镜像搭建Nginx，因为之前的Consul、ELK几乎都是这样运作的，而且一直运行的相当稳定，唯一的缺点大概就是Docker太容易吃硬盘，有时候难免搞出个内存不足。Nginx搭好以后，发现需要经常改配置文件，Docker环境里改起来相当痛苦。直接在WSL里安装Nginx的话，因为和Windows共享端口，和IIS明显搞不到一起。想通过Docker挂载本机分区，突然想起来WSL里的Docker只是一个客户端，真正的主角是跑在Windows上的Docker for Windows。最后被迫装了Windows版本的Nginx，果然还是会和IIS冲突，我想说，心好累有木有啊_(:з」∠)_。好了，这篇博客总算写完了！</p>]]></content>
    
    <summary type="html">
    
      至此，我们就达到了基于Nginx访问日志实现PV/UV统计的目的;考虑到“不蒜子”里因为更换域名而导致的访问统计重置的问题，我增加了一个初始化站点UV/PV的功能，满足了像博主这样虚荣心爆棚的人的需要;实际上这里整个站点的UV统计是不严谨的，因为严格地来讲，同一个IP访问了同一个站点下的N篇文章，它的UV严格地来说应该算1次，可我们这个方案本身就是向LeanCloud妥协的一种做法，就像我这里直接使用了`location.href`和`document.title`，它带来的问题就是，一个网站的域名或者链接发生变化的时候，访问统计就会被重置从0开始
    
    </summary>
    
      <category term="数据存储" scheme="https://qinyuanpei.github.io/categories/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="访问量" scheme="https://qinyuanpei.github.io/tags/%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    
      <category term="Nginx" scheme="https://qinyuanpei.github.io/tags/Nginx/"/>
    
      <category term="Hyperlog" scheme="https://qinyuanpei.github.io/tags/Hyperlog/"/>
    
  </entry>
  
  <entry>
    <title>使用Python开发插件化应用程序</title>
    <link href="https://qinyuanpei.github.io/posts/1960676615/"/>
    <id>https://qinyuanpei.github.io/posts/1960676615/</id>
    <published>2019-10-11T08:56:27.000Z</published>
    <updated>2020-07-10T02:33:20.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>插件化应用是个老话题啦，在我们的日常生活中更是屡见不鲜。无论是多年来臃肿不堪的Eclipse，亦或者是扩展丰富著称的Chrome，乃至近年来最优秀的编辑器VSCode，插件都是这其中重要的组成部分。插件的意义在于扩展应用程序的功能，这其实有点像iPhone手机和AppStore的关系，没有应用程序的手机无非就是一部手机，而拥有了应用程序的手机则可以是Everything。显然，安装或卸载应用程序并不会影响手机的基本功能，而应用程序离开了手机同样无法单独运行。所以，所谓“插件”，实际上是<strong>一种按照一定规范开发的应用程序，它只能运行在特定的软件平台/应用程序且无法运行</strong>。这里，最重要的一点是应用程序可以不依赖插件单独运行，这是这类“插件式”应用的基本要求。</p><p>好了，在了解了插件的概念以后，我们来切入今天的正文。博主曾经在<a href="https://blog.yuanpei.me/posts/2822230423/" target="_blank" rel="noopener">《基于Python实现Windows下壁纸切换功能》</a>这篇文章中编写了一个小程序，它可以配合Windows注册表实现从 <a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash</a> 上抓取壁纸的功能。最近，博主想为这个小程序增加 <a href="https://cn.bing.com/?mkt=zh-CN" target="_blank" rel="noopener">必应壁纸</a> 和 <a href="https://wallhaven.cc" target="_blank" rel="noopener">WallHaven</a> 两个壁纸来源，考虑到大多数的壁纸抓取流程是一样的，博主决定以“插件”的方式完成这次迭代，换句话说，主程序不需要再做任何调整，当我们希望增加新的数据源的时候，只需要写一个.py脚本即可，这就是今天这篇文章的写作缘由。同样的功能，如果使用Java/C#这类编译型语言来做，我们可能会想到为插件定义一个IPlugin接口，这样每一个插件实际上都是IPlugin接口的实现类，自然而然地，我们会想到通过反射来调用接口里的方法，这是编译型语言的做法。而面对Python这样的解释型语言，我们同样有解释型语言的做法。</p><p>首先，我们从一个最简单的例子入手。我们知道，Python中的import语法可以用来引入一个模块，这个模块可以是Python标准库、第三方库和自定义模块。现在，假设我们有两个模块：<code>foo.py</code> 和 <code>bar.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,uid,msg)</span>:</span></span><br><span class="line">        print(<span class="string">'给&#123;uid&#125;发送消息：&#123;msg&#125;'</span>.format(uid=uid,msg=msg))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendAll</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        print(<span class="string">'群发消息：&#123;msg&#125;'</span>.format(msg=msg))</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bar.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"人生苦短，我用Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"男人哭吧哭吧不是罪"</span>)</span><br></pre></td></tr></table></figure><p>通常, 为了在当前模块(main.py)中使用这两个模块，我们可以使用以下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>这是一种简单粗暴的做法，因为它会导入模块中的全部内容。一种更好的做法是按需加载，例如下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> Chat</span><br></pre></td></tr></table></figure><p>到这里，我们先来思考第一个问题，Python是怎么样去查找一个模块的呢？这和Python中的导入路径有关，通过<code>sys.path</code>我们可以非常容易地找到这些路径，常见的导入路径有<code>当前目录</code>、<code>site-package目录</code>和<code>PYTHONPATH</code>。熟悉Python的朋友应该都知道，<code>site-package</code>和<code>PYTHONPATH</code>各自的含义，前者是通过pip安装的模块的导入目录，后者是Python标准库的导入目录。当前目录这个从何说起呢？事实上，从我们写下<code>from…import…</code>语句的时候，这个机制就已经在工作了，否则Python应该是找不到foo和bar这两个模块的了。这里还有相对导入和绝对导入的问题，一个点(<code>.</code>)和两个点(<code>..</code>)的问题，这些我们在这里暂且按下不表，因为我们会直接修改<code>sys.path</code>(逃</p><p>在Python中有一种动态导入模块的方式，我们只需要告诉它模块名称、导入路径就可以了，这就是下面要说的<code>importlib</code>标准库。继续用foo和bar这两个神奇的单词来举例，假设我们现在不想通过import这种偏“静态”的方式导入一个模块，我们应该怎么做呢？一起来看下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> Chat</span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用foo模块Chat类方法</span></span><br><span class="line">foo.Chat().send(<span class="string">'Dear'</span>,<span class="string">'I Miss You'</span>)</span><br><span class="line">moduleFoo = importlib.import_module(<span class="string">'.'</span>,<span class="string">'foo'</span>)</span><br><span class="line">classChat = getattr(moduleFoo,<span class="string">'Chat'</span>)</span><br><span class="line">classChat().send(<span class="string">'Dear'</span>,<span class="string">'I Miss You'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用bar模块Echo类方法</span></span><br><span class="line">Echo().say()</span><br><span class="line">moduleBar = importlib.import_module(<span class="string">'.'</span>,<span class="string">'bar'</span>)</span><br><span class="line">classEcho = getattr(moduleBar,<span class="string">'Echo'</span>)</span><br><span class="line">classEcho().say()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用bar模块中的cry()方法</span></span><br><span class="line">cry()</span><br><span class="line">methodCry = getattr(moduleBar,<span class="string">'cry'</span>)</span><br><span class="line">methodCry()</span><br></pre></td></tr></table></figure><p>可以注意到，动态导入可以让我们在运行时期间引入一个模块(.py)，这恰恰是我们需要的功能。为了让大家对比这两种方式上的差异，我给出了静态引入和动态引入的等价代码。其中，<code>getattr()</code>其实可以理解为Python中的反射，我们总是可以按照<code>模块</code>-&gt;<code>类</code>-&gt;<code>方法</code>的顺序来逐层查找,即：通过dir()方法，然后该怎么调用就怎么调用。所以，到这里整个“插件化”的思路就非常清晰了，即：首先，通过配置来为Python增加一个导入路径，这个导入路径本质上就是插件目录。其次，插件目录内的每一个脚本文件(.py)就是一个模块，每个模块都有一个相同的方法签名。最终，通过配置来决定要导入哪一个模块，然后调用模块中类的实例方法即可。顺着这个思路，博主为 <a href="https://github.com/qinyuanpei/WallPaper" target="_blank" rel="noopener">WallPaper</a> 项目引入了插件机制，核心代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pluginFile == <span class="string">''</span> <span class="keyword">or</span> pluginName == <span class="string">''</span>):</span><br><span class="line">        spider = UnsplashSpider()</span><br><span class="line">        imageFile = spider.getImage(downloadFolder)</span><br><span class="line">        setWallPaper(imageFile)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> check(pluginFile,addonPath)):</span><br><span class="line">            print(<span class="string">'插件%s不存在或配置不正确'</span> % pluginName)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        module = importlib.import_module(<span class="string">'.'</span>,pluginFile.replace(<span class="string">'.py'</span>,<span class="string">''</span>))</span><br><span class="line">        instance = getattr(module,pluginName)</span><br><span class="line">        imageFile = instance().getImage(downloadFolder)</span><br><span class="line">        setWallPaper(imageFile)</span><br></pre></td></tr></table></figure><p>接下来，我们可以很容易地扩展出 <a href="https://cn.bing.com/?mkt=zh-CN" target="_blank" rel="noopener">必应壁纸</a> 和 <a href="https://wallhaven.cc" target="_blank" rel="noopener">WallHaven</a> 两个“插件”。按照约定，这两个插件都必须实现getImage()方法，它接受一个下载目录作为参数，所以，显而易见，我们在这个插件里实现壁纸的下载，然后返回壁纸的路径即可，因为主程序会完成剩余设置壁纸的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必应每日壁纸插件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingSpider</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(self, downloadFolder)</span>:</span></span><br><span class="line">        searchURL = <span class="string">'https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;mkt=zh-CN'</span></span><br><span class="line">        response = requests.get(searchURL)</span><br><span class="line">        data = json.loads(response.text)</span><br><span class="line"></span><br><span class="line">        resultId = data[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'hsh'</span>]</span><br><span class="line">        resultURL = <span class="string">'https://cn.bing.com'</span> + data[<span class="string">'images'</span>][<span class="number">0</span>][<span class="string">'url'</span>]</span><br><span class="line">        print(<span class="string">u'正在为您下载图片:%s...'</span> % resultId)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> path.exists(downloadFolder)):</span><br><span class="line">            os.makedirs(downloadFolder)</span><br><span class="line">        </span><br><span class="line">        jpgFile = resultId + <span class="string">'.jpg'</span></span><br><span class="line">        jpgFile = os.path.join(downloadFolder, jpgFile)</span><br><span class="line">        response = requests.get(resultURL)</span><br><span class="line">        <span class="keyword">with</span> open(jpgFile,<span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(response.content)</span><br><span class="line">        <span class="keyword">return</span> jpgFile</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WallHaven壁纸插件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WallHavenSpider</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getImage</span><span class="params">(self,downloadFolder)</span>:</span> </span><br><span class="line">        url = <span class="string">'https://alpha.wallhaven.cc/wallpaper/'</span> </span><br><span class="line">        response = requests.get(url) </span><br><span class="line">        print(response.text)</span><br><span class="line">        soup = BeautifulSoup(response.text,<span class="string">'html.parser'</span>)</span><br><span class="line">        imgs = soup.find_all(<span class="string">'img'</span>)</span><br><span class="line">        length = len(imgs)</span><br><span class="line">        <span class="keyword">if</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            match = random.choice(imgs)</span><br><span class="line">            rawUrl = match.get(<span class="string">'src'</span>)</span><br><span class="line">            rawId = rawUrl.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">            rawUrl = <span class="string">'https://w.wallhaven.cc/full/'</span> + rawId[<span class="number">0</span>:<span class="number">2</span>] + <span class="string">'/wallhaven-'</span> + rawId</span><br><span class="line">            raw = requests.get(rawUrl) </span><br><span class="line">            imgFile = os.path.join(downloadFolder, rawId)</span><br><span class="line">            <span class="keyword">with</span> open(imgFile,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(raw.content)</span><br><span class="line">        <span class="keyword">return</span> imgFile</span><br></pre></td></tr></table></figure><p>好了，现在功能是实现了，我们来继续深入“插件化”这个话题。考虑到Python是一门解释型的语言，我们在编写插件的时候，更希望做到“热插拔”，比如修改了某个插件后，希望它可以立刻生效，这个时候我们就需要重新加载模块，此时importlib的reload就能满足我们的要求，这正是博主一开始就要使用importlib，而不是import语法对应内建方法<strong>import</strong>()的原因。以C#的开发经历而言，虽然可以直接更换DLL实现更新，可更新的过程中IIS会被停掉，所以，这种并不能被称之为“热更新”。基于以上两点考虑，博主最终决定使用watchdog配合importlib来实现“热插拔”，下面是关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingEventHandler</span><span class="params">(FileSystemEventHandler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当配置文件修改时重新加载模块</span></span><br><span class="line">    <span class="comment"># 为节省篇幅已对代码进行精简</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        super(LoggingEventHandler, self).on_modified(event)</span><br><span class="line">        what = <span class="string">'directory'</span> <span class="keyword">if</span> event.is_directory <span class="keyword">else</span> <span class="string">'file'</span></span><br><span class="line">        confPath = os.path.join(sys.path[<span class="number">0</span>],<span class="string">'config.ini'</span>)</span><br><span class="line">        <span class="keyword">if</span>(what ==<span class="string">'file'</span> <span class="keyword">and</span> event.src_path == confPath):</span><br><span class="line">            importlib.reload(module)</span><br><span class="line">        logging.info(<span class="string">"Modified %s: %s"</span>, what, event.src_path)</span><br></pre></td></tr></table></figure><p>好了，现在我们就完成了这次“插件化”的迭代，截止到目前为止，博主共完成了 <a href="">Unsplash</a> 、 <a href="">Bing壁纸</a> 、 <a href="">WallHaven</a> 和 <a href="">国家地理</a> 四个“源”的接入，这些插件在实现上基本大同小异，本质上来讲它们是一个又一个的爬虫，只要实现了getImage()这个方法都可以接入进来，这就是我们通常说的“约定大于配置”，关于更多的代码细节，大家可以通过<a href="(https://github.com/qinyuanpei/WallPaper)">Github</a>来了解。</p><p>简单回顾下这篇博客，核心其实是importlib模块的使用，它可以让我们在运行时期间动态导入一个模块，这是实现插件化的重要前提。以此为基础，我们设计了基于Python脚本的单文件插件，即从指定的目录加载脚本文件，每个脚本就是一个插件。而作为插件化的一个延伸，我们介绍了watchdog模块的简单应用，配合importlib模块的reload()方法，就可以实现所谓的“热更新”。好了，以上就是这篇博客的所有内容了，我们下一篇见！</p>]]></content>
    
    <summary type="html">
    
      考虑到Python是一门解释型的语言，我们在编写插件的时候，更希望做到“热插拔”，比如修改了某个插件后，希望它可以立刻生效，这个时候我们就需要重新加载模块，此时importlib的reload就能满足我们的要求，这正是博主一开始就要使用importlib，而不是import语法对应内建方法__import__()的原因;好了，现在我们就完成了这次“插件化”的迭代，截止到目前为止，博主共完成了 [Unsplash]() 、 [Bing壁纸]() 、 [WallHaven]() 和 [国家地理]() 四个“源”的接入，这些插件在实现上基本大同小异，本质上来讲它们是一个又一个的爬虫，只要实现了getImage()这个方法都可以接入进来，这就是我们通常说的“约定大于配置”，关于更多的代码细节，大家可以通过[Github]((https://github.com/qinyuanpei/WallPaper))来了解;mkt=zh-CN) 和 [WallHaven](https://wallhaven.cc) 两个壁纸来源，考虑到大多数的壁纸抓取流程是一样的，博主决定以“插件”的方式完成这次迭代，换句话说，主程序不需要再做任何调整，当我们希望增加新的数据源的时候，只需要写一个.py脚本即可，这就是今天这篇文章的写作缘由
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Python" scheme="https://qinyuanpei.github.io/tags/Python/"/>
    
      <category term="插件化" scheme="https://qinyuanpei.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
      <category term="壁纸" scheme="https://qinyuanpei.github.io/tags/%E5%A3%81%E7%BA%B8/"/>
    
  </entry>
  
  <entry>
    <title>百度地图加载海量标注性能优化策略</title>
    <link href="https://qinyuanpei.github.io/posts/3131944018/"/>
    <id>https://qinyuanpei.github.io/posts/3131944018/</id>
    <published>2019-09-10T09:44:18.000Z</published>
    <updated>2020-07-10T02:33:20.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>在上一篇博客中关于Vue表单验证的话题里，我提到了这段时间在做的城市配载功能，这个功能主要着眼于，如何为客户提供一条路线最优、时效最短、装载率最高的路线。事实上，这是目前物流运输行业智能化、专业化的一个趋势，即面向特定行业的局部最优解问题，简单来说，怎么样能在装更多货物的同时满足运费更低的条件，同时要考虑超载等等不可抗性因素，所以，这实际上是一个数学问题。而作为这个功能本身，在地图上加载大量标注更是基础中的基础，所以，今天这篇博客想说说，通过百度地图API加载海量标注时，关于性能优化方面的一点点经验。</p><h1 id="问题还原"><a href="#问题还原" class="headerlink" title="问题还原"></a>问题还原</h1><p>根据IP定位至用户所在城市后，后台一次性查询出近一个月内的订单，然后将其全部在地图上展示出来。当用户点击或者框选标注物时，对应的订单配载到当前运单中。当用户再次点击标注物，则对应的订单从当前运单中删除。以西安市为例，一次性加载850个左右的订单，用户操作一段时间后，Chrome内存占用达250多兆，拖拽地图的过程中可以明显地感觉到页面卡顿。因为自始至终，地图上的订单数量不变，即不会移除覆盖物，同时需要在内存中持久化订单相关的信息。所以，在城市配载1.0版本的时候，测试同事给我提了一个性能方面的Bug。可开始提方案并坚持这样做的，难道不是产品吗？为什么要给开发提Bug呢？OK，我们来给不靠谱的产品一点点填坑吧，大概想到了下面三种方案，分别是<code>标注物聚合</code>、<code>Canvas API</code>和<code>视野内可见</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g74q1ff3exj217w0l74au.jpg" alt="密密麻麻的地图" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">密密麻麻的地图</div>            </figure><h1 id="标注物聚合方案"><a href="#标注物聚合方案" class="headerlink" title="标注物聚合方案"></a>标注物聚合方案</h1><p>所谓“标注物聚合”，就是指在一定的地图层级上，地图上的覆盖物主要是以聚合的形式显示的，譬如显示某一个省份里共有多少个订单，而不是把所有订单都展示出来，除非地图放大到一定的层级。这种其实在我们产品上是有应用的，比如运单可视化基本上是全国范围内的车辆位置，这个时候在省一级缩放比例上使用聚合展示就非常有必要。可在城市配载这里就相当尴尬啦，因为据说客户会把地图放大到市区街道这种程度来对订单进行配载，所以，这种标注物聚合方案的效果简直是微乎其微，而且更尴尬的问题在于，官方的 <a href="http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js" target="_blank" rel="noopener">MarkerClusterer</a> 插件支持的是标准的覆盖物，即Marker类。而我们的产品为了好看、做更复杂的交互，设计了更复杂的标记物原型，这就迫使我们必须使用<a href="http://lbsyun.baidu.com/jsdemo.htm#c1_11" target="_blank" rel="noopener">自定义覆盖物</a>，而自定义覆盖物通常会用HTML+CSS来实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g74qdli87bj21200mktj6.jpg" alt="标注聚合器MarkerClusterer" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">标注聚合器MarkerClusterer</div>            </figure><p>所以，一个简洁的Marker类和复杂的DOM结构，会在性能上存在巨大差异，这恰恰是我们加载了800多个点就产生性能问题的原因，因为一个“好看”的标注物，居然由4个DOM节点组成，而这个“好看”的标注物还不知道要怎么样实现Marker类里的右键菜单。所以，追求“好看”有问题吗？没有，可华而不实的“好看”，恰恰是性能降低的万恶之源，更不用说，因为覆盖物不会从地图上删除，每次框选都要进行800多次的点的检测了，而这些除了开发没有人会在乎，总有人摆出一副<strong>“这个需求很简单，怎么实现我不管”</strong>的态度……虽然这种方案已经被Pass掉了，这里我们还是通过一个简单的示例，来演示下MarkerClusterer插件的简单使用吧！以后对于前端类的代码，博主会优先使用<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>进行展示，因为这样子显然比贴代码要生动呀！</p><iframe id="cp_embed_qBWJgGE" src="//codepen.io/qinyuanpei/embed/qBWJgGE?height=480px]&theme-id=dark&slug-hash=qBWJgGE&default-tab=[css,result" scrolling="no" frameborder="no" height="480px]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>这里稍微提带说一下这个插件的优化，经博主测试，在标记物数目达到100000的时候，拖拽地图的时候可以明显的感觉的卡顿，这一点大家可以直接在<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>中进行测试。产生性能问题的原因主要在以下代码片段：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 向该聚合添加一个标记。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;Marker&#125; marker 要添加的标记。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 无返回值。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Cluster.prototype.addMarker = function(marker)&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span>.isMarkerInCluster(marker))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;<span class="comment">//也可用marker.isInCluster判断,外面判断OK，这里基本不会命中</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>._center)&#123;</span><br><span class="line">         <span class="keyword">this</span>._center = marker.getPosition();</span><br><span class="line">         <span class="keyword">this</span>.updateGridBounds();<span class="comment">//</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>._isAverageCenter)&#123;</span><br><span class="line">             <span class="keyword">var</span> l = <span class="keyword">this</span>._markers.length + <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">var</span> lat = (<span class="keyword">this</span>._center.lat * (l - <span class="number">1</span>) + marker.getPosition().lat) / l;</span><br><span class="line">             <span class="keyword">var</span> lng = (<span class="keyword">this</span>._center.lng * (l - <span class="number">1</span>) + marker.getPosition().lng) / l;</span><br><span class="line">             <span class="keyword">this</span>._center = new BMap.Point(lng, lat);</span><br><span class="line">             <span class="keyword">this</span>.updateGridBounds();</span><br><span class="line">         &#125;<span class="comment">//计算新的Center</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     marker.isInCluster = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">this</span>._markers.push(marker);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">var</span> len = <span class="keyword">this</span>._markers.length;</span><br><span class="line">     <span class="keyword">if</span>(len &lt; <span class="keyword">this</span>._minClusterSize )&#123;     </span><br><span class="line">         <span class="keyword">this</span>._map.addOverlay(marker);</span><br><span class="line">         <span class="comment">//this.updateClusterMarker();</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len === <span class="keyword">this</span>._minClusterSize) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">             <span class="keyword">this</span>._markers[i].getMap() &amp;&amp; <span class="keyword">this</span>._map.removeOverlay(<span class="keyword">this</span>._markers[i]);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._clusterMarker);</span><br><span class="line">     <span class="keyword">this</span>._isReal = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">this</span>.updateClusterMarker();</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>这段代码主要的问题在于频繁地向地图添加覆盖物，换言之，在这里产生了对DOM的频繁修改，具体可参考<code>_addToClosestCluster</code>方法。一种比较好的优化是，等所有计算结束后再一次性应用到DOM。所以，这里我们可以封装一个render()方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cluster.prototype.render = function()&#123;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>._markers.length; </span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="keyword">this</span>._minClusterSize) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._markers[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._map.addOverlay(<span class="keyword">this</span>._clusterMarker);</span><br><span class="line">            <span class="keyword">this</span>._isReal = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.updateClusterMarker();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于原理介绍及性能对比方面的内容，大家可以参考这篇文章：<a href="https://www.cnblogs.com/anyuan9/p/6232137.html" target="_blank" rel="noopener">百度地图点聚合MarkerClusterer性能优化</a></p><h1 id="Canvas-API方案"><a href="#Canvas-API方案" class="headerlink" title="Canvas API方案"></a>Canvas API方案</h1><p>OK，接下来介绍第二种方案，其实从Canvas API你就可以想到我要说什么了。Canvas API是HTML5中提供的图形绘制接口，类似于我们曾经接触过的GDI/GDI+、Direct2D、OpenGL等等。有没有觉得和游戏越来越近啦，哈哈！百度地图API v3中提供了基于Canvas API的接口，我们可以把这些“好看”的覆盖物绘制到一个层上面去，显然这种方式会比DOM更高效，因为博主亲自做了实验，一次性绘制10万个点放到地图上，真的是一点都不卡诶，要说缺点的话嘛，嗯，你想嘛，这都是不是DOM了，产品经理那些吊炸天的脑洞还怎么搞？比如最基本的点击，可能要用简单的2D碰撞来处理啦，然后就是常规的坐标系转换，听起来更像是在做游戏了，对不对？谁让那么多的游戏都是用HTML5开发的呢？同样的，这里给出一个简单的示例：</p><iframe id="cp_embed_aboRxYq" src="//codepen.io/qinyuanpei/embed/aboRxYq?height=480px]&theme-id=dark&slug-hash=aboRxYq&default-tab=[css,result" scrolling="no" frameborder="no" height="480px]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>这个方案真正尝试去做的时候，发现最难的地方是给Canvas里的元素绑定事件，细心的朋友会发现，博主在这里尝试了两种方案。<strong>第一种，通过判断点是否在矩形内来判断是否完成了点击，主要的问题是随着点的数目的增加判断的量级会越来越大。第二种，通过addHitRegion()增加一个可点击区域，这种的性能明显要比第一种好，唯一的限制在于浏览器的兼容性。</strong>目前，需要在Chrome中开启<code>Experimental Web Platform features</code>。这个探索的过程是相当不易的，大家可以通过<a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>进一步感受一下哈！</p><h1 id="视野内可见方案"><a href="#视野内可见方案" class="headerlink" title="视野内可见方案"></a>视野内可见方案</h1><p>相信大家听完前两个方案都相当失望吧，一个方案用不了，一个方案太麻烦，那这个肯定就是最终可行的方案了吧！猜对了，这真的是体现了大道至简，一开始试着从内存里持久化的数据入手，可最终收到效果的反而是这个最不起眼的方案。简单来说，就是把视野内的覆盖物设为visible，而把视野外的覆盖物设置hidden。相当朴素的一种思维对吧，百度地图API中有一个返回当前视野的接口GetBounds()，它回返回一个矩形。所以，我们只需要调用百度接口判断覆盖物在不在这个矩形里就可以了，显然，这里又会循环800多次，不过产品经理们都不在乎对吧……顺着这个思路，我们可以写出下面的代码，并在拖动地图和缩放地图的时候调用它：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听地图缩放/拖拽事件</span></span><br><span class="line">map.add<span class="constructor">EventListener(<span class="string">"moveend"</span>, <span class="params">showOverlaysByView</span>)</span>;</span><br><span class="line">map.add<span class="constructor">EventListener(<span class="string">"zoomend"</span>, <span class="params">showOverlaysByView</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据视野来显示或隐藏覆盖物</span></span><br><span class="line"><span class="keyword">function</span> show<span class="constructor">OverlaysByView()</span> &#123;</span><br><span class="line">    var bounds = map.get<span class="constructor">Bounds()</span>;</span><br><span class="line">    for (var i = <span class="number">0</span>; i &lt; overlays.length; i++) &#123;</span><br><span class="line">        var overlay = overlays<span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">        var point = overlay._point;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">BMapLib</span>.</span><span class="module"><span class="identifier">GeoUtils</span>.</span></span>is<span class="constructor">PointInRect(<span class="params">point</span>, <span class="params">bounds</span>)</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">BMapLib</span>.</span><span class="module"><span class="identifier">GeoUtils</span>.</span></span>is<span class="constructor">PointOnRect(<span class="params">point</span>, <span class="params">bounds</span>)</span>) &#123;</span><br><span class="line">            overlay.show<span class="literal">()</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            overlay.hide<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在，我只能说，效果挺显著，拖动地图的时候不会卡顿了，因为visible和hidden的切换会引发浏览器重绘，对于这一切我个人表示满意。当然，这一切离好还很遥远，因为，人类的需要是永无止境的啊。</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>就在我写下这篇博客的时候，产品经理热情洋溢地给我描述了城市配载2.0的设想。看了看同类产品的相关设计，我预感这个功能会变成一个以地图为核心的可视化运输系统，这符合国内用户一贯的“大而全”的使用习惯，地图上的交互会更加复杂，需要展示的信息会越来越多，所以，这篇文章里提到的优化，在未来到底有没有用犹未可知。我只能告诉你这样几个原则：<strong>尽可能的使用Marker类；尽可能的简化DOM结构；地图层级变化越大越要考虑使用聚合；视野外的覆盖物该隐藏就隐藏(反正看不到咯……)</strong>。一次性加载百万级别数据要求，我从来不觉得合理，因为就算我能加载出来，你能看的过来吗？本身就是伪需求好吧(逃……好了，这就是这篇博客的全部内容啦，以上……</p>]]></content>
    
    <summary type="html">
    
      可在城市配载这里就相当尴尬啦，因为据说客户会把地图放大到市区街道这种程度来对订单进行配载，所以，这种标注物聚合方案的效果简直是微乎其微，而且更尴尬的问题在于，官方的 [MarkerClusterer](http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js) 插件支持的是标准的覆盖物，即Marker类;百度地图API v3中提供了基于Canvas API的接口，我们可以把这些“好看”的覆盖物绘制到一个层上面去，显然这种方式会比DOM更高效，因为博主亲自做了实验，一次性绘制10万个点放到地图上，真的是一点都不卡诶，要说缺点的话嘛，嗯，你想嘛，这都是不是DOM了，产品经理那些吊炸天的脑洞还怎么搞;所以，一个简洁的Marker类和复杂的DOM结构，会在性能上存在巨大差异，这恰恰是我们加载了800多个点就产生性能问题的原因，因为一个“好看”的标注物，居然由4个DOM节点组成，而这个“好看”的标注物还不知道要怎么样实现Marker类里的右键菜单
    
    </summary>
    
      <category term="前端开发" scheme="https://qinyuanpei.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="地图" scheme="https://qinyuanpei.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="标注" scheme="https://qinyuanpei.github.io/tags/%E6%A0%87%E6%B3%A8/"/>
    
      <category term="配载" scheme="https://qinyuanpei.github.io/tags/%E9%85%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue快速实现通用表单验证</title>
    <link href="https://qinyuanpei.github.io/posts/169430744/"/>
    <id>https://qinyuanpei.github.io/posts/169430744/</id>
    <published>2019-09-06T14:53:46.000Z</published>
    <updated>2020-07-10T02:33:20.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>本文开篇第一句话，想引用鲁迅先生《祝福》里的一句话，那便是：<strong>“我真傻，真的，我单单知道后端整天都是CRUD，我没想到前端整天都是Form表单”</strong>。这句话要从哪里说起呢？大概要从最近半个月的“全栈工程师”说起。项目上需要做一个城市配载的功能，顾名思义，就是通过框选和拖拽的方式在地图上完成配载。博主选择了前后端分离的方式，在这个过程中发现：<strong>首先，只要有依赖jQuery的组件，譬如Kendoui，即使使用了Vue，依然需要通过jQuery去操作DOM。其次，只有有通过Rozar生成的DOM，譬如HtmlHelper，Vue的双向绑定就突然变得尴尬起来，更不用说，Rozar中的@语法和Vue中的@指令相互冲突的问题，原本可以直接用v-for生成列表，因为使用了HtmlHelper，突然一下子变得厌恶起来，虽然Rozar语法非常强大，可我依然没有在JavaScript里写C#的热情，因为实在太痛苦啦Orz……</strong></p><p>所以，想做好前后端分离，首先需要分离出一套前端组件库，做不到这一点，前后端分离就无从谈起，就像我们公司的项目，即使框架切换到.NET Core，可是在很长的一段时间里，我们其实还是再写MVC，因为所有的组件都是后端提供的HtmlHelper/TagHelper这种形式。我这次做项目的过程中，其实是通过jQuery实现了一部分组件，正因为如此，一个在前后端不分离时非常容易实现的功能，在前后端分离以后发现缺好多东西，就比如最简单的表单验证功能，即便你是在做一个新项目，为了保证产品在外观上的一致性，你还是得依赖老项目的东西，所以，这篇博客主要想说说前后端分离以后，Vue的时代怎么去做表单的验证。因为我不想测试同事再给我提Bug，问我为什么只有来自后端接口的验证，而没有来自前端页面的验证。我希望，在写下这篇博客之前，我可以实现和老项目一模一样的表单验证。如同CRUD之于后端，80%的前端都是在写Form表单，所以，这个事情还是挺有意思的。</p><h1 id="最简单的表单验证"><a href="#最简单的表单验证" class="headerlink" title="最简单的表单验证"></a>最简单的表单验证</h1><p>OK，作为国内最接“地气”的前端框架，Vue的文档可以说是相当地“亲民”啦！为什么这样说呢，因为其实在<a href="https://cn.vuejs.org/v2/cookbook/form-validation.html" target="_blank" rel="noopener">官方文档</a>中，尤大已经提供了一个表单验证的示例，这个示例让我想起给某银行做自动化工具时的情景，因为这两者都是采用MVVM的思想，所以，理解起来是非常容易的，即：通过一个列表来存储错误信息，而这个错误信息会绑定到视图层，所以，验证的过程其实就是向这个列表里添加错误信息的过程。我们一起来看这个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好，请登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginFrom"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default login"</span> <span class="attr">v-on:click</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"errorList.length &gt; 0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>&#123;&#123;errorList.join(';')&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#loginFrom'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">        email: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">        password: <span class="string">""</span>,</span></span><br><span class="line">        errorList: []</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">        validate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.errorList = []</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.email == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.errorList.push(<span class="string">'请输入邮箱'</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> reg = <span class="regexp">/^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]&#123;2,4&#125;)$/</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (!reg.test(<span class="keyword">this</span>.email)) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.errorList.push(<span class="string">'请输入有效的邮箱'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.password == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.errorList.push(<span class="string">'请输入密码'</span>);</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (<span class="keyword">this</span>.password.length &lt; <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.errorList.push(<span class="string">'密码长度不得少于6位'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="keyword">this</span>.errorList.length &lt;= <span class="number">0</span>;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        login: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (<span class="keyword">this</span>.validate()) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'登录成功'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了排除无关内容对大家的影响，写这个例子的时候，博主排除了一切复杂的HTML结构和CSS样式，经过简单润色以后，这个例子的效果展示如下，果然GUI满足了人们颜控的一面，可让这个世界高速运行的是CLI，Bootstrap是博主这种“全栈工程师”的最爱之一。这种验证方式简直是人类本能的反应，可这恰好是最糟糕的一个例子，因为这个代码完全没法复用，可以想象得到，如果再继续增加针对密码强度，譬如大小写、数字等等的验证，这个代码会混乱成什么样子，所以，这是最简单的表单验证，同样是最糟糕的表单验证。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g6q1v1x70cj20n50aa3yq.jpg" alt="第一个表单验证的例子" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">第一个表单验证的例子</div>            </figure><h1 id="基于jQuery的表单验证"><a href="#基于jQuery的表单验证" class="headerlink" title="基于jQuery的表单验证"></a>基于jQuery的表单验证</h1><p>其实，如果不是因为老项目依赖jQuery，而新项目在某些地方又需要和老项目保持一致，有谁会喜欢在Vue的世界里使用jQuery呢？因为数据驱动和事件驱动，真的是两种不同的思想，我就见过因为监听不到某个事件而花费一整天时间的人……所以，这里使用jQuery的表单验证插件<a href="https://jqueryvalidation.org/documentation/" target="_blank" rel="noopener">jQuery Validation</a>，目的只有一个，即实现博主对自己的承诺，做一个和老项目一模一样的表单验证。官方这个示例最大的问题是，它的检验逻辑扩展性比较差，后端同学对这个应该有所体会啦，譬如实际业务中常常有邮箱、手机号、非空、数字、正则等等的验证规则，而后端常常采用基于Attribute的验证或者是FluentValidation这样的库，所以，核心问题是，能不能定义相应的验证规则。接下来，我们通过jQuery的表单验证插件来实现验证。</p><p>通常情况下，jQuery Validation支持面向控件和面向代码两种验证方式。所谓面向控件，就是指在控件里添加类似<code>required</code>、<code>email</code>、<code>range</code>等等的扩展属性，jQuery Validation内置了十余种标准的验证规则，基本可以满足我们的日常使用。而面向代码，就是通过JavaScript来定义验证规则，这就非常符合Vue数据驱动的风格了，因为在JavaScript里一切皆是对象，而这些对象可以作为Vue中的数据来使用。自然而然地，在第一个示例的基础上，我们可以非常容易地扩展出基于jQuery的表单验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:'#loginFrom',</span><br><span class="line">    data:&#123;</span><br><span class="line">        email:"",</span><br><span class="line">        password:"",</span><br><span class="line">        validators:&#123;</span><br><span class="line">            rules: &#123;</span><br><span class="line">                email: &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    email: true</span><br><span class="line">                &#125;,</span><br><span class="line">                password: &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    minlength: 6,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            messages:&#123;</span><br><span class="line">                email:&#123;</span><br><span class="line">                    required:"请输入邮箱",</span><br><span class="line">                    email:"请输入有效的邮箱"</span><br><span class="line">                &#125;,</span><br><span class="line">                password:&#123;</span><br><span class="line">                    required:"请输入密码",</span><br><span class="line">                    minlength:"密码长度不得少于6位"</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted:function()&#123;</span><br><span class="line">        $('#loginFrom').validate(this.validators);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于当前表单loginFrom，其验证规则为validators，它完全参照<code>jQuery Validation</code>的API文档而来，具体大家可以从<code>jQuery Validation</code>的文档来做进一步了解。这里唯一看起来不爽的就是<code>#loginFrom</code>，因为它和整个Vue看起来格格不入。不过，像博主目前项目的处境，如果老项目里使用<code>jQuery</code>来对表单进行验证，而使用Vue开发的新项目要兼容老项目的设计风格，使用jQuery有什么不可以呢？不得不说，Vue作为一个渐进式的开发框架，真正照顾了各个”年龄”段的前端工程师。使用<code>jQuery Validation</code>以后的表单验证效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g6q3nex2jhj20nk0anq36.jpg" alt="基于jQuery的表单验证" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">基于jQuery的表单验证</div>            </figure><p>通过<code>jQuery Validation</code>，我们或许能感觉到一点不一样的地方，那就是表单验证其实还是蛮有意思的哈。也许是因为我原本是一个无聊的人，所以看到一点新的东西就觉得有趣。就像我虽然在提交数据时在后端做了校验，可牺牲的其实是整个前端的使用体验。而如果在前端对数据进行校验，是在输入过程中校验还是在输入完成校验，是通过表单自带的提交功能还是自己发起一个AJAX请求，这里面的确是有非常多的细节支撑的。第一种方案不支持远程校验，这更加能说明校验本身要考虑的不单单只有前端了，同理，有了前端的校验，不代表后端可以不做校验。前端时间有人在知乎上提问，大意是说前端该不该完全信任后端返回的数据，严格来说，我们不应该信任任何人提供的数据，而这就是校验这件事情本身的意义。</p><h1 id="基于Vue的表单验证"><a href="#基于Vue的表单验证" class="headerlink" title="基于Vue的表单验证"></a>基于Vue的表单验证</h1><p>OK，如果说前面的两种校验是因为我们有一点历史包袱，那么，接下来，我们将尝试采用更“现代化”的表单验证方式。通过Vue文档中关于<a href="https://cn.vuejs.org/v2/cookbook/form-validation.html" target="_blank" rel="noopener">数据校验</a>这一节的内容，我们了解到官方推荐的两个表单验证插件是<a href="https://github.com/monterail/vuelidate" target="_blank" rel="noopener">vuelidate</a>和<a href="http://vee-validate.logaretm.com/" target="_blank" rel="noopener">VeeValidate</a>，而实际上这篇博客中的第一个例子，就是由文档中的例子演化而来。我个人比较喜欢后者，所以，下面我们将使用这个插件来完成第三个例子。首先 ，我们通过<code>Vue-Cli</code>创建一个Vue项目，然后安装下面<code>vee-validate</code>和<code>vue-i18n</code>两个插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vee-validate@2.0.0 --save</span><br><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure><p>注意到这里指定了版本号，这是因为最新的3.x超出了我这个新人的接受范围，一句话，太难了！接下来，我们在入口文件<code>main.js</code>中添加下面的代码，目的是启用这两个插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span>;</span><br><span class="line"><span class="keyword">import</span> VeeValidate <span class="keyword">from</span> <span class="string">'vee-validate'</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">'vee-validate/dist/locale/zh_CN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用Vue国际化插件</span></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置VeeValidate</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">    locale: <span class="string">'zh_CN'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.use(VeeValidate, &#123;</span><br><span class="line">    i18n,</span><br><span class="line">    i18nRootKey: <span class="string">'validation'</span>,</span><br><span class="line">    dictionary: &#123;</span><br><span class="line">        zh_CN</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来，编写一个单文件组件<code>LoginForm.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>你好，请登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal col-md-offset-4 col-md-4"</span> <span class="attr">id</span>=<span class="string">"loginFrom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">v-validate</span>=<span class="string">"'required|email'"</span> <span class="attr">data-vv-as</span>=<span class="string">"邮箱"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('email')"</span>&gt;</span>&#123;&#123; errors.first('email') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">rules</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">v-validate</span>=<span class="string">"'required|min:6'"</span> <span class="attr">data-vv-as</span>=<span class="string">"密码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('password')"</span>&gt;</span>&#123;&#123; errors.first('password') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span>记住密码</span><br><span class="line">              <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default login"</span> <span class="attr">v-on:click</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"LoginForm"</span>,</span></span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span></span><br><span class="line"><span class="actionscript">    email: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">    password: <span class="string">""</span></span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    login: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- style of LoginForm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.login</span> &#123;</span></span><br><span class="line">  color: white;</span><br><span class="line">  height: 38px;</span><br><span class="line">  width: 300px;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#2b669a</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我们在关键的两个input控件上添加了<code>v-validate</code>和<code>data-vv-as</code>这两个属性。比如我们这里需要验证用户输入的邮箱是否合法、邮箱是否为空，那么我们就可以使用下面的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">v-validate</span>=<span class="string">"'required|email'"</span> <span class="attr">data-vv-as</span>=<span class="string">"邮箱"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">v-show</span>=<span class="string">"errors.has('email')"</span>&gt;</span>&#123;&#123; errors.first('email') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些语法在Vue中被称为指令，而<code>data-vv-as</code>则是HTML5中的一个特性，用来给提示信息中的字段起一个别名。实际上，这个插件里同样内置了一批常见的校验规则。当控件中的值不满足校验条件时，就会在<code>errors</code>中产生错误信息，所以，我们根据错误信息中是否包含指定字段来决定要不要展示错误信息，这就是这个插件的作用。运行这个例子，我们会得到下面的结果。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g6rebtg81jj20n70hj74u.jpg" alt="基于Vue的表单校验" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">基于Vue的表单校验</div>            </figure><p>既然提到这类表单验证最难的地方在于扩展性，那么下面我们再来看看如何扩展一个新的校验规则，这里以最常见的手机号校验为例,  个人以为这是这个插件最为强大的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Validator.extend(<span class="string">'isMobile'</span>, &#123;</span><br><span class="line">  messages: &#123;</span><br><span class="line">    zh_CN: <span class="function"><span class="params">field</span> =&gt;</span> field + <span class="string">'必须是11位手机号码'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  validate: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.length === <span class="number">11</span> &amp;&amp; <span class="regexp">/^((13|14|15|17|18)[0-9]&#123;1&#125;\d&#123;8&#125;)$/</span>.test(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相信通过今天这篇博客，大家应该对Vue里的表单验证有一点心得了。这类验证的库或者框架其实非常多，整合到Vue中要做的工作无外乎写一个插件，在控件触发相关事件或者表单提交的时候进行验证。作为一个Vue的新人，这个过程可谓是路漫漫其修远。你大概想不到，我是在凌晨加班加到凌晨两点半的情况下做完这几个示例的，最近这两三个月里加的班比我过去三年都多，这到底是好事还是坏事呢？有时候不知道自己还能不能坚持下去，往事已矣，人难免会感到迷茫的吧！</p><h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>这篇博客主要通过三个示例分享了Vue下表单校验的实现，而促使博主对这一切进行研究的原始动力，则是源于一个实际工作中通过Vue开发的新项目。前后端要不要分离、项目里要不要继续使用jQuery、该不该频繁地操作DOM，这其实是毫无关联地三件事情，而这种事情90%的人是完全不关心的，就像有一种看起来相当“成年人”的做法，出了事情第一时间不是去纠结谁的过错，而是问能不能马上解决以及解决问题需要多长时间。这看起来好像一点问题都没有，可不去在意事件本身对错的人，是因为这些问题不需要他去处理，利益相关和责任相关是完全不一样的，因为你不能一出问题全部都找到程序员这里，这项目又不是程序员一个人的。我关心这些无关紧要的问题，纯粹是因为我对自己做的东西有一种感情，我想做好它而已，我希望自己是个纯粹的人，而且可以一直纯粹下去，晚安！</p>]]></content>
    
    <summary type="html">
    
      通过Vue文档中关于[数据校验](&lt;https://cn.vuejs.org/v2/cookbook/form-validation.html&gt;)这一节的内容，我们了解到官方推荐的两个表单验证插件是[vuelidate](https://github.com/monterail/vuelidate)和[VeeValidate](http://vee-validate.logaretm.com/)，而实际上这篇博客中的第一个例子，就是由文档中的例子演化而来;&lt;div class=&quot;form-group&quot; name=&quot;password&quot; rules=&quot;required&quot;&gt;;-- script of LoginForm --&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://qinyuanpei.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Vue" scheme="https://qinyuanpei.github.io/tags/Vue/"/>
    
      <category term="表单" scheme="https://qinyuanpei.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="验证" scheme="https://qinyuanpei.github.io/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>在WSL中使用Linux桌面环境的尝试与总结</title>
    <link href="https://qinyuanpei.github.io/posts/3972610476/"/>
    <id>https://qinyuanpei.github.io/posts/3972610476/</id>
    <published>2019-08-17T21:09:46.000Z</published>
    <updated>2020-07-10T02:33:20.073Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/styles/APlayer.min.css"><script src="/assets/scripts/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/scripts/Meting.min.js"></script><p>最近忙里偷闲的博主，再次迷恋上折腾Linux。话说自从微软推出WSL以后，我就彻底地停止了Windows + Linux 的双系统组合。回想起从前使用过的各种Linux发行版，基本上每隔一段时间就会崩溃一次，所以，面对WSL这种近乎<code>应用</code>级别的方案，我个人是非常愿意去接受的。因为一不小心玩坏了的话，可以直接对应用程序进行重置，或者重新从应用商店下载，相比重装系统，我觉得这种方式要更友好一点。虽然说Windows10是有史以来最好的Linux发行版:smile:，可面对只有命令行的Linux，果然还是有一丝丝的失望啊:beetle:。所以，在这篇博客里，主要想和大家分享下，关于在WSL下使用Linux桌面系统的一点点尝试和体会。虽然目前应用商店里已经提供了Ubuntu、Debian、Kail Linux、OpenSUSE这些常见的发行版，可当你熟悉了Linux的世界以后，就会明白这个世界对多元化的追求是永无止境的，我不想去Judge这些多元化间优劣，我只想自由地使用我喜欢的技术，比如Linux Deepin、Elementary OS。这是我想要使用Linux桌面环境的理由。</p><p>我们知道，目前应用商店里提供的Linux发行版都是<code>&quot;命令行&quot;</code>版本。因为Windows本身就提供了非常出色的桌面环境，虽然每一次设计都给人一种相当前卫的感觉。平时我们使用<code>SSH</code>登录远程服务器的时候，其实是使用它的终端环境即CLI。Linux和Windows最大的不同在于，Linux 的桌面环境并不是Linux本身的一部分，它和所有的Linux应用程序并没有什么区别，因为脱离桌面环境的Linux的单独运行，而脱离桌面环境的Windows则未必可以。那么，我们怎么样在Windows里使用Linux的桌面环境呢？常见的思路主要有<code>XServer</code>和<code>远程桌面</code>两种。这里我们主要介绍第一种方式，即<code>XServer</code>。什么是XServer呢？Linux的GUI架构其实是C/S模式的，其中XServer负责显示，XClient负责请求。所以，我们只要在宿主机上安装XServer就可以啦。在这里，常见的XServer主要有：<code>VcXsrv</code>、<code>X410</code>和<code>MobaXterm</code>。理论上，我们只需要在WSL里安装桌面环境，在Windows上安装XServer，然后通过命令行启动相应桌面环境即可。</p><p>作为一个最流行的Linux发行版，微软非常贴心地给出了16.04和18.04两个版本。不过随着博主不甘寂寞地一通升级以后，最终还是稳定在了18.04这个版本。既然选择从Ubuntu这个发行版开始折腾，不如从它默认的桌面环境Gnome开始折腾吧！虽然我个人一直不太喜欢这个风格，不然就不会有接下来针对<code>Pantheon</code>和<code>Deepin</code>两个桌面环境的作死啦。这个过程最有意思的事情，居然是发现了一个更轻量级的桌面环境，可能真的是<code>&quot;无心插柳柳成荫&quot;</code>吧。好了，关于如何开启WSL及安装Linux发行版的过程不再多说。首先，让我们把系统默认的源切换到阿里云，因为这样能节省博主和大家的时间。:slightly_smiling_face:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.2019016</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>接下来，我们使用下面的命令对文件内容进行替换, 或者你可以手动逐行去编辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:%s/security.ubuntu/mirrors.aliyun/g</span><br><span class="line">:%s/archive.ubuntu/mirrors.aliyun/g</span><br></pre></td></tr></table></figure><p>除此以外，还推荐大家使用以下国内的镜像源：</p><p>清华大学镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p><p>网易开源镜像站：<a href="http://mirrors.163.com/.help/ubuntu.html" target="_blank" rel="noopener">http://mirrors.163.com/.help/ubuntu.html</a></p><p>完成镜像源的切换以后，我们就可以愉快地使用<code>apt-get update</code>刷一波存在感啦，话说最近看到一条微博，建议给<code>sudo</code>起一个别名<code>plz</code>或者<code>pls</code>。除了调侃以外，可能更多是想把冰冷的命令行变得充满人情味吧。Windows下安装<code>VcXsrv</code>大家都轻车熟路啦，这个不再过多的说明。下面，我们来安装以下Ubuntu桌面环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "y"|sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</span><br><span class="line">sudo dpkg-reconfigure dbus &amp;&amp; service dbus restart</span><br></pre></td></tr></table></figure><p>接下来配置<code>XLaunch</code>，这是我们安装完<code>VcXsrv</code>后自带一个应用程序：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g633ck83tij20ek0bpwfg.jpg" alt="配置XLaunch" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">配置XLaunch</div>            </figure><p>按照默认配置直至完成后我，我们会发现桌面上出现了一个黑色的窗口，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g633jddpbcj21200lcabq.jpg" alt="XLaunch经典黑屏" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">XLaunch经典黑屏</div>            </figure><p>此时，我们在Ubuntu的Bash窗口中输入<code>sudo compiz</code>命令并切回<code>XLaunch</code>界面。接下来，就是见证奇迹的时刻：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g67nqmov1yj21410p0qdr.jpg" alt="经典的Ubuntu桌面" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">经典的Ubuntu桌面</div>            </figure><p>如你所见，这是Ubuntu默认的Unity桌面，博主一开始是在Ubuntu16.04上研(折)究(腾)的，当时安装完以后桌面其实是黑色的，因为当时并没有保留下这历史性的一刻，所以，从网上找了张图来这里充数啦，这张图片出自：<a href="https://github.com/microsoft/WSL/issues/637" target="_blank" rel="noopener">Run any Desktop Environment in WSL</a>。</p><p>OK，既然Ubuntu可以装桌面，那么，衍生自Ubuntu的Elementary OS和Linux Deepin应该同样可以吧，虽然目前应用商店里还有这两个发行版。本着不折腾就不会死的选择，先装个Elementary OS的桌面环境试试呗！我个人挺喜欢这个发行版的，理由是默认主题样式就很好看，同理，Linux Deepin除了好看以外，本身就带有大量优秀的软件。所以说，人类果然还是始于颜值的啊！Elementary OS使用的桌面环境是Pantheon，我们可以通过下面的命令行快速安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:elementary-os/stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install elementary-desktop</span><br></pre></td></tr></table></figure><p>通常，每个桌面环境都会自带一部分“最佳”适配的应用程序，考虑到WSL并不是一个完整的Linux实现，我们在这里卸载掉一部分WSL下不支持的应用程序。而微软新推出的WSL2，则是基于VM的实现，两种方式完全没有可比性，这里不做无意义的争论：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge gnome-screensaver \</span><br><span class="line">switchboard-plug-power switchboard-plug-bluetooth switchboard-plug-networking \</span><br><span class="line">wingpanel-indicator-bluetooth wingpanel</span><br></pre></td></tr></table></figure><p>参考<a href="https://token2shell.com/howto/x410/installing-pantheon-desktop-on-ubuntu-wsl/" target="_blank" rel="noopener">Installing Pantheon Desktop On Ubuntu</a>这篇文章中的建议，为了启动Pantheon桌面环境，我们需要 <code>gala</code>、 <code>plank</code>和<code>wingpanel</code>三个软件，它们的作用有点像前面的<code>compiz</code>。而关于<code>X410</code>，你可以把它理解为和<code>VcXsrv</code>类似的软件，不同的是这是一个付费软件，作者写了一系列的博客来推广它。接下来，在安装<code>gala</code>的过程中，你大概会遇到这个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The following packages have unmet dependencies:</span><br><span class="line">gala : Depends: libmutter-2-0 (&gt;= 3.28.4-0ubuntu18.04.1+elementary4~ubuntu5.0.1) but 3.28.4-0ubuntu18.04.1 is to be installed</span><br><span class="line">E: Unable to correct problems, you have held broken packages.</span><br></pre></td></tr></table></figure><p>我向作者发邮件寻求帮助，作者非常热心地回复了我三次邮件，对方表示应该是Elementary OS团队正在基于Ubuntu19.04开发新版本，所以可能没有意识到<code>elementary-desktop</code>这个包已经broken了，并且他们在18.04版本上复现了这个问题，建议我直接联系官方。好吧，博主的英语表示受宠若惊，邮件在此为证：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g6877vhqhcj20io0hut9u.jpg" alt="来自国外网友的热心指导" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">来自国外网友的热心指导</div>            </figure><p>总而言之，博主试图在WSL上体验Elementary OS的想法彻底失败，既然这个最美的Linux发行版已失败告终，并不打算就此罢手的博主，决定继续在命令行终端里折腾Linux Deepin。这个发行版是我从大学时开始接触的Linux发行版，那时有个小学弟第一次给我介绍了Linux Mint，不过我对这个版本实在爱不起来，因为太像Windows了啊，可谁能想到若干年后，Windows反而变成了最好的Linux发行版呢(:smile:)，果真是<code>“人生不相见，动如参与商”</code>啊……</p><p>好啦，继续敲命令。Linux Deepin的桌面环境是Deepin Desktop Environment，简称dde：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:leaeasy/dde</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install dde dde-file-manager</span><br></pre></td></tr></table></figure><p>Linux Deepin安装是非常顺畅的，但即便安装完这个桌面环境，博主还是不知道怎么启动这个环境，因为你常规使用Ubuntu的话，安装完切换桌面管理器就可以了，可当你用WSL这种方式使用Ubuntu的时候，可能你就会感到非常困惑。相比之下，<code>xfce</code>就让人感觉友好得多，因为它只有一个命令<code>startxfce4</code>，而安装只需要安装<code>xfce4</code>和<code>xfce4-terminal</code>就可以了。在对比了Gnome、KDE、Unity、Mint、xfce等等的桌面环境以后，我觉得Linux在桌面市场输给Windows是理所当然的，因为实在太混乱了，WSL下需要的应该是一个轻量级的桌面，因为越是华而不实东西，越会消耗大量资源。我最初想要折腾桌面环境，无非是为了下面这个结果，撒花完结，以上！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ww1.sinaimg.cn/large/4c36074fly1g67nrxqcm4j21hc0u0nat.jpg" alt="简洁/简陋的xfce桌面" title="" referrerpolicy="no-referrer">                </div>                <div class="image-caption">简洁/简陋的xfce桌面</div>            </figure>]]></content>
    
    <summary type="html">
    
      Linux Deepin安装是非常顺畅的，但即便安装完这个桌面环境，博主还是不知道怎么启动这个环境，因为你常规使用Ubuntu的话，安装完切换桌面管理器就可以了，可当你用WSL这种方式使用Ubuntu的时候，可能你就会感到非常困惑;虽然目前应用商店里已经提供了Ubuntu、Debian、Kail Linux、OpenSUSE这些常见的发行版，可当你熟悉了Linux的世界以后，就会明白这个世界对多元化的追求是永无止境的，我不想去Judge这些多元化间优劣，我只想自由地使用我喜欢的技术，比如Linux Deepin、Elementary OS;在对比了Gnome、KDE、Unity、Mint、xfce等等的桌面环境以后，我觉得Linux在桌面市场输给Windows是理所当然的，因为实在太混乱了，WSL下需要的应该是一个轻量级的桌面，因为越是华而不实东西，越会消耗大量资源
    
    </summary>
    
      <category term="开发工具" scheme="https://qinyuanpei.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="WSL" scheme="https://qinyuanpei.github.io/tags/WSL/"/>
    
      <category term="Linux" scheme="https://qinyuanpei.github.io/tags/Linux/"/>
    
      <category term="桌面" scheme="https://qinyuanpei.github.io/tags/%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
</feed>
